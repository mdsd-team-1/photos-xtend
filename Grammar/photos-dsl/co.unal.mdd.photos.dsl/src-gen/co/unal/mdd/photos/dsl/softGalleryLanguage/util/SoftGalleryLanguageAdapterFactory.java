/**
 * generated by Xtext 2.18.0
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.util;

import co.unal.mdd.photos.dsl.softGalleryLanguage.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage
 * @generated
 */
public class SoftGalleryLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SoftGalleryLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoftGalleryLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SoftGalleryLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SoftGalleryLanguageSwitch<Adapter> modelSwitch =
    new SoftGalleryLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseEntities(Entities object)
      {
        return createEntitiesAdapter();
      }
      @Override
      public Adapter casePhoto(Photo object)
      {
        return createPhotoAdapter();
      }
      @Override
      public Adapter caseAlbum(Album object)
      {
        return createAlbumAdapter();
      }
      @Override
      public Adapter caseUserDomain(UserDomain object)
      {
        return createUserDomainAdapter();
      }
      @Override
      public Adapter caseFunctionality(Functionality object)
      {
        return createFunctionalityAdapter();
      }
      @Override
      public Adapter caseFunctionalities(Functionalities object)
      {
        return createFunctionalitiesAdapter();
      }
      @Override
      public Adapter caseProfileManagement(ProfileManagement object)
      {
        return createProfileManagementAdapter();
      }
      @Override
      public Adapter caseProfileManagementFunctions(ProfileManagementFunctions object)
      {
        return createProfileManagementFunctionsAdapter();
      }
      @Override
      public Adapter caseAppAccess(AppAccess object)
      {
        return createAppAccessAdapter();
      }
      @Override
      public Adapter caseAppAccessFunctions(AppAccessFunctions object)
      {
        return createAppAccessFunctionsAdapter();
      }
      @Override
      public Adapter caseAlbumManagement(AlbumManagement object)
      {
        return createAlbumManagementAdapter();
      }
      @Override
      public Adapter caseAlbumManagementFunctions(AlbumManagementFunctions object)
      {
        return createAlbumManagementFunctionsAdapter();
      }
      @Override
      public Adapter casePhotoActions(PhotoActions object)
      {
        return createPhotoActionsAdapter();
      }
      @Override
      public Adapter casePhotoActionsFunctions(PhotoActionsFunctions object)
      {
        return createPhotoActionsFunctionsAdapter();
      }
      @Override
      public Adapter caseLandingActions(LandingActions object)
      {
        return createLandingActionsAdapter();
      }
      @Override
      public Adapter caseLandingFunctions(LandingFunctions object)
      {
        return createLandingFunctionsAdapter();
      }
      @Override
      public Adapter caseDomainConnection(DomainConnection object)
      {
        return createDomainConnectionAdapter();
      }
      @Override
      public Adapter caseDomainRelations(DomainRelations object)
      {
        return createDomainRelationsAdapter();
      }
      @Override
      public Adapter caseArchitecture(Architecture object)
      {
        return createArchitectureAdapter();
      }
      @Override
      public Adapter caseNTiers(NTiers object)
      {
        return createNTiersAdapter();
      }
      @Override
      public Adapter caseLayer(Layer object)
      {
        return createLayerAdapter();
      }
      @Override
      public Adapter casePresentationLayer(PresentationLayer object)
      {
        return createPresentationLayerAdapter();
      }
      @Override
      public Adapter casePresentationContent(PresentationContent object)
      {
        return createPresentationContentAdapter();
      }
      @Override
      public Adapter casePresentationSegments(PresentationSegments object)
      {
        return createPresentationSegmentsAdapter();
      }
      @Override
      public Adapter caseBusinessLogicLayer(BusinessLogicLayer object)
      {
        return createBusinessLogicLayerAdapter();
      }
      @Override
      public Adapter caseBusinessLogicContent(BusinessLogicContent object)
      {
        return createBusinessLogicContentAdapter();
      }
      @Override
      public Adapter caseBusinessLogicSegments(BusinessLogicSegments object)
      {
        return createBusinessLogicSegmentsAdapter();
      }
      @Override
      public Adapter caseDataPersistenceLayer(DataPersistenceLayer object)
      {
        return createDataPersistenceLayerAdapter();
      }
      @Override
      public Adapter caseDataPersistenceContent(DataPersistenceContent object)
      {
        return createDataPersistenceContentAdapter();
      }
      @Override
      public Adapter caseDataPersistenceSegments(DataPersistenceSegments object)
      {
        return createDataPersistenceSegmentsAdapter();
      }
      @Override
      public Adapter caseSegmentStructure(SegmentStructure object)
      {
        return createSegmentStructureAdapter();
      }
      @Override
      public Adapter caseSegmentStructureContent(SegmentStructureContent object)
      {
        return createSegmentStructureContentAdapter();
      }
      @Override
      public Adapter caseDirectoryContent(DirectoryContent object)
      {
        return createDirectoryContentAdapter();
      }
      @Override
      public Adapter caseDirectories(Directories object)
      {
        return createDirectoriesAdapter();
      }
      @Override
      public Adapter caseSingleFile(SingleFile object)
      {
        return createSingleFileAdapter();
      }
      @Override
      public Adapter caseMultipleFile(MultipleFile object)
      {
        return createMultipleFileAdapter();
      }
      @Override
      public Adapter caseLayerRelations(LayerRelations object)
      {
        return createLayerRelationsAdapter();
      }
      @Override
      public Adapter caseLayerSource(LayerSource object)
      {
        return createLayerSourceAdapter();
      }
      @Override
      public Adapter caseLayerTarget(LayerTarget object)
      {
        return createLayerTargetAdapter();
      }
      @Override
      public Adapter caseArchitectureComponents(ArchitectureComponents object)
      {
        return createArchitectureComponentsAdapter();
      }
      @Override
      public Adapter caseFrontEnd(FrontEnd object)
      {
        return createFrontEndAdapter();
      }
      @Override
      public Adapter caseBackEnd(BackEnd object)
      {
        return createBackEndAdapter();
      }
      @Override
      public Adapter casePersistenceDataComponent(PersistenceDataComponent object)
      {
        return createPersistenceDataComponentAdapter();
      }
      @Override
      public Adapter caseNTiersConnections(NTiersConnections object)
      {
        return createNTiersConnectionsAdapter();
      }
      @Override
      public Adapter caseNTierConnectionContent(NTierConnectionContent object)
      {
        return createNTierConnectionContentAdapter();
      }
      @Override
      public Adapter caseNTierSource(NTierSource object)
      {
        return createNTierSourceAdapter();
      }
      @Override
      public Adapter caseNTierTarget(NTierTarget object)
      {
        return createNTierTargetAdapter();
      }
      @Override
      public Adapter caseNTiersRelations(NTiersRelations object)
      {
        return createNTiersRelationsAdapter();
      }
      @Override
      public Adapter caseTechnology(Technology object)
      {
        return createTechnologyAdapter();
      }
      @Override
      public Adapter caseTechnologies(Technologies object)
      {
        return createTechnologiesAdapter();
      }
      @Override
      public Adapter caseSpring(Spring object)
      {
        return createSpringAdapter();
      }
      @Override
      public Adapter caseSpringBootApplication(SpringBootApplication object)
      {
        return createSpringBootApplicationAdapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseEnableGlobalMethodSecurity(EnableGlobalMethodSecurity object)
      {
        return createEnableGlobalMethodSecurityAdapter();
      }
      @Override
      public Adapter caseEnableAuthorizationServer(EnableAuthorizationServer object)
      {
        return createEnableAuthorizationServerAdapter();
      }
      @Override
      public Adapter caseEnableResourceServer(EnableResourceServer object)
      {
        return createEnableResourceServerAdapter();
      }
      @Override
      public Adapter caseEnableWebSecurity(EnableWebSecurity object)
      {
        return createEnableWebSecurityAdapter();
      }
      @Override
      public Adapter caseSpringComponent(SpringComponent object)
      {
        return createSpringComponentAdapter();
      }
      @Override
      public Adapter caseOrderSpring(OrderSpring object)
      {
        return createOrderSpringAdapter();
      }
      @Override
      public Adapter caseSpringRepository(SpringRepository object)
      {
        return createSpringRepositoryAdapter();
      }
      @Override
      public Adapter caseSpringRepositories(SpringRepositories object)
      {
        return createSpringRepositoriesAdapter();
      }
      @Override
      public Adapter caseRestController(RestController object)
      {
        return createRestControllerAdapter();
      }
      @Override
      public Adapter caseSpecification(Specification object)
      {
        return createSpecificationAdapter();
      }
      @Override
      public Adapter casePredicate(Predicate object)
      {
        return createPredicateAdapter();
      }
      @Override
      public Adapter caseSearchCriteria(SearchCriteria object)
      {
        return createSearchCriteriaAdapter();
      }
      @Override
      public Adapter caseAutowired(Autowired object)
      {
        return createAutowiredAdapter();
      }
      @Override
      public Adapter caseAutowiredType(AutowiredType object)
      {
        return createAutowiredTypeAdapter();
      }
      @Override
      public Adapter caseRequestMapping(RequestMapping object)
      {
        return createRequestMappingAdapter();
      }
      @Override
      public Adapter caseRequestPart(RequestPart object)
      {
        return createRequestPartAdapter();
      }
      @Override
      public Adapter caseRequestMappingType(RequestMappingType object)
      {
        return createRequestMappingTypeAdapter();
      }
      @Override
      public Adapter caseExceptionHandler(ExceptionHandler object)
      {
        return createExceptionHandlerAdapter();
      }
      @Override
      public Adapter caseExceptionProcess(ExceptionProcess object)
      {
        return createExceptionProcessAdapter();
      }
      @Override
      public Adapter caseSpringEntity(SpringEntity object)
      {
        return createSpringEntityAdapter();
      }
      @Override
      public Adapter caseSpringTable(SpringTable object)
      {
        return createSpringTableAdapter();
      }
      @Override
      public Adapter caseSpringTableId(SpringTableId object)
      {
        return createSpringTableIdAdapter();
      }
      @Override
      public Adapter caseGeneratedValue(GeneratedValue object)
      {
        return createGeneratedValueAdapter();
      }
      @Override
      public Adapter caseColumns(Columns object)
      {
        return createColumnsAdapter();
      }
      @Override
      public Adapter caseNameNativeQuery(NameNativeQuery object)
      {
        return createNameNativeQueryAdapter();
      }
      @Override
      public Adapter caseReact(React object)
      {
        return createReactAdapter();
      }
      @Override
      public Adapter caseReactModules(ReactModules object)
      {
        return createReactModulesAdapter();
      }
      @Override
      public Adapter caseReactSubModules(ReactSubModules object)
      {
        return createReactSubModulesAdapter();
      }
      @Override
      public Adapter caseReactConfiguration(ReactConfiguration object)
      {
        return createReactConfigurationAdapter();
      }
      @Override
      public Adapter caseReactDependencies(ReactDependencies object)
      {
        return createReactDependenciesAdapter();
      }
      @Override
      public Adapter caseReactDependenciesRules(ReactDependenciesRules object)
      {
        return createReactDependenciesRulesAdapter();
      }
      @Override
      public Adapter caseReactDependenciesSubRules(ReactDependenciesSubRules object)
      {
        return createReactDependenciesSubRulesAdapter();
      }
      @Override
      public Adapter caseSingleDependencies(SingleDependencies object)
      {
        return createSingleDependenciesAdapter();
      }
      @Override
      public Adapter casePackageName(PackageName object)
      {
        return createPackageNameAdapter();
      }
      @Override
      public Adapter casePackageVersion(PackageVersion object)
      {
        return createPackageVersionAdapter();
      }
      @Override
      public Adapter caseReactConfigurations(ReactConfigurations object)
      {
        return createReactConfigurationsAdapter();
      }
      @Override
      public Adapter caseDOMConfigurations(DOMConfigurations object)
      {
        return createDOMConfigurationsAdapter();
      }
      @Override
      public Adapter caseReactComponents(ReactComponents object)
      {
        return createReactComponentsAdapter();
      }
      @Override
      public Adapter caseComponentsLogic(ComponentsLogic object)
      {
        return createComponentsLogicAdapter();
      }
      @Override
      public Adapter caseLogicContent(LogicContent object)
      {
        return createLogicContentAdapter();
      }
      @Override
      public Adapter caseLogicStructure(LogicStructure object)
      {
        return createLogicStructureAdapter();
      }
      @Override
      public Adapter caseComponentsUI(ComponentsUI object)
      {
        return createComponentsUIAdapter();
      }
      @Override
      public Adapter caseUIContent(UIContent object)
      {
        return createUIContentAdapter();
      }
      @Override
      public Adapter caseViewComponentCont(ViewComponentCont object)
      {
        return createViewComponentContAdapter();
      }
      @Override
      public Adapter caseSubcomponentCont(SubcomponentCont object)
      {
        return createSubcomponentContAdapter();
      }
      @Override
      public Adapter caseComponentClass(ComponentClass object)
      {
        return createComponentClassAdapter();
      }
      @Override
      public Adapter caseReactImports(ReactImports object)
      {
        return createReactImportsAdapter();
      }
      @Override
      public Adapter caseReactImportContent(ReactImportContent object)
      {
        return createReactImportContentAdapter();
      }
      @Override
      public Adapter caseReactFunctions(ReactFunctions object)
      {
        return createReactFunctionsAdapter();
      }
      @Override
      public Adapter caseReactConstructor(ReactConstructor object)
      {
        return createReactConstructorAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseStateContent(StateContent object)
      {
        return createStateContentAdapter();
      }
      @Override
      public Adapter caseCoreFunctionsDeclaration(CoreFunctionsDeclaration object)
      {
        return createCoreFunctionsDeclarationAdapter();
      }
      @Override
      public Adapter caseProps(Props object)
      {
        return createPropsAdapter();
      }
      @Override
      public Adapter casePropsType(PropsType object)
      {
        return createPropsTypeAdapter();
      }
      @Override
      public Adapter caseReactCoreFunctions(ReactCoreFunctions object)
      {
        return createReactCoreFunctionsAdapter();
      }
      @Override
      public Adapter caseReactActions(ReactActions object)
      {
        return createReactActionsAdapter();
      }
      @Override
      public Adapter caseReactActionsContent(ReactActionsContent object)
      {
        return createReactActionsContentAdapter();
      }
      @Override
      public Adapter caseReactServicesType(ReactServicesType object)
      {
        return createReactServicesTypeAdapter();
      }
      @Override
      public Adapter caseReactServicesRelation(ReactServicesRelation object)
      {
        return createReactServicesRelationAdapter();
      }
      @Override
      public Adapter caseReactsRelationServ(ReactsRelationServ object)
      {
        return createReactsRelationServAdapter();
      }
      @Override
      public Adapter caseReactLibraries(ReactLibraries object)
      {
        return createReactLibrariesAdapter();
      }
      @Override
      public Adapter caseReactLibrary(ReactLibrary object)
      {
        return createReactLibraryAdapter();
      }
      @Override
      public Adapter caseReactInfo(ReactInfo object)
      {
        return createReactInfoAdapter();
      }
      @Override
      public Adapter caseReactInformation(ReactInformation object)
      {
        return createReactInformationAdapter();
      }
      @Override
      public Adapter casePostgreSQL(PostgreSQL object)
      {
        return createPostgreSQLAdapter();
      }
      @Override
      public Adapter caseCluster(Cluster object)
      {
        return createClusterAdapter();
      }
      @Override
      public Adapter caseDatabase(Database object)
      {
        return createDatabaseAdapter();
      }
      @Override
      public Adapter caseSchema(Schema object)
      {
        return createSchemaAdapter();
      }
      @Override
      public Adapter caseIndex_p(Index_p object)
      {
        return createIndex_pAdapter();
      }
      @Override
      public Adapter caseViewSchema(ViewSchema object)
      {
        return createViewSchemaAdapter();
      }
      @Override
      public Adapter caseTable_p(Table_p object)
      {
        return createTable_pAdapter();
      }
      @Override
      public Adapter caseForeignKey(ForeignKey object)
      {
        return createForeignKeyAdapter();
      }
      @Override
      public Adapter caseForeignKey_n(ForeignKey_n object)
      {
        return createForeignKey_nAdapter();
      }
      @Override
      public Adapter caseForeignKeyRef(ForeignKeyRef object)
      {
        return createForeignKeyRefAdapter();
      }
      @Override
      public Adapter caseRefTable_p(RefTable_p object)
      {
        return createRefTable_pAdapter();
      }
      @Override
      public Adapter caseColumn(Column object)
      {
        return createColumnAdapter();
      }
      @Override
      public Adapter caseDatatypeDB(DatatypeDB object)
      {
        return createDatatypeDBAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseRow(Row object)
      {
        return createRowAdapter();
      }
      @Override
      public Adapter casePolicy(Policy object)
      {
        return createPolicyAdapter();
      }
      @Override
      public Adapter caseTrigger(Trigger object)
      {
        return createTriggerAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter casePostgresUser(PostgresUser object)
      {
        return createPostgresUserAdapter();
      }
      @Override
      public Adapter casePrivilege(Privilege object)
      {
        return createPrivilegeAdapter();
      }
      @Override
      public Adapter caseQuery(Query object)
      {
        return createQueryAdapter();
      }
      @Override
      public Adapter caseClause(Clause object)
      {
        return createClauseAdapter();
      }
      @Override
      public Adapter caseAmazonWebServices(AmazonWebServices object)
      {
        return createAmazonWebServicesAdapter();
      }
      @Override
      public Adapter caseAmazonSimpleStorageService(AmazonSimpleStorageService object)
      {
        return createAmazonSimpleStorageServiceAdapter();
      }
      @Override
      public Adapter caseBatchOperation(BatchOperation object)
      {
        return createBatchOperationAdapter();
      }
      @Override
      public Adapter caseBucket(Bucket object)
      {
        return createBucketAdapter();
      }
      @Override
      public Adapter caseBucketAccess(BucketAccess object)
      {
        return createBucketAccessAdapter();
      }
      @Override
      public Adapter casePublicAccess(PublicAccess object)
      {
        return createPublicAccessAdapter();
      }
      @Override
      public Adapter caseObjectsPublic(ObjectsPublic object)
      {
        return createObjectsPublicAdapter();
      }
      @Override
      public Adapter caseBucketObjectsNotPublic(BucketObjectsNotPublic object)
      {
        return createBucketObjectsNotPublicAdapter();
      }
      @Override
      public Adapter caseOnlyAuthorized(OnlyAuthorized object)
      {
        return createOnlyAuthorizedAdapter();
      }
      @Override
      public Adapter caseAmazonFolder(AmazonFolder object)
      {
        return createAmazonFolderAdapter();
      }
      @Override
      public Adapter caseAmazonFile(AmazonFile object)
      {
        return createAmazonFileAdapter();
      }
      @Override
      public Adapter caseMetadata(Metadata object)
      {
        return createMetadataAdapter();
      }
      @Override
      public Adapter caseAmazonElasticComputeCloud(AmazonElasticComputeCloud object)
      {
        return createAmazonElasticComputeCloudAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Entities <em>Entities</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Entities
   * @generated
   */
  public Adapter createEntitiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Photo <em>Photo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Photo
   * @generated
   */
  public Adapter createPhotoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Album <em>Album</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Album
   * @generated
   */
  public Adapter createAlbumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.UserDomain <em>User Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.UserDomain
   * @generated
   */
  public Adapter createUserDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Functionality <em>Functionality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Functionality
   * @generated
   */
  public Adapter createFunctionalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Functionalities <em>Functionalities</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Functionalities
   * @generated
   */
  public Adapter createFunctionalitiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagement <em>Profile Management</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagement
   * @generated
   */
  public Adapter createProfileManagementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagementFunctions <em>Profile Management Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagementFunctions
   * @generated
   */
  public Adapter createProfileManagementFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccess <em>App Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccess
   * @generated
   */
  public Adapter createAppAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccessFunctions <em>App Access Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccessFunctions
   * @generated
   */
  public Adapter createAppAccessFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagement <em>Album Management</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagement
   * @generated
   */
  public Adapter createAlbumManagementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagementFunctions <em>Album Management Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagementFunctions
   * @generated
   */
  public Adapter createAlbumManagementFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActions <em>Photo Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActions
   * @generated
   */
  public Adapter createPhotoActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActionsFunctions <em>Photo Actions Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActionsFunctions
   * @generated
   */
  public Adapter createPhotoActionsFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LandingActions <em>Landing Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LandingActions
   * @generated
   */
  public Adapter createLandingActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LandingFunctions <em>Landing Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LandingFunctions
   * @generated
   */
  public Adapter createLandingFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DomainConnection <em>Domain Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DomainConnection
   * @generated
   */
  public Adapter createDomainConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DomainRelations <em>Domain Relations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DomainRelations
   * @generated
   */
  public Adapter createDomainRelationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Architecture <em>Architecture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Architecture
   * @generated
   */
  public Adapter createArchitectureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTiers <em>NTiers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTiers
   * @generated
   */
  public Adapter createNTiersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Layer <em>Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Layer
   * @generated
   */
  public Adapter createLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationLayer <em>Presentation Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationLayer
   * @generated
   */
  public Adapter createPresentationLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationContent <em>Presentation Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationContent
   * @generated
   */
  public Adapter createPresentationContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments <em>Presentation Segments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments
   * @generated
   */
  public Adapter createPresentationSegmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicLayer <em>Business Logic Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicLayer
   * @generated
   */
  public Adapter createBusinessLogicLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicContent <em>Business Logic Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicContent
   * @generated
   */
  public Adapter createBusinessLogicContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments <em>Business Logic Segments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments
   * @generated
   */
  public Adapter createBusinessLogicSegmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceLayer <em>Data Persistence Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceLayer
   * @generated
   */
  public Adapter createDataPersistenceLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceContent <em>Data Persistence Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceContent
   * @generated
   */
  public Adapter createDataPersistenceContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceSegments <em>Data Persistence Segments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceSegments
   * @generated
   */
  public Adapter createDataPersistenceSegmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructure <em>Segment Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructure
   * @generated
   */
  public Adapter createSegmentStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent <em>Segment Structure Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent
   * @generated
   */
  public Adapter createSegmentStructureContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DirectoryContent <em>Directory Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DirectoryContent
   * @generated
   */
  public Adapter createDirectoryContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Directories <em>Directories</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Directories
   * @generated
   */
  public Adapter createDirectoriesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SingleFile <em>Single File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SingleFile
   * @generated
   */
  public Adapter createSingleFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.MultipleFile <em>Multiple File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.MultipleFile
   * @generated
   */
  public Adapter createMultipleFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LayerRelations <em>Layer Relations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LayerRelations
   * @generated
   */
  public Adapter createLayerRelationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LayerSource <em>Layer Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LayerSource
   * @generated
   */
  public Adapter createLayerSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LayerTarget <em>Layer Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LayerTarget
   * @generated
   */
  public Adapter createLayerTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ArchitectureComponents <em>Architecture Components</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ArchitectureComponents
   * @generated
   */
  public Adapter createArchitectureComponentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.FrontEnd <em>Front End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.FrontEnd
   * @generated
   */
  public Adapter createFrontEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BackEnd <em>Back End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BackEnd
   * @generated
   */
  public Adapter createBackEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PersistenceDataComponent <em>Persistence Data Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PersistenceDataComponent
   * @generated
   */
  public Adapter createPersistenceDataComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersConnections <em>NTiers Connections</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersConnections
   * @generated
   */
  public Adapter createNTiersConnectionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTierConnectionContent <em>NTier Connection Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTierConnectionContent
   * @generated
   */
  public Adapter createNTierConnectionContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTierSource <em>NTier Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTierSource
   * @generated
   */
  public Adapter createNTierSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTierTarget <em>NTier Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTierTarget
   * @generated
   */
  public Adapter createNTierTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersRelations <em>NTiers Relations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersRelations
   * @generated
   */
  public Adapter createNTiersRelationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Technology <em>Technology</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Technology
   * @generated
   */
  public Adapter createTechnologyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Technologies <em>Technologies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Technologies
   * @generated
   */
  public Adapter createTechnologiesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Spring <em>Spring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Spring
   * @generated
   */
  public Adapter createSpringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringBootApplication <em>Spring Boot Application</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringBootApplication
   * @generated
   */
  public Adapter createSpringBootApplicationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.EnableGlobalMethodSecurity <em>Enable Global Method Security</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.EnableGlobalMethodSecurity
   * @generated
   */
  public Adapter createEnableGlobalMethodSecurityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.EnableAuthorizationServer <em>Enable Authorization Server</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.EnableAuthorizationServer
   * @generated
   */
  public Adapter createEnableAuthorizationServerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.EnableResourceServer <em>Enable Resource Server</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.EnableResourceServer
   * @generated
   */
  public Adapter createEnableResourceServerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.EnableWebSecurity <em>Enable Web Security</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.EnableWebSecurity
   * @generated
   */
  public Adapter createEnableWebSecurityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringComponent <em>Spring Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringComponent
   * @generated
   */
  public Adapter createSpringComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring <em>Order Spring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring
   * @generated
   */
  public Adapter createOrderSpringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepository <em>Spring Repository</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepository
   * @generated
   */
  public Adapter createSpringRepositoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepositories <em>Spring Repositories</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepositories
   * @generated
   */
  public Adapter createSpringRepositoriesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.RestController <em>Rest Controller</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.RestController
   * @generated
   */
  public Adapter createRestControllerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Specification <em>Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Specification
   * @generated
   */
  public Adapter createSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Predicate <em>Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Predicate
   * @generated
   */
  public Adapter createPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SearchCriteria <em>Search Criteria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SearchCriteria
   * @generated
   */
  public Adapter createSearchCriteriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Autowired <em>Autowired</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Autowired
   * @generated
   */
  public Adapter createAutowiredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AutowiredType <em>Autowired Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AutowiredType
   * @generated
   */
  public Adapter createAutowiredTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMapping <em>Request Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMapping
   * @generated
   */
  public Adapter createRequestMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.RequestPart <em>Request Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.RequestPart
   * @generated
   */
  public Adapter createRequestPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMappingType <em>Request Mapping Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMappingType
   * @generated
   */
  public Adapter createRequestMappingTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionHandler <em>Exception Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionHandler
   * @generated
   */
  public Adapter createExceptionHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionProcess <em>Exception Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionProcess
   * @generated
   */
  public Adapter createExceptionProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringEntity <em>Spring Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringEntity
   * @generated
   */
  public Adapter createSpringEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTable <em>Spring Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTable
   * @generated
   */
  public Adapter createSpringTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTableId <em>Spring Table Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTableId
   * @generated
   */
  public Adapter createSpringTableIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.GeneratedValue <em>Generated Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.GeneratedValue
   * @generated
   */
  public Adapter createGeneratedValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Columns <em>Columns</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Columns
   * @generated
   */
  public Adapter createColumnsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.NameNativeQuery <em>Name Native Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.NameNativeQuery
   * @generated
   */
  public Adapter createNameNativeQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.React <em>React</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.React
   * @generated
   */
  public Adapter createReactAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactModules <em>React Modules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactModules
   * @generated
   */
  public Adapter createReactModulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactSubModules <em>React Sub Modules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactSubModules
   * @generated
   */
  public Adapter createReactSubModulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfiguration <em>React Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfiguration
   * @generated
   */
  public Adapter createReactConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependencies <em>React Dependencies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependencies
   * @generated
   */
  public Adapter createReactDependenciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesRules <em>React Dependencies Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesRules
   * @generated
   */
  public Adapter createReactDependenciesRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesSubRules <em>React Dependencies Sub Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesSubRules
   * @generated
   */
  public Adapter createReactDependenciesSubRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SingleDependencies <em>Single Dependencies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SingleDependencies
   * @generated
   */
  public Adapter createSingleDependenciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PackageName <em>Package Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PackageName
   * @generated
   */
  public Adapter createPackageNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PackageVersion <em>Package Version</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PackageVersion
   * @generated
   */
  public Adapter createPackageVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfigurations <em>React Configurations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfigurations
   * @generated
   */
  public Adapter createReactConfigurationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DOMConfigurations <em>DOM Configurations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DOMConfigurations
   * @generated
   */
  public Adapter createDOMConfigurationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactComponents <em>React Components</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactComponents
   * @generated
   */
  public Adapter createReactComponentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic <em>Components Logic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic
   * @generated
   */
  public Adapter createComponentsLogicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LogicContent <em>Logic Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LogicContent
   * @generated
   */
  public Adapter createLogicContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.LogicStructure <em>Logic Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.LogicStructure
   * @generated
   */
  public Adapter createLogicStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI <em>Components UI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI
   * @generated
   */
  public Adapter createComponentsUIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent <em>UI Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent
   * @generated
   */
  public Adapter createUIContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ViewComponentCont <em>View Component Cont</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ViewComponentCont
   * @generated
   */
  public Adapter createViewComponentContAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont <em>Subcomponent Cont</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont
   * @generated
   */
  public Adapter createSubcomponentContAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass <em>Component Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass
   * @generated
   */
  public Adapter createComponentClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports <em>React Imports</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports
   * @generated
   */
  public Adapter createReactImportsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImportContent <em>React Import Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImportContent
   * @generated
   */
  public Adapter createReactImportContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions <em>React Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions
   * @generated
   */
  public Adapter createReactFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor <em>React Constructor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor
   * @generated
   */
  public Adapter createReactConstructorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.StateContent <em>State Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.StateContent
   * @generated
   */
  public Adapter createStateContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.CoreFunctionsDeclaration <em>Core Functions Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.CoreFunctionsDeclaration
   * @generated
   */
  public Adapter createCoreFunctionsDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Props <em>Props</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Props
   * @generated
   */
  public Adapter createPropsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PropsType <em>Props Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PropsType
   * @generated
   */
  public Adapter createPropsTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactCoreFunctions <em>React Core Functions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactCoreFunctions
   * @generated
   */
  public Adapter createReactCoreFunctionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActions <em>React Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActions
   * @generated
   */
  public Adapter createReactActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActionsContent <em>React Actions Content</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActionsContent
   * @generated
   */
  public Adapter createReactActionsContentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType <em>React Services Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType
   * @generated
   */
  public Adapter createReactServicesTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesRelation <em>React Services Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesRelation
   * @generated
   */
  public Adapter createReactServicesRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactsRelationServ <em>Reacts Relation Serv</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactsRelationServ
   * @generated
   */
  public Adapter createReactsRelationServAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibraries <em>React Libraries</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibraries
   * @generated
   */
  public Adapter createReactLibrariesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibrary <em>React Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibrary
   * @generated
   */
  public Adapter createReactLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInfo <em>React Info</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInfo
   * @generated
   */
  public Adapter createReactInfoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInformation <em>React Information</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInformation
   * @generated
   */
  public Adapter createReactInformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PostgreSQL <em>Postgre SQL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PostgreSQL
   * @generated
   */
  public Adapter createPostgreSQLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Cluster <em>Cluster</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Cluster
   * @generated
   */
  public Adapter createClusterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Database <em>Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Database
   * @generated
   */
  public Adapter createDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Schema <em>Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Schema
   * @generated
   */
  public Adapter createSchemaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Index_p <em>Index p</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Index_p
   * @generated
   */
  public Adapter createIndex_pAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ViewSchema <em>View Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ViewSchema
   * @generated
   */
  public Adapter createViewSchemaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Table_p <em>Table p</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Table_p
   * @generated
   */
  public Adapter createTable_pAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey <em>Foreign Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey
   * @generated
   */
  public Adapter createForeignKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey_n <em>Foreign Key n</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey_n
   * @generated
   */
  public Adapter createForeignKey_nAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKeyRef <em>Foreign Key Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKeyRef
   * @generated
   */
  public Adapter createForeignKeyRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.RefTable_p <em>Ref Table p</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.RefTable_p
   * @generated
   */
  public Adapter createRefTable_pAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Column <em>Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Column
   * @generated
   */
  public Adapter createColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.DatatypeDB <em>Datatype DB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.DatatypeDB
   * @generated
   */
  public Adapter createDatatypeDBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Row <em>Row</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Row
   * @generated
   */
  public Adapter createRowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Policy <em>Policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Policy
   * @generated
   */
  public Adapter createPolicyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Trigger <em>Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Trigger
   * @generated
   */
  public Adapter createTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PostgresUser <em>Postgres User</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PostgresUser
   * @generated
   */
  public Adapter createPostgresUserAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Privilege <em>Privilege</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Privilege
   * @generated
   */
  public Adapter createPrivilegeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Query <em>Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Query
   * @generated
   */
  public Adapter createQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Clause <em>Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Clause
   * @generated
   */
  public Adapter createClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonWebServices <em>Amazon Web Services</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonWebServices
   * @generated
   */
  public Adapter createAmazonWebServicesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonSimpleStorageService <em>Amazon Simple Storage Service</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonSimpleStorageService
   * @generated
   */
  public Adapter createAmazonSimpleStorageServiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BatchOperation <em>Batch Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BatchOperation
   * @generated
   */
  public Adapter createBatchOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Bucket <em>Bucket</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Bucket
   * @generated
   */
  public Adapter createBucketAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BucketAccess <em>Bucket Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BucketAccess
   * @generated
   */
  public Adapter createBucketAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.PublicAccess <em>Public Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.PublicAccess
   * @generated
   */
  public Adapter createPublicAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.ObjectsPublic <em>Objects Public</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.ObjectsPublic
   * @generated
   */
  public Adapter createObjectsPublicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.BucketObjectsNotPublic <em>Bucket Objects Not Public</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.BucketObjectsNotPublic
   * @generated
   */
  public Adapter createBucketObjectsNotPublicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.OnlyAuthorized <em>Only Authorized</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.OnlyAuthorized
   * @generated
   */
  public Adapter createOnlyAuthorizedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFolder <em>Amazon Folder</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFolder
   * @generated
   */
  public Adapter createAmazonFolderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFile <em>Amazon File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFile
   * @generated
   */
  public Adapter createAmazonFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.Metadata <em>Metadata</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.Metadata
   * @generated
   */
  public Adapter createMetadataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonElasticComputeCloud <em>Amazon Elastic Compute Cloud</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonElasticComputeCloud
   * @generated
   */
  public Adapter createAmazonElasticComputeCloudAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SoftGalleryLanguageAdapterFactory
