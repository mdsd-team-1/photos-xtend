/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Props;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component Class</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ComponentClassImpl#getComponentclassimp <em>Componentclassimp</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ComponentClassImpl#getComponentclassfunc <em>Componentclassfunc</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ComponentClassImpl#getComponentclassprop <em>Componentclassprop</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentClassImpl extends MinimalEObjectImpl.Container implements ComponentClass
{
  /**
   * The cached value of the '{@link #getComponentclassimp() <em>Componentclassimp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentclassimp()
   * @generated
   * @ordered
   */
  protected EList<ReactImports> componentclassimp;

  /**
   * The cached value of the '{@link #getComponentclassfunc() <em>Componentclassfunc</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentclassfunc()
   * @generated
   * @ordered
   */
  protected EList<ReactFunctions> componentclassfunc;

  /**
   * The cached value of the '{@link #getComponentclassprop() <em>Componentclassprop</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentclassprop()
   * @generated
   * @ordered
   */
  protected EList<Props> componentclassprop;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentClassImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.COMPONENT_CLASS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReactImports> getComponentclassimp()
  {
    if (componentclassimp == null)
    {
      componentclassimp = new EObjectContainmentEList<ReactImports>(ReactImports.class, this, SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP);
    }
    return componentclassimp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReactFunctions> getComponentclassfunc()
  {
    if (componentclassfunc == null)
    {
      componentclassfunc = new EObjectContainmentEList<ReactFunctions>(ReactFunctions.class, this, SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC);
    }
    return componentclassfunc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Props> getComponentclassprop()
  {
    if (componentclassprop == null)
    {
      componentclassprop = new EObjectContainmentEList<Props>(Props.class, this, SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP);
    }
    return componentclassprop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP:
        return ((InternalEList<?>)getComponentclassimp()).basicRemove(otherEnd, msgs);
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC:
        return ((InternalEList<?>)getComponentclassfunc()).basicRemove(otherEnd, msgs);
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP:
        return ((InternalEList<?>)getComponentclassprop()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP:
        return getComponentclassimp();
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC:
        return getComponentclassfunc();
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP:
        return getComponentclassprop();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP:
        getComponentclassimp().clear();
        getComponentclassimp().addAll((Collection<? extends ReactImports>)newValue);
        return;
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC:
        getComponentclassfunc().clear();
        getComponentclassfunc().addAll((Collection<? extends ReactFunctions>)newValue);
        return;
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP:
        getComponentclassprop().clear();
        getComponentclassprop().addAll((Collection<? extends Props>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP:
        getComponentclassimp().clear();
        return;
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC:
        getComponentclassfunc().clear();
        return;
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP:
        getComponentclassprop().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSIMP:
        return componentclassimp != null && !componentclassimp.isEmpty();
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSFUNC:
        return componentclassfunc != null && !componentclassfunc.isEmpty();
      case SoftGalleryLanguagePackage.COMPONENT_CLASS__COMPONENTCLASSPROP:
        return componentclassprop != null && !componentclassprop.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ComponentClassImpl
