/*
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.serializer;

import co.unal.mdd.photos.dsl.services.SoftGalleryLanguageGrammarAccess;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Album;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagement;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AlbumManagementFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonElasticComputeCloud;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFile;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonFolder;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonSimpleStorageService;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AmazonWebServices;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccess;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AppAccessFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Architecture;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ArchitectureComponents;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Autowired;
import co.unal.mdd.photos.dsl.softGalleryLanguage.AutowiredType;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BackEnd;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BatchOperation;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Bucket;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BucketAccess;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BucketObjectsNotPublic;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicLayer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Clause;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Cluster;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Column;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Columns;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Configuration;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Constraint;
import co.unal.mdd.photos.dsl.softGalleryLanguage.CoreFunctionsDeclaration;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DOMConfigurations;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceLayer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DataPersistenceSegments;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Database;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DatatypeDB;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Directories;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DirectoryContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Domain;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DomainConnection;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DomainRelations;
import co.unal.mdd.photos.dsl.softGalleryLanguage.EnableAuthorizationServer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.EnableGlobalMethodSecurity;
import co.unal.mdd.photos.dsl.softGalleryLanguage.EnableResourceServer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.EnableWebSecurity;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Entities;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Entity;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionHandler;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ExceptionProcess;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKeyRef;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ForeignKey_n;
import co.unal.mdd.photos.dsl.softGalleryLanguage.FrontEnd;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Function;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Functionalities;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Functionality;
import co.unal.mdd.photos.dsl.softGalleryLanguage.GeneratedValue;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Index_p;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LandingActions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LandingFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Layer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LayerRelations;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LayerSource;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LayerTarget;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicStructure;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Metadata;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Model;
import co.unal.mdd.photos.dsl.softGalleryLanguage.MultipleFile;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NTierSource;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NTierTarget;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NTiers;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersConnections;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NTiersRelations;
import co.unal.mdd.photos.dsl.softGalleryLanguage.NameNativeQuery;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ObjectsPublic;
import co.unal.mdd.photos.dsl.softGalleryLanguage.OnlyAuthorized;
import co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PackageName;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PackageVersion;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PersistenceDataComponent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Photo;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PhotoActionsFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Policy;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PostgreSQL;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PostgresUser;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Predicate;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationLayer;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Privilege;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagement;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ProfileManagementFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Props;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PublicAccess;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Query;
import co.unal.mdd.photos.dsl.softGalleryLanguage.React;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactActionsContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactComponents;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfiguration;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConfigurations;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactCoreFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependencies;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesRules;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactDependenciesSubRules;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInfo;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactInformation;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibraries;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactLibrary;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactModules;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesRelation;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactSubModules;
import co.unal.mdd.photos.dsl.softGalleryLanguage.RefTable_p;
import co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMapping;
import co.unal.mdd.photos.dsl.softGalleryLanguage.RequestMappingType;
import co.unal.mdd.photos.dsl.softGalleryLanguage.RequestPart;
import co.unal.mdd.photos.dsl.softGalleryLanguage.RestController;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Row;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Schema;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SearchCriteria;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructure;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SingleDependencies;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SingleFile;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Specification;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Spring;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringBootApplication;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringComponent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringEntity;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepositories;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringRepository;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTable;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SpringTableId;
import co.unal.mdd.photos.dsl.softGalleryLanguage.State;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Table_p;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Technologies;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Technology;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Trigger;
import co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.UserDomain;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ViewSchema;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SoftGalleryLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SoftGalleryLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SoftGalleryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SoftGalleryLanguagePackage.ALBUM:
				sequence_Album(context, (Album) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ALBUM_MANAGEMENT:
				sequence_AlbumManagement(context, (AlbumManagement) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ALBUM_MANAGEMENT_FUNCTIONS:
				sequence_AlbumManagementFunctions(context, (AlbumManagementFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AMAZON_ELASTIC_COMPUTE_CLOUD:
				sequence_AmazonElasticComputeCloud(context, (AmazonElasticComputeCloud) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AMAZON_FILE:
				sequence_AmazonFile(context, (AmazonFile) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AMAZON_FOLDER:
				sequence_AmazonFolder(context, (AmazonFolder) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AMAZON_SIMPLE_STORAGE_SERVICE:
				sequence_AmazonSimpleStorageService(context, (AmazonSimpleStorageService) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AMAZON_WEB_SERVICES:
				sequence_AmazonWebServices(context, (AmazonWebServices) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.APP_ACCESS:
				sequence_AppAccess(context, (AppAccess) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.APP_ACCESS_FUNCTIONS:
				sequence_AppAccessFunctions(context, (AppAccessFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ARCHITECTURE_COMPONENTS:
				sequence_ArchitectureComponents(context, (ArchitectureComponents) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AUTOWIRED:
				sequence_Autowired(context, (Autowired) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.AUTOWIRED_TYPE:
				sequence_AutowiredType(context, (AutowiredType) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BACK_END:
				sequence_BackEnd(context, (BackEnd) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BATCH_OPERATION:
				sequence_BatchOperation(context, (BatchOperation) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUCKET:
				sequence_Bucket(context, (Bucket) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUCKET_ACCESS:
				sequence_BucketAccess(context, (BucketAccess) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUCKET_OBJECTS_NOT_PUBLIC:
				sequence_BucketObjectsNotPublic(context, (BucketObjectsNotPublic) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT:
				sequence_BusinessLogicContent(context, (BusinessLogicContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUSINESS_LOGIC_LAYER:
				sequence_BusinessLogicLayer(context, (BusinessLogicLayer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.BUSINESS_LOGIC_SEGMENTS:
				sequence_BusinessLogicSegments(context, (BusinessLogicSegments) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.CLAUSE:
				sequence_Clause(context, (Clause) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.CLUSTER:
				sequence_Cluster(context, (Cluster) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.COLUMNS:
				sequence_Columns(context, (Columns) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.COMPONENT_CLASS:
				sequence_ComponentClass(context, (ComponentClass) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.COMPONENTS_LOGIC:
				sequence_ComponentsLogic(context, (ComponentsLogic) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.COMPONENTS_UI:
				sequence_ComponentsUI(context, (ComponentsUI) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.CORE_FUNCTIONS_DECLARATION:
				sequence_CoreFunctionsDeclaration(context, (CoreFunctionsDeclaration) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DOM_CONFIGURATIONS:
				sequence_DOMConfigurations(context, (DOMConfigurations) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DATA_PERSISTENCE_CONTENT:
				sequence_DataPersistenceContent(context, (DataPersistenceContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DATA_PERSISTENCE_LAYER:
				sequence_DataPersistenceLayer(context, (DataPersistenceLayer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DATA_PERSISTENCE_SEGMENTS:
				sequence_DataPersistenceSegments(context, (DataPersistenceSegments) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DATATYPE_DB:
				sequence_DatatypeDB(context, (DatatypeDB) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DIRECTORIES:
				sequence_Directories(context, (Directories) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DIRECTORY_CONTENT:
				sequence_DirectoryContent(context, (DirectoryContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DOMAIN_CONNECTION:
				sequence_DomainConnection(context, (DomainConnection) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.DOMAIN_RELATIONS:
				sequence_DomainRelations(context, (DomainRelations) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENABLE_AUTHORIZATION_SERVER:
				sequence_EnableAuthorizationServer(context, (EnableAuthorizationServer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENABLE_GLOBAL_METHOD_SECURITY:
				sequence_EnableGlobalMethodSecurity(context, (EnableGlobalMethodSecurity) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENABLE_RESOURCE_SERVER:
				sequence_EnableResourceServer(context, (EnableResourceServer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENABLE_WEB_SECURITY:
				sequence_EnableWebSecurity(context, (EnableWebSecurity) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENTITIES:
				sequence_Entities(context, (Entities) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.EXCEPTION_HANDLER:
				sequence_ExceptionHandler(context, (ExceptionHandler) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.EXCEPTION_PROCESS:
				sequence_ExceptionProcess(context, (ExceptionProcess) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FOREIGN_KEY_REF:
				sequence_ForeignKeyRef(context, (ForeignKeyRef) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FOREIGN_KEY_N:
				sequence_ForeignKey_n(context, (ForeignKey_n) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FRONT_END:
				sequence_FrontEnd(context, (FrontEnd) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FUNCTIONALITIES:
				sequence_Functionalities(context, (Functionalities) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.FUNCTIONALITY:
				sequence_Functionality(context, (Functionality) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.GENERATED_VALUE:
				sequence_GeneratedValue(context, (GeneratedValue) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.INDEX_P:
				sequence_Index_p(context, (Index_p) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LANDING_ACTIONS:
				sequence_LandingActions(context, (LandingActions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LANDING_FUNCTIONS:
				sequence_LandingFunctions(context, (LandingFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LAYER_RELATIONS:
				sequence_LayerRelations(context, (LayerRelations) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LAYER_SOURCE:
				sequence_LayerSource(context, (LayerSource) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LAYER_TARGET:
				sequence_LayerTarget(context, (LayerTarget) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LOGIC_CONTENT:
				sequence_LogicContent(context, (LogicContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.LOGIC_STRUCTURE:
				sequence_LogicStructure(context, (LogicStructure) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.METADATA:
				sequence_Metadata(context, (Metadata) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.MULTIPLE_FILE:
				sequence_MultipleFile(context, (MultipleFile) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NTIER_SOURCE:
				sequence_NTierSource(context, (NTierSource) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NTIER_TARGET:
				sequence_NTierTarget(context, (NTierTarget) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NTIERS:
				sequence_NTiers(context, (NTiers) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NTIERS_CONNECTIONS:
				sequence_NTiersConnections(context, (NTiersConnections) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NTIERS_RELATIONS:
				sequence_NTiersRelations(context, (NTiersRelations) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.NAME_NATIVE_QUERY:
				sequence_NameNativeQuery(context, (NameNativeQuery) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.OBJECTS_PUBLIC:
				sequence_ObjectsPublic(context, (ObjectsPublic) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ONLY_AUTHORIZED:
				sequence_OnlyAuthorized(context, (OnlyAuthorized) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ORDER_SPRING:
				sequence_OrderSpring(context, (OrderSpring) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PACKAGE_NAME:
				sequence_PackageName(context, (PackageName) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PACKAGE_VERSION:
				sequence_PackageVersion(context, (PackageVersion) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PERSISTENCE_DATA_COMPONENT:
				sequence_PersistenceDataComponent(context, (PersistenceDataComponent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PHOTO:
				sequence_Photo(context, (Photo) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PHOTO_ACTIONS:
				sequence_PhotoActions(context, (PhotoActions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PHOTO_ACTIONS_FUNCTIONS:
				sequence_PhotoActionsFunctions(context, (PhotoActionsFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.POLICY:
				sequence_Policy(context, (Policy) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.POSTGRE_SQL:
				sequence_PostgreSQL(context, (PostgreSQL) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.POSTGRES_USER:
				sequence_PostgresUser(context, (PostgresUser) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PREDICATE:
				sequence_Predicate(context, (Predicate) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PRESENTATION_CONTENT:
				sequence_PresentationContent(context, (PresentationContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PRESENTATION_LAYER:
				sequence_PresentationLayer(context, (PresentationLayer) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PRESENTATION_SEGMENTS:
				sequence_PresentationSegments(context, (PresentationSegments) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PRIVILEGE:
				sequence_Privilege(context, (Privilege) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PROFILE_MANAGEMENT:
				sequence_ProfileManagement(context, (ProfileManagement) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PROFILE_MANAGEMENT_FUNCTIONS:
				sequence_ProfileManagementFunctions(context, (ProfileManagementFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PROPS:
				sequence_Props(context, (Props) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.PUBLIC_ACCESS:
				sequence_PublicAccess(context, (PublicAccess) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT:
				sequence_React(context, (React) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_ACTIONS:
				sequence_ReactActions(context, (ReactActions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_ACTIONS_CONTENT:
				sequence_ReactActionsContent(context, (ReactActionsContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_COMPONENTS:
				sequence_ReactComponents(context, (ReactComponents) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_CONFIGURATION:
				sequence_ReactConfiguration(context, (ReactConfiguration) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_CONFIGURATIONS:
				sequence_ReactConfigurations(context, (ReactConfigurations) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR:
				sequence_ReactConstructor(context, (ReactConstructor) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_CORE_FUNCTIONS:
				sequence_ReactCoreFunctions(context, (ReactCoreFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_DEPENDENCIES:
				sequence_ReactDependencies(context, (ReactDependencies) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_DEPENDENCIES_RULES:
				sequence_ReactDependenciesRules(context, (ReactDependenciesRules) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_DEPENDENCIES_SUB_RULES:
				sequence_ReactDependenciesSubRules(context, (ReactDependenciesSubRules) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_FUNCTIONS:
				sequence_ReactFunctions(context, (ReactFunctions) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_INFO:
				sequence_ReactInfo(context, (ReactInfo) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_INFORMATION:
				sequence_ReactInformation(context, (ReactInformation) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_LIBRARIES:
				sequence_ReactLibraries(context, (ReactLibraries) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_LIBRARY:
				sequence_ReactLibrary(context, (ReactLibrary) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_MODULES:
				sequence_ReactModules(context, (ReactModules) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_SERVICES_RELATION:
				sequence_ReactServicesRelation(context, (ReactServicesRelation) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_SERVICES_TYPE:
				sequence_ReactServicesType(context, (ReactServicesType) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REACT_SUB_MODULES:
				sequence_ReactSubModules(context, (ReactSubModules) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REF_TABLE_P:
				sequence_RefTable_p(context, (RefTable_p) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REQUEST_MAPPING:
				sequence_RequestMapping(context, (RequestMapping) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REQUEST_MAPPING_TYPE:
				sequence_RequestMappingType(context, (RequestMappingType) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REQUEST_PART:
				sequence_RequestPart(context, (RequestPart) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.REST_CONTROLLER:
				sequence_RestController(context, (RestController) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SCHEMA:
				sequence_Schema(context, (Schema) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SEARCH_CRITERIA:
				sequence_SearchCriteria(context, (SearchCriteria) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SEGMENT_STRUCTURE:
				sequence_SegmentStructure(context, (SegmentStructure) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SEGMENT_STRUCTURE_CONTENT:
				sequence_SegmentStructureContent(context, (SegmentStructureContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SINGLE_DEPENDENCIES:
				sequence_SingleDependencies(context, (SingleDependencies) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SINGLE_FILE:
				sequence_SingleFile(context, (SingleFile) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPECIFICATION:
				sequence_Specification(context, (Specification) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING:
				sequence_Spring(context, (Spring) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_BOOT_APPLICATION:
				sequence_SpringBootApplication(context, (SpringBootApplication) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_COMPONENT:
				sequence_SpringComponent(context, (SpringComponent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_ENTITY:
				sequence_SpringEntity(context, (SpringEntity) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_REPOSITORIES:
				sequence_SpringRepositories(context, (SpringRepositories) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_REPOSITORY:
				sequence_SpringRepository(context, (SpringRepository) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_TABLE:
				sequence_SpringTable(context, (SpringTable) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.SPRING_TABLE_ID:
				sequence_SpringTableId(context, (SpringTableId) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.TABLE_P:
				sequence_Table_p(context, (Table_p) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.TECHNOLOGIES:
				sequence_Technologies(context, (Technologies) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.TECHNOLOGY:
				sequence_Technology(context, (Technology) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.UI_CONTENT:
				sequence_UIContent(context, (UIContent) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.USER_DOMAIN:
				sequence_UserDomain(context, (UserDomain) semanticObject); 
				return; 
			case SoftGalleryLanguagePackage.VIEW_SCHEMA:
				sequence_ViewSchema(context, (ViewSchema) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlbumManagementFunctions returns AlbumManagementFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_AlbumManagementFunctions(ISerializationContext context, AlbumManagementFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlbumManagement returns AlbumManagement
	 *
	 * Constraint:
	 *     items+=AlbumManagementFunctions
	 */
	protected void sequence_AlbumManagement(ISerializationContext context, AlbumManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Album returns Album
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Album(ISerializationContext context, Album semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ALBUM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ALBUM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlbumAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AmazonElasticComputeCloud returns AmazonElasticComputeCloud
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AmazonElasticComputeCloud(ISerializationContext context, AmazonElasticComputeCloud semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.AMAZON_ELASTIC_COMPUTE_CLOUD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.AMAZON_ELASTIC_COMPUTE_CLOUD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAmazonElasticComputeCloudAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AmazonFile returns AmazonFile
	 *
	 * Constraint:
	 *     elements+=Metadata+
	 */
	protected void sequence_AmazonFile(ISerializationContext context, AmazonFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AmazonFolder returns AmazonFolder
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AmazonFolder(ISerializationContext context, AmazonFolder semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.AMAZON_FOLDER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.AMAZON_FOLDER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAmazonFolderAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AmazonSimpleStorageService returns AmazonSimpleStorageService
	 *
	 * Constraint:
	 *     (elements+=BatchOperation* elements+=Bucket)
	 */
	protected void sequence_AmazonSimpleStorageService(ISerializationContext context, AmazonSimpleStorageService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AmazonWebServices returns AmazonWebServices
	 *
	 * Constraint:
	 *     (name=ID elements+=AmazonSimpleStorageService elements+=AmazonElasticComputeCloud)
	 */
	protected void sequence_AmazonWebServices(ISerializationContext context, AmazonWebServices semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AppAccessFunctions returns AppAccessFunctions
	 *
	 * Constraint:
	 *     (loginName=ID registerName=ID)
	 */
	protected void sequence_AppAccessFunctions(ISerializationContext context, AppAccessFunctions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.APP_ACCESS_FUNCTIONS__LOGIN_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.APP_ACCESS_FUNCTIONS__LOGIN_NAME));
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.APP_ACCESS_FUNCTIONS__REGISTER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.APP_ACCESS_FUNCTIONS__REGISTER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAppAccessFunctionsAccess().getLoginNameIDTerminalRuleCall_1_0(), semanticObject.getLoginName());
		feeder.accept(grammarAccess.getAppAccessFunctionsAccess().getRegisterNameIDTerminalRuleCall_3_0(), semanticObject.getRegisterName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AppAccess returns AppAccess
	 *
	 * Constraint:
	 *     items+=AppAccessFunctions
	 */
	protected void sequence_AppAccess(ISerializationContext context, AppAccess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArchitectureComponents returns ArchitectureComponents
	 *
	 * Constraint:
	 *     (archcomponent+=FrontEnd archcomponent+=BackEnd archcomponent+=PersistenceDataComponent)
	 */
	protected void sequence_ArchitectureComponents(ISerializationContext context, ArchitectureComponents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     (elements+=NTiers+ elements+=NTiersConnections+)
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AutowiredType returns AutowiredType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_AutowiredType(ISerializationContext context, AutowiredType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.AUTOWIRED_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.AUTOWIRED_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAutowiredTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Autowired returns Autowired
	 *
	 * Constraint:
	 *     elements+=AutowiredType
	 */
	protected void sequence_Autowired(ISerializationContext context, Autowired semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BackEnd returns BackEnd
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BackEnd(ISerializationContext context, BackEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.BACK_END__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.BACK_END__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBackEndAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BatchOperation returns BatchOperation
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BatchOperation(ISerializationContext context, BatchOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.BATCH_OPERATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.BATCH_OPERATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBatchOperationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BucketAccess returns BucketAccess
	 *
	 * Constraint:
	 *     (elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic | elements+=OnlyAuthorized)
	 */
	protected void sequence_BucketAccess(ISerializationContext context, BucketAccess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BucketObjectsNotPublic returns BucketObjectsNotPublic
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BucketObjectsNotPublic(ISerializationContext context, BucketObjectsNotPublic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.BUCKET_OBJECTS_NOT_PUBLIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.BUCKET_OBJECTS_NOT_PUBLIC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBucketObjectsNotPublicAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Bucket returns Bucket
	 *
	 * Constraint:
	 *     (name=ID elements+=BucketAccess elements+=AmazonFolder* elements+=AmazonFile+)
	 */
	protected void sequence_Bucket(ISerializationContext context, Bucket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicContent returns BusinessLogicContent
	 *
	 * Constraint:
	 *     elements+=BusinessLogicSegments
	 */
	protected void sequence_BusinessLogicContent(ISerializationContext context, BusinessLogicContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicLayer returns BusinessLogicLayer
	 *
	 * Constraint:
	 *     (elements+=BusinessLogicContent elements+=SegmentStructure)
	 */
	protected void sequence_BusinessLogicLayer(ISerializationContext context, BusinessLogicLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BusinessLogicSegments returns BusinessLogicSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID name=ID name=ID)
	 */
	protected void sequence_BusinessLogicSegments(ISerializationContext context, BusinessLogicSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Clause returns Clause
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Clause(ISerializationContext context, Clause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.CLAUSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.CLAUSE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClauseAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cluster returns Cluster
	 *
	 * Constraint:
	 *     (elements+=Database elements+=PostgresUser+)
	 */
	protected void sequence_Cluster(ISerializationContext context, Cluster semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (name=ID elements+=DatatypeDB elements+=Constraint*)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Columns returns Columns
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Columns(ISerializationContext context, Columns semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.COLUMNS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.COLUMNS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnsAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ComponentClass returns ComponentClass
	 *
	 * Constraint:
	 *     (componentclass+=ReactFunctions componentclass+=Props)
	 */
	protected void sequence_ComponentClass(ISerializationContext context, ComponentClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentsLogic returns ComponentsLogic
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=LogicContent)
	 */
	protected void sequence_ComponentsLogic(ISerializationContext context, ComponentsLogic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentsUI returns ComponentsUI
	 *
	 * Constraint:
	 *     (name=ID uicomponents+=UIContent)
	 */
	protected void sequence_ComponentsUI(ISerializationContext context, ComponentsUI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (elements+=EnableGlobalMethodSecurity elements+=EnableAuthorizationServer elements+=EnableResourceServer elements+=EnableWebSecurity)
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.CONSTRAINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.CONSTRAINT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CoreFunctionsDeclaration returns CoreFunctionsDeclaration
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CoreFunctionsDeclaration(ISerializationContext context, CoreFunctionsDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.CORE_FUNCTIONS_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.CORE_FUNCTIONS_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoreFunctionsDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DOMConfigurations returns DOMConfigurations
	 *
	 * Constraint:
	 *     (elements+=DOMTypeConf name=ID)
	 */
	protected void sequence_DOMConfigurations(ISerializationContext context, DOMConfigurations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceContent returns DataPersistenceContent
	 *
	 * Constraint:
	 *     elements+=DataPersistenceSegments
	 */
	protected void sequence_DataPersistenceContent(ISerializationContext context, DataPersistenceContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceLayer returns DataPersistenceLayer
	 *
	 * Constraint:
	 *     elements+=DataPersistenceContent
	 */
	protected void sequence_DataPersistenceLayer(ISerializationContext context, DataPersistenceLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPersistenceSegments returns DataPersistenceSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_DataPersistenceSegments(ISerializationContext context, DataPersistenceSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     (name=ID elements+=Schema)
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DatatypeDB returns DatatypeDB
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DatatypeDB(ISerializationContext context, DatatypeDB semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.DATATYPE_DB__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.DATATYPE_DB__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatatypeDBAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Directories returns Directories
	 *
	 * Constraint:
	 *     elements+=MultipleFile
	 */
	protected void sequence_Directories(ISerializationContext context, Directories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DirectoryContent returns DirectoryContent
	 *
	 * Constraint:
	 *     ((name=ID elements+=Directories) | elements+=SingleFile)
	 */
	protected void sequence_DirectoryContent(ISerializationContext context, DirectoryContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainConnection returns DomainConnection
	 *
	 * Constraint:
	 *     elements+=DomainRelations
	 */
	protected void sequence_DomainConnection(ISerializationContext context, DomainConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainRelations returns DomainRelations
	 *
	 * Constraint:
	 *     (
	 *         elements+=UserDomain 
	 *         name=ID 
	 *         elements+=Functionalities 
	 *         elements+=Album 
	 *         name=ID 
	 *         elements+=AlbumManagementFunctions 
	 *         elements+=Photo 
	 *         name=ID 
	 *         elements+=PhotoActionsFunctions 
	 *         elements+=PhotoActions 
	 *         name=ID 
	 *         elements+=AlbumManagement
	 *     )
	 */
	protected void sequence_DomainRelations(ISerializationContext context, DomainRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (name=ID elements+=Entity elements+=Functionality elements+=DomainConnection)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnableAuthorizationServer returns EnableAuthorizationServer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnableAuthorizationServer(ISerializationContext context, EnableAuthorizationServer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_AUTHORIZATION_SERVER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_AUTHORIZATION_SERVER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnableAuthorizationServerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnableGlobalMethodSecurity returns EnableGlobalMethodSecurity
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnableGlobalMethodSecurity(ISerializationContext context, EnableGlobalMethodSecurity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_GLOBAL_METHOD_SECURITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_GLOBAL_METHOD_SECURITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnableGlobalMethodSecurityAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnableResourceServer returns EnableResourceServer
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnableResourceServer(ISerializationContext context, EnableResourceServer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_RESOURCE_SERVER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_RESOURCE_SERVER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnableResourceServerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnableWebSecurity returns EnableWebSecurity
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnableWebSecurity(ISerializationContext context, EnableWebSecurity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_WEB_SECURITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ENABLE_WEB_SECURITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnableWebSecurityAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entities returns Entities
	 *
	 * Constraint:
	 *     (elements+=Photo+ elements+=Album+ elements+=UserDomain+)
	 */
	protected void sequence_Entities(ISerializationContext context, Entities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     elements+=Entities
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExceptionHandler returns ExceptionHandler
	 *
	 * Constraint:
	 *     (name=ID elements+=ExceptionProcess+)
	 */
	protected void sequence_ExceptionHandler(ISerializationContext context, ExceptionHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExceptionProcess returns ExceptionProcess
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExceptionProcess(ISerializationContext context, ExceptionProcess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.EXCEPTION_PROCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.EXCEPTION_PROCESS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExceptionProcessAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKeyRef returns ForeignKeyRef
	 *
	 * Constraint:
	 *     elements+=RefTable_p+
	 */
	protected void sequence_ForeignKeyRef(ISerializationContext context, ForeignKeyRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey returns ForeignKey
	 *
	 * Constraint:
	 *     (elements+=ForeignKey_n elements+=ForeignKeyRef)
	 */
	protected void sequence_ForeignKey(ISerializationContext context, ForeignKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey_n returns ForeignKey_n
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ForeignKey_n(ISerializationContext context, ForeignKey_n semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.FOREIGN_KEY_N__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.FOREIGN_KEY_N__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForeignKey_nAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FrontEnd returns FrontEnd
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FrontEnd(ISerializationContext context, FrontEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.FRONT_END__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.FRONT_END__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFrontEndAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.FUNCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Functionalities returns Functionalities
	 *
	 * Constraint:
	 *     (functions+=ProfileManagement elements+=AppAccess items+=AlbumManagement resources+=PhotoActions aditionals+=LandingActions)
	 */
	protected void sequence_Functionalities(ISerializationContext context, Functionalities semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functionality returns Functionality
	 *
	 * Constraint:
	 *     elements+=Functionalities
	 */
	protected void sequence_Functionality(ISerializationContext context, Functionality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GeneratedValue returns GeneratedValue
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_GeneratedValue(ISerializationContext context, GeneratedValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.GENERATED_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.GENERATED_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGeneratedValueAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Index_p returns Index_p
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Index_p(ISerializationContext context, Index_p semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.INDEX_P__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.INDEX_P__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndex_pAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LandingActions returns LandingActions
	 *
	 * Constraint:
	 *     items+=LandingFunctions
	 */
	protected void sequence_LandingActions(ISerializationContext context, LandingActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LandingFunctions returns LandingFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_LandingFunctions(ISerializationContext context, LandingFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerRelations returns LayerRelations
	 *
	 * Constraint:
	 *     (layerelations+=RelationType name=ID layerorigin+=LayerSource layertarget+=LayerTarget)
	 */
	protected void sequence_LayerRelations(ISerializationContext context, LayerRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerSource returns LayerSource
	 *
	 * Constraint:
	 *     layerelations+=LayerRelationName
	 */
	protected void sequence_LayerSource(ISerializationContext context, LayerSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerTarget returns LayerTarget
	 *
	 * Constraint:
	 *     layerelations+=LayerRelationName
	 */
	protected void sequence_LayerTarget(ISerializationContext context, LayerTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     (elements+=PresentationLayer elements+=BusinessLogicLayer elements+=DataPersistenceLayer)
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicContent returns LogicContent
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=LogicStructure)
	 */
	protected void sequence_LogicContent(ISerializationContext context, LogicContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicStructure returns LogicStructure
	 *
	 * Constraint:
	 *     (name=ID logiccomponents+=ComponentClass name=ID)
	 */
	protected void sequence_LogicStructure(ISerializationContext context, LogicStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Metadata returns Metadata
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Metadata(ISerializationContext context, Metadata semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.METADATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.METADATA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMetadataAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (elements+=Domain elements+=Architecture elements+=Technology)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultipleFile returns MultipleFile
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_MultipleFile(ISerializationContext context, MultipleFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.MULTIPLE_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.MULTIPLE_FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultipleFileAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NTierSource returns NTierSource
	 *
	 * Constraint:
	 *     ntierconnection+=NTiersRelations
	 */
	protected void sequence_NTierSource(ISerializationContext context, NTierSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTierTarget returns NTierTarget
	 *
	 * Constraint:
	 *     ntierconnection+=NTiersRelations
	 */
	protected void sequence_NTierTarget(ISerializationContext context, NTierTarget semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiersConnections returns NTiersConnections
	 *
	 * Constraint:
	 *     (ntierconnection+=ConnectionType name=ID ntierorigin+=NTierSource ntiertarget+=NTierTarget)+
	 */
	protected void sequence_NTiersConnections(ISerializationContext context, NTiersConnections semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiersRelations returns NTiersRelations
	 *
	 * Constraint:
	 *     (name=ID | name=ID | name=ID | name=ID)
	 */
	protected void sequence_NTiersRelations(ISerializationContext context, NTiersRelations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NTiers returns NTiers
	 *
	 * Constraint:
	 *     (elements+=Layer+ elements+=LayerRelations+ elements+=ArchitectureComponents+)
	 */
	protected void sequence_NTiers(ISerializationContext context, NTiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NameNativeQuery returns NameNativeQuery
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_NameNativeQuery(ISerializationContext context, NameNativeQuery semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.NAME_NATIVE_QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.NAME_NATIVE_QUERY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameNativeQueryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ObjectsPublic returns ObjectsPublic
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ObjectsPublic(ISerializationContext context, ObjectsPublic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.OBJECTS_PUBLIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.OBJECTS_PUBLIC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectsPublicAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OnlyAuthorized returns OnlyAuthorized
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_OnlyAuthorized(ISerializationContext context, OnlyAuthorized semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ONLY_AUTHORIZED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ONLY_AUTHORIZED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnlyAuthorizedAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OrderSpring returns OrderSpring
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_OrderSpring(ISerializationContext context, OrderSpring semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.ORDER_SPRING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.ORDER_SPRING__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrderSpringAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageName returns PackageName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PackageName(ISerializationContext context, PackageName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PACKAGE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PACKAGE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageNameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageVersion returns PackageVersion
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PackageVersion(ISerializationContext context, PackageVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PACKAGE_VERSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PACKAGE_VERSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageVersionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PersistenceDataComponent returns PersistenceDataComponent
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PersistenceDataComponent(ISerializationContext context, PersistenceDataComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PERSISTENCE_DATA_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PERSISTENCE_DATA_COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistenceDataComponentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PhotoActionsFunctions returns PhotoActionsFunctions
	 *
	 * Constraint:
	 *     (nameGenerico=ID namePhoto=ID nameLoad=ID)
	 */
	protected void sequence_PhotoActionsFunctions(ISerializationContext context, PhotoActionsFunctions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_GENERICO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_GENERICO));
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_PHOTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_PHOTO));
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_LOAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO_ACTIONS_FUNCTIONS__NAME_LOAD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPhotoActionsFunctionsAccess().getNameGenericoIDTerminalRuleCall_1_0(), semanticObject.getNameGenerico());
		feeder.accept(grammarAccess.getPhotoActionsFunctionsAccess().getNamePhotoIDTerminalRuleCall_3_0(), semanticObject.getNamePhoto());
		feeder.accept(grammarAccess.getPhotoActionsFunctionsAccess().getNameLoadIDTerminalRuleCall_5_0(), semanticObject.getNameLoad());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PhotoActions returns PhotoActions
	 *
	 * Constraint:
	 *     items+=PhotoActionsFunctions
	 */
	protected void sequence_PhotoActions(ISerializationContext context, PhotoActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Photo returns Photo
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Photo(ISerializationContext context, Photo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PHOTO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPhotoAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Policy returns Policy
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Policy(ISerializationContext context, Policy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.POLICY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.POLICY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPolicyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PostgreSQL returns PostgreSQL
	 *
	 * Constraint:
	 *     (name=ID elements+=Cluster)
	 */
	protected void sequence_PostgreSQL(ISerializationContext context, PostgreSQL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PostgresUser returns PostgresUser
	 *
	 * Constraint:
	 *     (name=ID elements+=Privilege elements+=Query*)
	 */
	protected void sequence_PostgresUser(ISerializationContext context, PostgresUser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns Predicate
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Predicate(ISerializationContext context, Predicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PREDICATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PREDICATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPredicateAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PresentationContent returns PresentationContent
	 *
	 * Constraint:
	 *     elements+=PresentationSegments
	 */
	protected void sequence_PresentationContent(ISerializationContext context, PresentationContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentationLayer returns PresentationLayer
	 *
	 * Constraint:
	 *     (elements+=PresentationContent elements+=SegmentStructure)
	 */
	protected void sequence_PresentationLayer(ISerializationContext context, PresentationLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentationSegments returns PresentationSegments
	 *
	 * Constraint:
	 *     (name=ID name=ID name=ID)
	 */
	protected void sequence_PresentationSegments(ISerializationContext context, PresentationSegments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Privilege returns Privilege
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Privilege(ISerializationContext context, Privilege semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PRIVILEGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PRIVILEGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrivilegeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ProfileManagementFunctions returns ProfileManagementFunctions
	 *
	 * Constraint:
	 *     (name=ID name=ID)
	 */
	protected void sequence_ProfileManagementFunctions(ISerializationContext context, ProfileManagementFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProfileManagement returns ProfileManagement
	 *
	 * Constraint:
	 *     items+=ProfileManagementFunctions
	 */
	protected void sequence_ProfileManagement(ISerializationContext context, ProfileManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Props returns Props
	 *
	 * Constraint:
	 *     (name=ID componentclass+=DataType)+
	 */
	protected void sequence_Props(ISerializationContext context, Props semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PublicAccess returns PublicAccess
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PublicAccess(ISerializationContext context, PublicAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.PUBLIC_ACCESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.PUBLIC_ACCESS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPublicAccessAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     elements+=Clause
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactActionsContent returns ReactActionsContent
	 *
	 * Constraint:
	 *     reactrelcontent+=ReactServicesRelation+
	 */
	protected void sequence_ReactActionsContent(ISerializationContext context, ReactActionsContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactActions returns ReactActions
	 *
	 * Constraint:
	 *     reactactcontent+=ReactActionsContent
	 */
	protected void sequence_ReactActions(ISerializationContext context, ReactActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactComponents returns ReactComponents
	 *
	 * Constraint:
	 *     (componentslogic+=ComponentsLogic componentsui+=ComponentsUI)
	 */
	protected void sequence_ReactComponents(ISerializationContext context, ReactComponents semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConfiguration returns ReactConfiguration
	 *
	 * Constraint:
	 *     (dependencies+=ReactDependencies configurations+=ReactConfigurations)
	 */
	protected void sequence_ReactConfiguration(ISerializationContext context, ReactConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConfigurations returns ReactConfigurations
	 *
	 * Constraint:
	 *     (name=ID configurations+=DOMConfigurations+)
	 */
	protected void sequence_ReactConfigurations(ISerializationContext context, ReactConfigurations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactConstructor returns ReactConstructor
	 *
	 * Constraint:
	 *     (componentclass+=State componentclass+=CoreFunctionsDeclaration*)
	 */
	protected void sequence_ReactConstructor(ISerializationContext context, ReactConstructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactCoreFunctions returns ReactCoreFunctions
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactCoreFunctions(ISerializationContext context, ReactCoreFunctions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_CORE_FUNCTIONS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_CORE_FUNCTIONS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactCoreFunctionsAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependenciesRules returns ReactDependenciesRules
	 *
	 * Constraint:
	 *     (name=ID dependencies+=ReactDependenciesSubRules+)
	 */
	protected void sequence_ReactDependenciesRules(ISerializationContext context, ReactDependenciesRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependenciesSubRules returns ReactDependenciesSubRules
	 *
	 * Constraint:
	 *     dependencies+=SingleDependencies
	 */
	protected void sequence_ReactDependenciesSubRules(ISerializationContext context, ReactDependenciesSubRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactDependencies returns ReactDependencies
	 *
	 * Constraint:
	 *     dependencies+=ReactDependenciesRules+
	 */
	protected void sequence_ReactDependencies(ISerializationContext context, ReactDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactFunctions returns ReactFunctions
	 *
	 * Constraint:
	 *     (componentclass+=ReactConstructor lifecycleclass+=ReactLifeCycle* componentclass+=ReactCoreFunctions* renderclass+=ReactRender)
	 */
	protected void sequence_ReactFunctions(ISerializationContext context, ReactFunctions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactInfo returns ReactInfo
	 *
	 * Constraint:
	 *     reactinformation+=ReactInformation+
	 */
	protected void sequence_ReactInfo(ISerializationContext context, ReactInfo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactInformation returns ReactInformation
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactInformation(ISerializationContext context, ReactInformation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_INFORMATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_INFORMATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactInformationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactLibraries returns ReactLibraries
	 *
	 * Constraint:
	 *     reactlibraries+=ReactLibrary+
	 */
	protected void sequence_ReactLibraries(ISerializationContext context, ReactLibraries semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactLibrary returns ReactLibrary
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactLibrary(ISerializationContext context, ReactLibrary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_LIBRARY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_LIBRARY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactLibraryAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactModules returns ReactModules
	 *
	 * Constraint:
	 *     reactmodules+=ReactSubModules
	 */
	protected void sequence_ReactModules(ISerializationContext context, ReactModules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactServicesRelation returns ReactServicesRelation
	 *
	 * Constraint:
	 *     (reactrelationcontent+=ReactServicesType name=ID)+
	 */
	protected void sequence_ReactServicesRelation(ISerializationContext context, ReactServicesRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReactServicesType returns ReactServicesType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ReactServicesType(ISerializationContext context, ReactServicesType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_SERVICES_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REACT_SERVICES_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReactServicesTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReactSubModules returns ReactSubModules
	 *
	 * Constraint:
	 *     (reactmodules+=ReactConfiguration reactmodules+=ReactComponents reactmodules+=ReactActions reactmodules+=ReactLibraries reactmodules+=ReactInfo)
	 */
	protected void sequence_ReactSubModules(ISerializationContext context, ReactSubModules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     React returns React
	 *
	 * Constraint:
	 *     (name=ID reacts+=ReactModules)
	 */
	protected void sequence_React(ISerializationContext context, React semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefTable_p returns RefTable_p
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RefTable_p(ISerializationContext context, RefTable_p semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REF_TABLE_P__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REF_TABLE_P__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefTable_pAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RequestMappingType returns RequestMappingType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RequestMappingType(ISerializationContext context, RequestMappingType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REQUEST_MAPPING_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REQUEST_MAPPING_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestMappingTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RequestMapping returns RequestMapping
	 *
	 * Constraint:
	 *     (elements+=RequestPart* elements+=RequestMappingType)
	 */
	protected void sequence_RequestMapping(ISerializationContext context, RequestMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequestPart returns RequestPart
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RequestPart(ISerializationContext context, RequestPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.REQUEST_PART__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.REQUEST_PART__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestPartAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RestController returns RestController
	 *
	 * Constraint:
	 *     (name=ID elements+=Specification elements+=Autowired+ elements+=RequestMapping+ elements+=ExceptionHandler)
	 */
	protected void sequence_RestController(ISerializationContext context, RestController semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Row returns Row
	 *
	 * Constraint:
	 *     (name=ID elements+=Policy*)
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns Schema
	 *
	 * Constraint:
	 *     (elements+=Index_p* elements+=ViewSchema* elements+=Table_p+ elements+=Trigger* elements+=Function)
	 */
	protected void sequence_Schema(ISerializationContext context, Schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SearchCriteria returns SearchCriteria
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SearchCriteria(ISerializationContext context, SearchCriteria semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.SEARCH_CRITERIA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.SEARCH_CRITERIA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSearchCriteriaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SegmentStructureContent returns SegmentStructureContent
	 *
	 * Constraint:
	 *     (name=ID elements+=DirectoryContent+)
	 */
	protected void sequence_SegmentStructureContent(ISerializationContext context, SegmentStructureContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SegmentStructure returns SegmentStructure
	 *
	 * Constraint:
	 *     elements+=SegmentStructureContent
	 */
	protected void sequence_SegmentStructure(ISerializationContext context, SegmentStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleDependencies returns SingleDependencies
	 *
	 * Constraint:
	 *     (dependencies+=PackageName dependencies+=PackageVersion)
	 */
	protected void sequence_SingleDependencies(ISerializationContext context, SingleDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleFile returns SingleFile
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SingleFile(ISerializationContext context, SingleFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.SINGLE_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.SINGLE_FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleFileAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Specification returns Specification
	 *
	 * Constraint:
	 *     (elements+=Predicate+ elements+=SearchCriteria)
	 */
	protected void sequence_Specification(ISerializationContext context, Specification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringBootApplication returns SpringBootApplication
	 *
	 * Constraint:
	 *     (elements+=Configuration elements+=SpringComponent+ elements+=SpringRepository+ elements+=RestController+ elements+=SpringEntity+)
	 */
	protected void sequence_SpringBootApplication(ISerializationContext context, SpringBootApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringComponent returns SpringComponent
	 *
	 * Constraint:
	 *     elements+=OrderSpring
	 */
	protected void sequence_SpringComponent(ISerializationContext context, SpringComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringEntity returns SpringEntity
	 *
	 * Constraint:
	 *     (name=ID elements+=SpringTable+ elements+=NameNativeQuery*)
	 */
	protected void sequence_SpringEntity(ISerializationContext context, SpringEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringRepositories returns SpringRepositories
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SpringRepositories(ISerializationContext context, SpringRepositories semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.SPRING_REPOSITORIES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.SPRING_REPOSITORIES__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpringRepositoriesAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpringRepository returns SpringRepository
	 *
	 * Constraint:
	 *     elements+=SpringRepositories+
	 */
	protected void sequence_SpringRepository(ISerializationContext context, SpringRepository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringTableId returns SpringTableId
	 *
	 * Constraint:
	 *     elements+=GeneratedValue+
	 */
	protected void sequence_SpringTableId(ISerializationContext context, SpringTableId semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpringTable returns SpringTable
	 *
	 * Constraint:
	 *     (name=ID elements+=SpringTableId elements+=Columns+)
	 */
	protected void sequence_SpringTable(ISerializationContext context, SpringTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Spring returns Spring
	 *
	 * Constraint:
	 *     (name=ID elements+=SpringBootApplication)
	 */
	protected void sequence_Spring(ISerializationContext context, Spring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID componentclass+=DataType)+
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table_p returns Table_p
	 *
	 * Constraint:
	 *     (name=ID elements+=ForeignKey+ elements+=Column+ elements+=Row+)
	 */
	protected void sequence_Table_p(ISerializationContext context, Table_p semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technologies returns Technologies
	 *
	 * Constraint:
	 *     (factors+=Spring factors+=React factors+=PostgreSQL factors+=AmazonWebServices)
	 */
	protected void sequence_Technologies(ISerializationContext context, Technologies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Technology returns Technology
	 *
	 * Constraint:
	 *     (name=ID elements+=Technologies)
	 */
	protected void sequence_Technology(ISerializationContext context, Technology semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.TRIGGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.TRIGGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTriggerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UIContent returns UIContent
	 *
	 * Constraint:
	 *     ((name=ID uicontent+=ComponentClass)+ (name=ID uicontent+=ComponentClass)+)
	 */
	protected void sequence_UIContent(ISerializationContext context, UIContent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserDomain returns UserDomain
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_UserDomain(ISerializationContext context, UserDomain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.USER_DOMAIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.USER_DOMAIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserDomainAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ViewSchema returns ViewSchema
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ViewSchema(ISerializationContext context, ViewSchema semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SoftGalleryLanguagePackage.Literals.VIEW_SCHEMA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SoftGalleryLanguagePackage.Literals.VIEW_SCHEMA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getViewSchemaAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
