/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServiceContRequest;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServiceContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>React Service Content</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ReactServiceContentImpl#getFunctName <em>Funct Name</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ReactServiceContentImpl#getReactservrequest <em>Reactservrequest</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReactServiceContentImpl extends MinimalEObjectImpl.Container implements ReactServiceContent
{
  /**
   * The default value of the '{@link #getFunctName() <em>Funct Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctName()
   * @generated
   * @ordered
   */
  protected static final String FUNCT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFunctName() <em>Funct Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctName()
   * @generated
   * @ordered
   */
  protected String functName = FUNCT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getReactservrequest() <em>Reactservrequest</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReactservrequest()
   * @generated
   * @ordered
   */
  protected EList<ReactServiceContRequest> reactservrequest;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactServiceContentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.REACT_SERVICE_CONTENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFunctName()
  {
    return functName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunctName(String newFunctName)
  {
    String oldFunctName = functName;
    functName = newFunctName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__FUNCT_NAME, oldFunctName, functName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReactServiceContRequest> getReactservrequest()
  {
    if (reactservrequest == null)
    {
      reactservrequest = new EObjectContainmentEList<ReactServiceContRequest>(ReactServiceContRequest.class, this, SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST);
    }
    return reactservrequest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST:
        return ((InternalEList<?>)getReactservrequest()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__FUNCT_NAME:
        return getFunctName();
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST:
        return getReactservrequest();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__FUNCT_NAME:
        setFunctName((String)newValue);
        return;
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST:
        getReactservrequest().clear();
        getReactservrequest().addAll((Collection<? extends ReactServiceContRequest>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__FUNCT_NAME:
        setFunctName(FUNCT_NAME_EDEFAULT);
        return;
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST:
        getReactservrequest().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__FUNCT_NAME:
        return FUNCT_NAME_EDEFAULT == null ? functName != null : !FUNCT_NAME_EDEFAULT.equals(functName);
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT__REACTSERVREQUEST:
        return reactservrequest != null && !reactservrequest.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (functName: ");
    result.append(functName);
    result.append(')');
    return result.toString();
  }

} //ReactServiceContentImpl
