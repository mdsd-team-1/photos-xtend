/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Business Logic Content</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.BusinessLogicContentImpl#getBusinessLogicSegments <em>Business Logic Segments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BusinessLogicContentImpl extends MinimalEObjectImpl.Container implements BusinessLogicContent
{
  /**
   * The cached value of the '{@link #getBusinessLogicSegments() <em>Business Logic Segments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBusinessLogicSegments()
   * @generated
   * @ordered
   */
  protected EList<BusinessLogicSegments> businessLogicSegments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BusinessLogicContentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.BUSINESS_LOGIC_CONTENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BusinessLogicSegments> getBusinessLogicSegments()
  {
    if (businessLogicSegments == null)
    {
      businessLogicSegments = new EObjectContainmentEList<BusinessLogicSegments>(BusinessLogicSegments.class, this, SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS);
    }
    return businessLogicSegments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS:
        return ((InternalEList<?>)getBusinessLogicSegments()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS:
        return getBusinessLogicSegments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS:
        getBusinessLogicSegments().clear();
        getBusinessLogicSegments().addAll((Collection<? extends BusinessLogicSegments>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS:
        getBusinessLogicSegments().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT__BUSINESS_LOGIC_SEGMENTS:
        return businessLogicSegments != null && !businessLogicSegments.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BusinessLogicContentImpl
