/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.Album;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Entities;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Photo;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;
import co.unal.mdd.photos.dsl.softGalleryLanguage.UserDomain;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entities</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.EntitiesImpl#getPhotoelements <em>Photoelements</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.EntitiesImpl#getAlbumelements <em>Albumelements</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.EntitiesImpl#getUserdomainelements <em>Userdomainelements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntitiesImpl extends MinimalEObjectImpl.Container implements Entities
{
  /**
   * The cached value of the '{@link #getPhotoelements() <em>Photoelements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhotoelements()
   * @generated
   * @ordered
   */
  protected EList<Photo> photoelements;

  /**
   * The cached value of the '{@link #getAlbumelements() <em>Albumelements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlbumelements()
   * @generated
   * @ordered
   */
  protected EList<Album> albumelements;

  /**
   * The cached value of the '{@link #getUserdomainelements() <em>Userdomainelements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUserdomainelements()
   * @generated
   * @ordered
   */
  protected EList<UserDomain> userdomainelements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntitiesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.ENTITIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Photo> getPhotoelements()
  {
    if (photoelements == null)
    {
      photoelements = new EObjectContainmentEList<Photo>(Photo.class, this, SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS);
    }
    return photoelements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Album> getAlbumelements()
  {
    if (albumelements == null)
    {
      albumelements = new EObjectContainmentEList<Album>(Album.class, this, SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS);
    }
    return albumelements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UserDomain> getUserdomainelements()
  {
    if (userdomainelements == null)
    {
      userdomainelements = new EObjectContainmentEList<UserDomain>(UserDomain.class, this, SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS);
    }
    return userdomainelements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS:
        return ((InternalEList<?>)getPhotoelements()).basicRemove(otherEnd, msgs);
      case SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS:
        return ((InternalEList<?>)getAlbumelements()).basicRemove(otherEnd, msgs);
      case SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS:
        return ((InternalEList<?>)getUserdomainelements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS:
        return getPhotoelements();
      case SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS:
        return getAlbumelements();
      case SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS:
        return getUserdomainelements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS:
        getPhotoelements().clear();
        getPhotoelements().addAll((Collection<? extends Photo>)newValue);
        return;
      case SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS:
        getAlbumelements().clear();
        getAlbumelements().addAll((Collection<? extends Album>)newValue);
        return;
      case SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS:
        getUserdomainelements().clear();
        getUserdomainelements().addAll((Collection<? extends UserDomain>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS:
        getPhotoelements().clear();
        return;
      case SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS:
        getAlbumelements().clear();
        return;
      case SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS:
        getUserdomainelements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.ENTITIES__PHOTOELEMENTS:
        return photoelements != null && !photoelements.isEmpty();
      case SoftGalleryLanguagePackage.ENTITIES__ALBUMELEMENTS:
        return albumelements != null && !albumelements.isEmpty();
      case SoftGalleryLanguagePackage.ENTITIES__USERDOMAINELEMENTS:
        return userdomainelements != null && !userdomainelements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EntitiesImpl
