/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.util;

import co.unal.mdd.photos.dsl.softGalleryLanguage.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage
 * @generated
 */
public class SoftGalleryLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SoftGalleryLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoftGalleryLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SoftGalleryLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SoftGalleryLanguagePackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DOMAIN:
      {
        Domain domain = (Domain)theEObject;
        T result = caseDomain(domain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENTITIES:
      {
        Entities entities = (Entities)theEObject;
        T result = caseEntities(entities);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ATRIBUTE_PHOTO:
      {
        AtributePhoto atributePhoto = (AtributePhoto)theEObject;
        T result = caseAtributePhoto(atributePhoto);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ATRIBUTE_ALBUM:
      {
        AtributeAlbum atributeAlbum = (AtributeAlbum)theEObject;
        T result = caseAtributeAlbum(atributeAlbum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ATRIBUTE_USER_DOMAIN:
      {
        AtributeUserDomain atributeUserDomain = (AtributeUserDomain)theEObject;
        T result = caseAtributeUserDomain(atributeUserDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FUNCTIONALITY:
      {
        Functionality functionality = (Functionality)theEObject;
        T result = caseFunctionality(functionality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FUNCTIONALITIES:
      {
        Functionalities functionalities = (Functionalities)theEObject;
        T result = caseFunctionalities(functionalities);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PROFILE_MANAGEMENT:
      {
        ProfileManagement profileManagement = (ProfileManagement)theEObject;
        T result = caseProfileManagement(profileManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PROFILE_MANAGEMENT_FUNCTIONS:
      {
        ProfileManagementFunctions profileManagementFunctions = (ProfileManagementFunctions)theEObject;
        T result = caseProfileManagementFunctions(profileManagementFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.APP_ACCESS:
      {
        AppAccess appAccess = (AppAccess)theEObject;
        T result = caseAppAccess(appAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.APP_ACCESS_FUNCTIONS:
      {
        AppAccessFunctions appAccessFunctions = (AppAccessFunctions)theEObject;
        T result = caseAppAccessFunctions(appAccessFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ALBUM_MANAGEMENT:
      {
        AlbumManagement albumManagement = (AlbumManagement)theEObject;
        T result = caseAlbumManagement(albumManagement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ALBUM_MANAGEMENT_FUNCTIONS:
      {
        AlbumManagementFunctions albumManagementFunctions = (AlbumManagementFunctions)theEObject;
        T result = caseAlbumManagementFunctions(albumManagementFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PHOTO_ACTIONS:
      {
        PhotoActions photoActions = (PhotoActions)theEObject;
        T result = casePhotoActions(photoActions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PHOTO_ACTIONS_FUNCTIONS:
      {
        PhotoActionsFunctions photoActionsFunctions = (PhotoActionsFunctions)theEObject;
        T result = casePhotoActionsFunctions(photoActionsFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LANDING_ACTIONS:
      {
        LandingActions landingActions = (LandingActions)theEObject;
        T result = caseLandingActions(landingActions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LANDING_FUNCTIONS:
      {
        LandingFunctions landingFunctions = (LandingFunctions)theEObject;
        T result = caseLandingFunctions(landingFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ARCHITECTURE:
      {
        Architecture architecture = (Architecture)theEObject;
        T result = caseArchitecture(architecture);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIERS:
      {
        NTiers nTiers = (NTiers)theEObject;
        T result = caseNTiers(nTiers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LAYER:
      {
        Layer layer = (Layer)theEObject;
        T result = caseLayer(layer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PRESENTATION_LAYER:
      {
        PresentationLayer presentationLayer = (PresentationLayer)theEObject;
        T result = casePresentationLayer(presentationLayer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PRESENTATION_CONTENT:
      {
        PresentationContent presentationContent = (PresentationContent)theEObject;
        T result = casePresentationContent(presentationContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PRESENTATION_SEGMENTS:
      {
        PresentationSegments presentationSegments = (PresentationSegments)theEObject;
        T result = casePresentationSegments(presentationSegments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_LAYER:
      {
        BusinessLogicLayer businessLogicLayer = (BusinessLogicLayer)theEObject;
        T result = caseBusinessLogicLayer(businessLogicLayer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_CONTENT:
      {
        BusinessLogicContent businessLogicContent = (BusinessLogicContent)theEObject;
        T result = caseBusinessLogicContent(businessLogicContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUSINESS_LOGIC_SEGMENTS:
      {
        BusinessLogicSegments businessLogicSegments = (BusinessLogicSegments)theEObject;
        T result = caseBusinessLogicSegments(businessLogicSegments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CONTROLLER_SEGMENT_ELEMENT:
      {
        ControllerSegmentElement controllerSegmentElement = (ControllerSegmentElement)theEObject;
        T result = caseControllerSegmentElement(controllerSegmentElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPECIFICATION_SEGMENT_ELEMENT:
      {
        SpecificationSegmentElement specificationSegmentElement = (SpecificationSegmentElement)theEObject;
        T result = caseSpecificationSegmentElement(specificationSegmentElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DATA_PERSISTENCE_LAYER:
      {
        DataPersistenceLayer dataPersistenceLayer = (DataPersistenceLayer)theEObject;
        T result = caseDataPersistenceLayer(dataPersistenceLayer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DATA_PERSISTENCE_CONTENT:
      {
        DataPersistenceContent dataPersistenceContent = (DataPersistenceContent)theEObject;
        T result = caseDataPersistenceContent(dataPersistenceContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DATA_PERSISTENCE_SEGMENTS:
      {
        DataPersistenceSegments dataPersistenceSegments = (DataPersistenceSegments)theEObject;
        T result = caseDataPersistenceSegments(dataPersistenceSegments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SEGMENT_STRUCTURE:
      {
        SegmentStructure segmentStructure = (SegmentStructure)theEObject;
        T result = caseSegmentStructure(segmentStructure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SEGMENT_STRUCTURE_CONTENT:
      {
        SegmentStructureContent segmentStructureContent = (SegmentStructureContent)theEObject;
        T result = caseSegmentStructureContent(segmentStructureContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DIRECTORY_CONTENT:
      {
        DirectoryContent directoryContent = (DirectoryContent)theEObject;
        T result = caseDirectoryContent(directoryContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DIRECTORIES:
      {
        Directories directories = (Directories)theEObject;
        T result = caseDirectories(directories);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SINGLE_FILE:
      {
        SingleFile singleFile = (SingleFile)theEObject;
        T result = caseSingleFile(singleFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.MULTIPLE_FILE:
      {
        MultipleFile multipleFile = (MultipleFile)theEObject;
        T result = caseMultipleFile(multipleFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LAYER_RELATIONS:
      {
        LayerRelations layerRelations = (LayerRelations)theEObject;
        T result = caseLayerRelations(layerRelations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LAYER_SOURCE:
      {
        LayerSource layerSource = (LayerSource)theEObject;
        T result = caseLayerSource(layerSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LAYER_TARGET:
      {
        LayerTarget layerTarget = (LayerTarget)theEObject;
        T result = caseLayerTarget(layerTarget);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ARCHITECTURE_COMPONENTS:
      {
        ArchitectureComponents architectureComponents = (ArchitectureComponents)theEObject;
        T result = caseArchitectureComponents(architectureComponents);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FRONT_END:
      {
        FrontEnd frontEnd = (FrontEnd)theEObject;
        T result = caseFrontEnd(frontEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BACK_END:
      {
        BackEnd backEnd = (BackEnd)theEObject;
        T result = caseBackEnd(backEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PERSISTENCE_DATA_COMPONENT:
      {
        PersistenceDataComponent persistenceDataComponent = (PersistenceDataComponent)theEObject;
        T result = casePersistenceDataComponent(persistenceDataComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIERS_CONNECTIONS:
      {
        NTiersConnections nTiersConnections = (NTiersConnections)theEObject;
        T result = caseNTiersConnections(nTiersConnections);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIER_CONNECTION_CONTENT:
      {
        NTierConnectionContent nTierConnectionContent = (NTierConnectionContent)theEObject;
        T result = caseNTierConnectionContent(nTierConnectionContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIER_SOURCE:
      {
        NTierSource nTierSource = (NTierSource)theEObject;
        T result = caseNTierSource(nTierSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIER_TARGET:
      {
        NTierTarget nTierTarget = (NTierTarget)theEObject;
        T result = caseNTierTarget(nTierTarget);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NTIERS_RELATIONS:
      {
        NTiersRelations nTiersRelations = (NTiersRelations)theEObject;
        T result = caseNTiersRelations(nTiersRelations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.TECHNOLOGY:
      {
        Technology technology = (Technology)theEObject;
        T result = caseTechnology(technology);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.TECHNOLOGIES:
      {
        Technologies technologies = (Technologies)theEObject;
        T result = caseTechnologies(technologies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING:
      {
        Spring spring = (Spring)theEObject;
        T result = caseSpring(spring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_BOOT_APPLICATION:
      {
        SpringBootApplication springBootApplication = (SpringBootApplication)theEObject;
        T result = caseSpringBootApplication(springBootApplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CONFIGURATION:
      {
        Configuration configuration = (Configuration)theEObject;
        T result = caseConfiguration(configuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENABLE_GLOBAL_METHOD_SECURITY:
      {
        EnableGlobalMethodSecurity enableGlobalMethodSecurity = (EnableGlobalMethodSecurity)theEObject;
        T result = caseEnableGlobalMethodSecurity(enableGlobalMethodSecurity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENABLE_AUTHORIZATION_SERVER:
      {
        EnableAuthorizationServer enableAuthorizationServer = (EnableAuthorizationServer)theEObject;
        T result = caseEnableAuthorizationServer(enableAuthorizationServer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENABLE_RESOURCE_SERVER:
      {
        EnableResourceServer enableResourceServer = (EnableResourceServer)theEObject;
        T result = caseEnableResourceServer(enableResourceServer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ENABLE_WEB_SECURITY:
      {
        EnableWebSecurity enableWebSecurity = (EnableWebSecurity)theEObject;
        T result = caseEnableWebSecurity(enableWebSecurity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_COMPONENT:
      {
        SpringComponent springComponent = (SpringComponent)theEObject;
        T result = caseSpringComponent(springComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ORDER_SPRING:
      {
        OrderSpring orderSpring = (OrderSpring)theEObject;
        T result = caseOrderSpring(orderSpring);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_REPOSITORY:
      {
        SpringRepository springRepository = (SpringRepository)theEObject;
        T result = caseSpringRepository(springRepository);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_REPOSITORIES:
      {
        SpringRepositories springRepositories = (SpringRepositories)theEObject;
        T result = caseSpringRepositories(springRepositories);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REST_CONTROLLER:
      {
        RestController restController = (RestController)theEObject;
        T result = caseRestController(restController);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPECIFICATION:
      {
        Specification specification = (Specification)theEObject;
        T result = caseSpecification(specification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PREDICATE:
      {
        Predicate predicate = (Predicate)theEObject;
        T result = casePredicate(predicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SEARCH_CRITERIA:
      {
        SearchCriteria searchCriteria = (SearchCriteria)theEObject;
        T result = caseSearchCriteria(searchCriteria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AUTOWIRED:
      {
        Autowired autowired = (Autowired)theEObject;
        T result = caseAutowired(autowired);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AUTOWIRED_TYPE:
      {
        AutowiredType autowiredType = (AutowiredType)theEObject;
        T result = caseAutowiredType(autowiredType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REQUEST_MAPPING:
      {
        RequestMapping requestMapping = (RequestMapping)theEObject;
        T result = caseRequestMapping(requestMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REQUEST_PART:
      {
        RequestPart requestPart = (RequestPart)theEObject;
        T result = caseRequestPart(requestPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REQUEST_MAPPING_TYPE:
      {
        RequestMappingType requestMappingType = (RequestMappingType)theEObject;
        T result = caseRequestMappingType(requestMappingType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.EXCEPTION_HANDLER:
      {
        ExceptionHandler exceptionHandler = (ExceptionHandler)theEObject;
        T result = caseExceptionHandler(exceptionHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.EXCEPTION_PROCESS:
      {
        ExceptionProcess exceptionProcess = (ExceptionProcess)theEObject;
        T result = caseExceptionProcess(exceptionProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_ENTITY:
      {
        SpringEntity springEntity = (SpringEntity)theEObject;
        T result = caseSpringEntity(springEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_TABLE:
      {
        SpringTable springTable = (SpringTable)theEObject;
        T result = caseSpringTable(springTable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SPRING_TABLE_ID:
      {
        SpringTableId springTableId = (SpringTableId)theEObject;
        T result = caseSpringTableId(springTableId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.GENERATED_VALUE:
      {
        GeneratedValue generatedValue = (GeneratedValue)theEObject;
        T result = caseGeneratedValue(generatedValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COLUMNS:
      {
        Columns columns = (Columns)theEObject;
        T result = caseColumns(columns);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.NAME_NATIVE_QUERY:
      {
        NameNativeQuery nameNativeQuery = (NameNativeQuery)theEObject;
        T result = caseNameNativeQuery(nameNativeQuery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT:
      {
        React react = (React)theEObject;
        T result = caseReact(react);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_MODULES:
      {
        ReactModules reactModules = (ReactModules)theEObject;
        T result = caseReactModules(reactModules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SUB_MODULES:
      {
        ReactSubModules reactSubModules = (ReactSubModules)theEObject;
        T result = caseReactSubModules(reactSubModules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_CONFIGURATION:
      {
        ReactConfiguration reactConfiguration = (ReactConfiguration)theEObject;
        T result = caseReactConfiguration(reactConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_DEPENDENCIES:
      {
        ReactDependencies reactDependencies = (ReactDependencies)theEObject;
        T result = caseReactDependencies(reactDependencies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_DEPENDENCIES_RULES:
      {
        ReactDependenciesRules reactDependenciesRules = (ReactDependenciesRules)theEObject;
        T result = caseReactDependenciesRules(reactDependenciesRules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_DEPENDENCIES_SUB_RULES:
      {
        ReactDependenciesSubRules reactDependenciesSubRules = (ReactDependenciesSubRules)theEObject;
        T result = caseReactDependenciesSubRules(reactDependenciesSubRules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SINGLE_DEPENDENCIES:
      {
        SingleDependencies singleDependencies = (SingleDependencies)theEObject;
        T result = caseSingleDependencies(singleDependencies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PACKAGE_NAME:
      {
        PackageName packageName = (PackageName)theEObject;
        T result = casePackageName(packageName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PACKAGE_VERSION:
      {
        PackageVersion packageVersion = (PackageVersion)theEObject;
        T result = casePackageVersion(packageVersion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_CONFIGURATIONS:
      {
        ReactConfigurations reactConfigurations = (ReactConfigurations)theEObject;
        T result = caseReactConfigurations(reactConfigurations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DOM_CONFIGURATIONS:
      {
        DOMConfigurations domConfigurations = (DOMConfigurations)theEObject;
        T result = caseDOMConfigurations(domConfigurations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_COMPONENTS:
      {
        ReactComponents reactComponents = (ReactComponents)theEObject;
        T result = caseReactComponents(reactComponents);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COMPONENTS_LOGIC:
      {
        ComponentsLogic componentsLogic = (ComponentsLogic)theEObject;
        T result = caseComponentsLogic(componentsLogic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LOGIC_CONTENT:
      {
        LogicContent logicContent = (LogicContent)theEObject;
        T result = caseLogicContent(logicContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.LOGIC_STRUCTURE:
      {
        LogicStructure logicStructure = (LogicStructure)theEObject;
        T result = caseLogicStructure(logicStructure);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COMPONENTS_UI:
      {
        ComponentsUI componentsUI = (ComponentsUI)theEObject;
        T result = caseComponentsUI(componentsUI);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.UI_CONTENT:
      {
        UIContent uiContent = (UIContent)theEObject;
        T result = caseUIContent(uiContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.VIEW_COMPONENT_CONT:
      {
        ViewComponentCont viewComponentCont = (ViewComponentCont)theEObject;
        T result = caseViewComponentCont(viewComponentCont);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT:
      {
        SubcomponentCont subcomponentCont = (SubcomponentCont)theEObject;
        T result = caseSubcomponentCont(subcomponentCont);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COMPONENT_CLASS:
      {
        ComponentClass componentClass = (ComponentClass)theEObject;
        T result = caseComponentClass(componentClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_IMPORTS:
      {
        ReactImports reactImports = (ReactImports)theEObject;
        T result = caseReactImports(reactImports);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_IMPORT_CONTENT:
      {
        ReactImportContent reactImportContent = (ReactImportContent)theEObject;
        T result = caseReactImportContent(reactImportContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_FUNCTIONS:
      {
        ReactFunctions reactFunctions = (ReactFunctions)theEObject;
        T result = caseReactFunctions(reactFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR:
      {
        ReactConstructor reactConstructor = (ReactConstructor)theEObject;
        T result = caseReactConstructor(reactConstructor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.STATE_CONTENT:
      {
        StateContent stateContent = (StateContent)theEObject;
        T result = caseStateContent(stateContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CORE_FUNCTIONS_DECLARATION:
      {
        CoreFunctionsDeclaration coreFunctionsDeclaration = (CoreFunctionsDeclaration)theEObject;
        T result = caseCoreFunctionsDeclaration(coreFunctionsDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PROPS:
      {
        Props props = (Props)theEObject;
        T result = caseProps(props);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PROPS_TYPE:
      {
        PropsType propsType = (PropsType)theEObject;
        T result = casePropsType(propsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_CORE_FUNCTIONS:
      {
        ReactCoreFunctions reactCoreFunctions = (ReactCoreFunctions)theEObject;
        T result = caseReactCoreFunctions(reactCoreFunctions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COMPONENTS_STYLES:
      {
        ComponentsStyles componentsStyles = (ComponentsStyles)theEObject;
        T result = caseComponentsStyles(componentsStyles);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COMPONENTS_STYLES_CONTENT:
      {
        ComponentsStylesContent componentsStylesContent = (ComponentsStylesContent)theEObject;
        T result = caseComponentsStylesContent(componentsStylesContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.STYLE_PROPERTIES:
      {
        StyleProperties styleProperties = (StyleProperties)theEObject;
        T result = caseStyleProperties(styleProperties);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.STYLE_PROPERTIES_CONTENT:
      {
        StylePropertiesContent stylePropertiesContent = (StylePropertiesContent)theEObject;
        T result = caseStylePropertiesContent(stylePropertiesContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_ACTIONS:
      {
        ReactActions reactActions = (ReactActions)theEObject;
        T result = caseReactActions(reactActions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_ACTIONS_CONTENT:
      {
        ReactActionsContent reactActionsContent = (ReactActionsContent)theEObject;
        T result = caseReactActionsContent(reactActionsContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SERVICES_TYPE:
      {
        ReactServicesType reactServicesType = (ReactServicesType)theEObject;
        T result = caseReactServicesType(reactServicesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONTENT:
      {
        ReactServiceContent reactServiceContent = (ReactServiceContent)theEObject;
        T result = caseReactServiceContent(reactServiceContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SERVICE_CONT_REQUEST:
      {
        ReactServiceContRequest reactServiceContRequest = (ReactServiceContRequest)theEObject;
        T result = caseReactServiceContRequest(reactServiceContRequest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SERVICE_REQUEST_PROPS:
      {
        ReactServiceRequestProps reactServiceRequestProps = (ReactServiceRequestProps)theEObject;
        T result = caseReactServiceRequestProps(reactServiceRequestProps);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_SERVICES_RELATION:
      {
        ReactServicesRelation reactServicesRelation = (ReactServicesRelation)theEObject;
        T result = caseReactServicesRelation(reactServicesRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACTS_RELATION_SERV:
      {
        ReactsRelationServ reactsRelationServ = (ReactsRelationServ)theEObject;
        T result = caseReactsRelationServ(reactsRelationServ);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_LIBRARIES:
      {
        ReactLibraries reactLibraries = (ReactLibraries)theEObject;
        T result = caseReactLibraries(reactLibraries);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_LIBRARY:
      {
        ReactLibrary reactLibrary = (ReactLibrary)theEObject;
        T result = caseReactLibrary(reactLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_INFO:
      {
        ReactInfo reactInfo = (ReactInfo)theEObject;
        T result = caseReactInfo(reactInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REACT_INFORMATION:
      {
        ReactInformation reactInformation = (ReactInformation)theEObject;
        T result = caseReactInformation(reactInformation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.POSTGRE_SQL:
      {
        PostgreSQL postgreSQL = (PostgreSQL)theEObject;
        T result = casePostgreSQL(postgreSQL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CLUSTER:
      {
        Cluster cluster = (Cluster)theEObject;
        T result = caseCluster(cluster);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DATABASE:
      {
        Database database = (Database)theEObject;
        T result = caseDatabase(database);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.SCHEMA:
      {
        Schema schema = (Schema)theEObject;
        T result = caseSchema(schema);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.INDEX_P:
      {
        Index_p index_p = (Index_p)theEObject;
        T result = caseIndex_p(index_p);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.VIEW_SCHEMA:
      {
        ViewSchema viewSchema = (ViewSchema)theEObject;
        T result = caseViewSchema(viewSchema);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.TABLE_P:
      {
        Table_p table_p = (Table_p)theEObject;
        T result = caseTable_p(table_p);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FOREIGN_KEY:
      {
        ForeignKey foreignKey = (ForeignKey)theEObject;
        T result = caseForeignKey(foreignKey);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FOREIGN_KEY_N:
      {
        ForeignKey_n foreignKey_n = (ForeignKey_n)theEObject;
        T result = caseForeignKey_n(foreignKey_n);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FOREIGN_KEY_REF:
      {
        ForeignKeyRef foreignKeyRef = (ForeignKeyRef)theEObject;
        T result = caseForeignKeyRef(foreignKeyRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.REF_TABLE_P:
      {
        RefTable_p refTable_p = (RefTable_p)theEObject;
        T result = caseRefTable_p(refTable_p);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.COLUMN:
      {
        Column column = (Column)theEObject;
        T result = caseColumn(column);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.DATATYPE_DB:
      {
        DatatypeDB datatypeDB = (DatatypeDB)theEObject;
        T result = caseDatatypeDB(datatypeDB);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ROW:
      {
        Row row = (Row)theEObject;
        T result = caseRow(row);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.POLICY:
      {
        Policy policy = (Policy)theEObject;
        T result = casePolicy(policy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.TRIGGER:
      {
        Trigger trigger = (Trigger)theEObject;
        T result = caseTrigger(trigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.POSTGRES_USER:
      {
        PostgresUser postgresUser = (PostgresUser)theEObject;
        T result = casePostgresUser(postgresUser);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PRIVILEGE:
      {
        Privilege privilege = (Privilege)theEObject;
        T result = casePrivilege(privilege);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.CLAUSE:
      {
        Clause clause = (Clause)theEObject;
        T result = caseClause(clause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AMAZON_WEB_SERVICES:
      {
        AmazonWebServices amazonWebServices = (AmazonWebServices)theEObject;
        T result = caseAmazonWebServices(amazonWebServices);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AMAZON_SIMPLE_STORAGE_SERVICE:
      {
        AmazonSimpleStorageService amazonSimpleStorageService = (AmazonSimpleStorageService)theEObject;
        T result = caseAmazonSimpleStorageService(amazonSimpleStorageService);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BATCH_OPERATION:
      {
        BatchOperation batchOperation = (BatchOperation)theEObject;
        T result = caseBatchOperation(batchOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUCKET:
      {
        Bucket bucket = (Bucket)theEObject;
        T result = caseBucket(bucket);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUCKET_ACCESS:
      {
        BucketAccess bucketAccess = (BucketAccess)theEObject;
        T result = caseBucketAccess(bucketAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.PUBLIC_ACCESS:
      {
        PublicAccess publicAccess = (PublicAccess)theEObject;
        T result = casePublicAccess(publicAccess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.OBJECTS_PUBLIC:
      {
        ObjectsPublic objectsPublic = (ObjectsPublic)theEObject;
        T result = caseObjectsPublic(objectsPublic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.BUCKET_OBJECTS_NOT_PUBLIC:
      {
        BucketObjectsNotPublic bucketObjectsNotPublic = (BucketObjectsNotPublic)theEObject;
        T result = caseBucketObjectsNotPublic(bucketObjectsNotPublic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.ONLY_AUTHORIZED:
      {
        OnlyAuthorized onlyAuthorized = (OnlyAuthorized)theEObject;
        T result = caseOnlyAuthorized(onlyAuthorized);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AMAZON_FOLDER:
      {
        AmazonFolder amazonFolder = (AmazonFolder)theEObject;
        T result = caseAmazonFolder(amazonFolder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AMAZON_FILE:
      {
        AmazonFile amazonFile = (AmazonFile)theEObject;
        T result = caseAmazonFile(amazonFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.METADATA:
      {
        Metadata metadata = (Metadata)theEObject;
        T result = caseMetadata(metadata);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SoftGalleryLanguagePackage.AMAZON_ELASTIC_COMPUTE_CLOUD:
      {
        AmazonElasticComputeCloud amazonElasticComputeCloud = (AmazonElasticComputeCloud)theEObject;
        T result = caseAmazonElasticComputeCloud(amazonElasticComputeCloud);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomain(Domain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entities</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entities</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntities(Entities object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atribute Photo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atribute Photo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtributePhoto(AtributePhoto object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atribute Album</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atribute Album</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtributeAlbum(AtributeAlbum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atribute User Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atribute User Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtributeUserDomain(AtributeUserDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functionality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functionality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionality(Functionality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functionalities</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functionalities</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalities(Functionalities object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Profile Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Profile Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProfileManagement(ProfileManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Profile Management Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Profile Management Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProfileManagementFunctions(ProfileManagementFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>App Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>App Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppAccess(AppAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>App Access Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>App Access Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppAccessFunctions(AppAccessFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Album Management</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Album Management</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlbumManagement(AlbumManagement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Album Management Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Album Management Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlbumManagementFunctions(AlbumManagementFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Photo Actions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Photo Actions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhotoActions(PhotoActions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Photo Actions Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Photo Actions Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhotoActionsFunctions(PhotoActionsFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Landing Actions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Landing Actions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLandingActions(LandingActions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Landing Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Landing Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLandingFunctions(LandingFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architecture</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architecture</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitecture(Architecture object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTiers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTiers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTiers(NTiers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayer(Layer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Presentation Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Presentation Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePresentationLayer(PresentationLayer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Presentation Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Presentation Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePresentationContent(PresentationContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Presentation Segments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Presentation Segments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePresentationSegments(PresentationSegments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Business Logic Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Business Logic Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBusinessLogicLayer(BusinessLogicLayer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Business Logic Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Business Logic Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBusinessLogicContent(BusinessLogicContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Business Logic Segments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Business Logic Segments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBusinessLogicSegments(BusinessLogicSegments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Controller Segment Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Controller Segment Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControllerSegmentElement(ControllerSegmentElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification Segment Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification Segment Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecificationSegmentElement(SpecificationSegmentElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Persistence Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Persistence Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataPersistenceLayer(DataPersistenceLayer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Persistence Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Persistence Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataPersistenceContent(DataPersistenceContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Persistence Segments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Persistence Segments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataPersistenceSegments(DataPersistenceSegments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Segment Structure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Segment Structure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSegmentStructure(SegmentStructure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Segment Structure Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Segment Structure Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSegmentStructureContent(SegmentStructureContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directory Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directory Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectoryContent(DirectoryContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directories</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directories</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectories(Directories object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleFile(SingleFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiple File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiple File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultipleFile(MultipleFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Relations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Relations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerRelations(LayerRelations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerSource(LayerSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerTarget(LayerTarget object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architecture Components</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architecture Components</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitectureComponents(ArchitectureComponents object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Front End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Front End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFrontEnd(FrontEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Back End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Back End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBackEnd(BackEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Persistence Data Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Persistence Data Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePersistenceDataComponent(PersistenceDataComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTiers Connections</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTiers Connections</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTiersConnections(NTiersConnections object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTier Connection Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTier Connection Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTierConnectionContent(NTierConnectionContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTier Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTier Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTierSource(NTierSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTier Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTier Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTierTarget(NTierTarget object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NTiers Relations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NTiers Relations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNTiersRelations(NTiersRelations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Technology</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Technology</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTechnology(Technology object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Technologies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Technologies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTechnologies(Technologies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpring(Spring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Boot Application</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Boot Application</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringBootApplication(SpringBootApplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfiguration(Configuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enable Global Method Security</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enable Global Method Security</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnableGlobalMethodSecurity(EnableGlobalMethodSecurity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enable Authorization Server</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enable Authorization Server</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnableAuthorizationServer(EnableAuthorizationServer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enable Resource Server</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enable Resource Server</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnableResourceServer(EnableResourceServer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enable Web Security</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enable Web Security</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnableWebSecurity(EnableWebSecurity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringComponent(SpringComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Order Spring</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Order Spring</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderSpring(OrderSpring object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Repository</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Repository</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringRepository(SpringRepository object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Repositories</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Repositories</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringRepositories(SpringRepositories object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rest Controller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rest Controller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRestController(RestController object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecification(Specification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicate(Predicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Search Criteria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Search Criteria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSearchCriteria(SearchCriteria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Autowired</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Autowired</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAutowired(Autowired object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Autowired Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Autowired Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAutowiredType(AutowiredType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequestMapping(RequestMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequestPart(RequestPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request Mapping Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request Mapping Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequestMappingType(RequestMappingType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExceptionHandler(ExceptionHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exception Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exception Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExceptionProcess(ExceptionProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringEntity(SpringEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringTable(SpringTable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Table Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Table Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringTableId(SpringTableId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generated Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generated Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneratedValue(GeneratedValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Columns</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Columns</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColumns(Columns object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Native Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Native Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameNativeQuery(NameNativeQuery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReact(React object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Modules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Modules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactModules(ReactModules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Sub Modules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Sub Modules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactSubModules(ReactSubModules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactConfiguration(ReactConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Dependencies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Dependencies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactDependencies(ReactDependencies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Dependencies Rules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Dependencies Rules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactDependenciesRules(ReactDependenciesRules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Dependencies Sub Rules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Dependencies Sub Rules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactDependenciesSubRules(ReactDependenciesSubRules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Dependencies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Dependencies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleDependencies(SingleDependencies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageName(PackageName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Version</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Version</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageVersion(PackageVersion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Configurations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Configurations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactConfigurations(ReactConfigurations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DOM Configurations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DOM Configurations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDOMConfigurations(DOMConfigurations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Components</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Components</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactComponents(ReactComponents object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Components Logic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Components Logic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentsLogic(ComponentsLogic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicContent(LogicContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Structure</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Structure</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicStructure(LogicStructure object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Components UI</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Components UI</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentsUI(ComponentsUI object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UI Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UI Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUIContent(UIContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>View Component Cont</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>View Component Cont</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseViewComponentCont(ViewComponentCont object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subcomponent Cont</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subcomponent Cont</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubcomponentCont(SubcomponentCont object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentClass(ComponentClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Imports</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Imports</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactImports(ReactImports object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Import Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Import Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactImportContent(ReactImportContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactFunctions(ReactFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Constructor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Constructor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactConstructor(ReactConstructor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateContent(StateContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Core Functions Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Core Functions Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoreFunctionsDeclaration(CoreFunctionsDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Props</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Props</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProps(Props object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Props Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Props Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropsType(PropsType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Core Functions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Core Functions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactCoreFunctions(ReactCoreFunctions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Components Styles</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Components Styles</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentsStyles(ComponentsStyles object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Components Styles Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Components Styles Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentsStylesContent(ComponentsStylesContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Style Properties</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Style Properties</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStyleProperties(StyleProperties object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Style Properties Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Style Properties Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStylePropertiesContent(StylePropertiesContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Actions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Actions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactActions(ReactActions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Actions Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Actions Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactActionsContent(ReactActionsContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Services Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Services Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactServicesType(ReactServicesType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Service Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Service Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactServiceContent(ReactServiceContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Service Cont Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Service Cont Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactServiceContRequest(ReactServiceContRequest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Service Request Props</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Service Request Props</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactServiceRequestProps(ReactServiceRequestProps object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Services Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Services Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactServicesRelation(ReactServicesRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reacts Relation Serv</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reacts Relation Serv</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactsRelationServ(ReactsRelationServ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Libraries</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Libraries</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactLibraries(ReactLibraries object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactLibrary(ReactLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactInfo(ReactInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React Information</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React Information</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactInformation(ReactInformation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postgre SQL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postgre SQL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostgreSQL(PostgreSQL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cluster</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cluster</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCluster(Cluster object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Database</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Database</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatabase(Database object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schema</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schema</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchema(Schema object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index p</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index p</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndex_p(Index_p object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>View Schema</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>View Schema</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseViewSchema(ViewSchema object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table p</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table p</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTable_p(Table_p object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foreign Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foreign Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForeignKey(ForeignKey object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foreign Key n</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foreign Key n</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForeignKey_n(ForeignKey_n object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Foreign Key Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Foreign Key Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForeignKeyRef(ForeignKeyRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Table p</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Table p</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefTable_p(RefTable_p object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Column</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Column</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseColumn(Column object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datatype DB</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datatype DB</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatatypeDB(DatatypeDB object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Row</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Row</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRow(Row object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Policy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Policy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePolicy(Policy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrigger(Trigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Postgres User</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Postgres User</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostgresUser(PostgresUser object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Privilege</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Privilege</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrivilege(Privilege object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClause(Clause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amazon Web Services</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amazon Web Services</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmazonWebServices(AmazonWebServices object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amazon Simple Storage Service</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amazon Simple Storage Service</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmazonSimpleStorageService(AmazonSimpleStorageService object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Batch Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Batch Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBatchOperation(BatchOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bucket</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bucket</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBucket(Bucket object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bucket Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bucket Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBucketAccess(BucketAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Public Access</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Public Access</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePublicAccess(PublicAccess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Objects Public</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Objects Public</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectsPublic(ObjectsPublic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bucket Objects Not Public</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bucket Objects Not Public</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBucketObjectsNotPublic(BucketObjectsNotPublic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Only Authorized</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Only Authorized</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOnlyAuthorized(OnlyAuthorized object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amazon Folder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amazon Folder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmazonFolder(AmazonFolder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amazon File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amazon File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmazonFile(AmazonFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Metadata</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Metadata</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMetadata(Metadata object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amazon Elastic Compute Cloud</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amazon Elastic Compute Cloud</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmazonElasticComputeCloud(AmazonElasticComputeCloud object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SoftGalleryLanguageSwitch
