/*
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SoftGalleryLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsDomainParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsArchitectureParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsTechnologyParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Model:
		//	'System' ':' '{'
		//	elements+=Domain
		//	elements+=Architecture
		//	elements+=Technology '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'System' ':' '{' elements+=Domain elements+=Architecture elements+=Technology '}'
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Domain
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Domain
		public RuleCall getElementsDomainParserRuleCall_3_0() { return cElementsDomainParserRuleCall_3_0; }
		
		//elements+=Architecture
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Architecture
		public RuleCall getElementsArchitectureParserRuleCall_4_0() { return cElementsArchitectureParserRuleCall_4_0; }
		
		//elements+=Technology
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Technology
		public RuleCall getElementsTechnologyParserRuleCall_5_0() { return cElementsTechnologyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntitydomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitydomainEntityParserRuleCall_4_0 = (RuleCall)cEntitydomainAssignment_4.eContents().get(0);
		private final Assignment cEntityfuncsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntityfuncsFunctionalityParserRuleCall_5_0 = (RuleCall)cEntityfuncsAssignment_5.eContents().get(0);
		private final Assignment cExceptionsdomainAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExceptionsdomainExceptionsDomainParserRuleCall_6_0 = (RuleCall)cExceptionsdomainAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ------------------------------
		//// Domain
		//// ------------------------------
		//Domain:
		//	'Domain' name=ID ':' '{'
		//	entitydomain+=Entity
		//	entityfuncs+=Functionality
		//	exceptionsdomain+=ExceptionsDomain
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' name=ID ':' '{' entitydomain+=Entity entityfuncs+=Functionality exceptionsdomain+=ExceptionsDomain '}'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//entitydomain+=Entity
		public Assignment getEntitydomainAssignment_4() { return cEntitydomainAssignment_4; }
		
		//Entity
		public RuleCall getEntitydomainEntityParserRuleCall_4_0() { return cEntitydomainEntityParserRuleCall_4_0; }
		
		//entityfuncs+=Functionality
		public Assignment getEntityfuncsAssignment_5() { return cEntityfuncsAssignment_5; }
		
		//Functionality
		public RuleCall getEntityfuncsFunctionalityParserRuleCall_5_0() { return cEntityfuncsFunctionalityParserRuleCall_5_0; }
		
		//exceptionsdomain+=ExceptionsDomain
		public Assignment getExceptionsdomainAssignment_6() { return cExceptionsdomainAssignment_6; }
		
		//ExceptionsDomain
		public RuleCall getExceptionsdomainExceptionsDomainParserRuleCall_6_0() { return cExceptionsdomainExceptionsDomainParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEntitiesParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	'Entities' ':' '{'
		//	elements+=Entities+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entities' ':' '{' elements+=Entities+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Entities'
		public Keyword getEntitiesKeyword_0() { return cEntitiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Entities+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Entities
		public RuleCall getElementsEntitiesParserRuleCall_3_0() { return cElementsEntitiesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Entities");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPhotoEntityKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cAtributePhotoAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAtributePhotoAtributePhotoParserRuleCall_0_3_0 = (RuleCall)cAtributePhotoAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlbumEntityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Assignment cAtributeAlbumAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAtributeAlbumAtributeAlbumParserRuleCall_1_3_0 = (RuleCall)cAtributeAlbumAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cUserEntityKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Assignment cAtributeUserDomainAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAtributeUserDomainAtributeUserDomainParserRuleCall_2_3_0 = (RuleCall)cAtributeUserDomainAssignment_2_3.eContents().get(0);
		
		//Entities:
		//	'PhotoEntity' ':' name=ID
		//	atributePhoto+=AtributePhoto+ |
		//	'AlbumEntity' ':' name=ID
		//	atributeAlbum+=AtributeAlbum+ |
		//	'UserEntity' ':' name=ID
		//	atributeUserDomain+=AtributeUserDomain+;
		@Override public ParserRule getRule() { return rule; }
		
		//'PhotoEntity' ':' name=ID atributePhoto+=AtributePhoto+ | 'AlbumEntity' ':' name=ID atributeAlbum+=AtributeAlbum+ |
		//'UserEntity' ':' name=ID atributeUserDomain+=AtributeUserDomain+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PhotoEntity' ':' name=ID atributePhoto+=AtributePhoto+
		public Group getGroup_0() { return cGroup_0; }
		
		//'PhotoEntity'
		public Keyword getPhotoEntityKeyword_0_0() { return cPhotoEntityKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//atributePhoto+=AtributePhoto+
		public Assignment getAtributePhotoAssignment_0_3() { return cAtributePhotoAssignment_0_3; }
		
		//AtributePhoto
		public RuleCall getAtributePhotoAtributePhotoParserRuleCall_0_3_0() { return cAtributePhotoAtributePhotoParserRuleCall_0_3_0; }
		
		//'AlbumEntity' ':' name=ID atributeAlbum+=AtributeAlbum+
		public Group getGroup_1() { return cGroup_1; }
		
		//'AlbumEntity'
		public Keyword getAlbumEntityKeyword_1_0() { return cAlbumEntityKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//atributeAlbum+=AtributeAlbum+
		public Assignment getAtributeAlbumAssignment_1_3() { return cAtributeAlbumAssignment_1_3; }
		
		//AtributeAlbum
		public RuleCall getAtributeAlbumAtributeAlbumParserRuleCall_1_3_0() { return cAtributeAlbumAtributeAlbumParserRuleCall_1_3_0; }
		
		//'UserEntity' ':' name=ID atributeUserDomain+=AtributeUserDomain+
		public Group getGroup_2() { return cGroup_2; }
		
		//'UserEntity'
		public Keyword getUserEntityKeyword_2_0() { return cUserEntityKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }
		
		//atributeUserDomain+=AtributeUserDomain+
		public Assignment getAtributeUserDomainAssignment_2_3() { return cAtributeUserDomainAssignment_2_3; }
		
		//AtributeUserDomain
		public RuleCall getAtributeUserDomainAtributeUserDomainParserRuleCall_2_3_0() { return cAtributeUserDomainAtributeUserDomainParserRuleCall_2_3_0; }
	}
	public class AtributePhotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AtributePhoto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNamePhotoKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUrlPhotoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAlbumIdPhotoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//AtributePhoto:
		//	'namePhoto' name=ID |
		//	'urlPhoto' name=ID |
		//	'albumIdPhoto' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'namePhoto' name=ID | 'urlPhoto' name=ID | 'albumIdPhoto' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'namePhoto' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'namePhoto'
		public Keyword getNamePhotoKeyword_0_0() { return cNamePhotoKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'urlPhoto' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'urlPhoto'
		public Keyword getUrlPhotoKeyword_1_0() { return cUrlPhotoKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'albumIdPhoto' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'albumIdPhoto'
		public Keyword getAlbumIdPhotoKeyword_2_0() { return cAlbumIdPhotoKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}
	public class AtributeAlbumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AtributeAlbum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNameAlbumKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUserIdAlbumKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//AtributeAlbum:
		//	'nameAlbum' name=ID |
		//	'userIdAlbum' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'nameAlbum' name=ID | 'userIdAlbum' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nameAlbum' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'nameAlbum'
		public Keyword getNameAlbumKeyword_0_0() { return cNameAlbumKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'userIdAlbum' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'userIdAlbum'
		public Keyword getUserIdAlbumKeyword_1_0() { return cUserIdAlbumKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class AtributeUserDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AtributeUserDomain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUserNameUserKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFirstNameUserKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLastNameUserKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cProfileDescriptionUserKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cPasswordUserKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cEmailUserKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		
		//AtributeUserDomain:
		//	'userNameUser' name=ID |
		//	'firstNameUser' name=ID |
		//	'lastNameUser' name=ID |
		//	'profileDescriptionUser' name=ID |
		//	'passwordUser' name=ID |
		//	'emailUser' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'userNameUser' name=ID | 'firstNameUser' name=ID | 'lastNameUser' name=ID | 'profileDescriptionUser' name=ID |
		//'passwordUser' name=ID | 'emailUser' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'userNameUser' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'userNameUser'
		public Keyword getUserNameUserKeyword_0_0() { return cUserNameUserKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'firstNameUser' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'firstNameUser'
		public Keyword getFirstNameUserKeyword_1_0() { return cFirstNameUserKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'lastNameUser' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'lastNameUser'
		public Keyword getLastNameUserKeyword_2_0() { return cLastNameUserKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'profileDescriptionUser' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'profileDescriptionUser'
		public Keyword getProfileDescriptionUserKeyword_3_0() { return cProfileDescriptionUserKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'passwordUser' name=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//'passwordUser'
		public Keyword getPasswordUserKeyword_4_0() { return cPasswordUserKeyword_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//'emailUser' name=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//'emailUser'
		public Keyword getEmailUserKeyword_5_0() { return cEmailUserKeyword_5_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }
	}
	public class FunctionalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Functionality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionalitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsFunctionalitiesParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Functionality:
		//	'Functionalities' ':' '{'
		//	elements+=Functionalities '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Functionalities' ':' '{' elements+=Functionalities '}'
		public Group getGroup() { return cGroup; }
		
		//'Functionalities'
		public Keyword getFunctionalitiesKeyword_0() { return cFunctionalitiesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Functionalities
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Functionalities
		public RuleCall getElementsFunctionalitiesParserRuleCall_3_0() { return cElementsFunctionalitiesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FunctionalitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Functionalities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsProfileManagementParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAppAccessParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAlbumManagementParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Assignment cResourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResourcesPhotoActionsParserRuleCall_3_0 = (RuleCall)cResourcesAssignment_3.eContents().get(0);
		private final Assignment cAditionalsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAditionalsLandingActionsParserRuleCall_4_0 = (RuleCall)cAditionalsAssignment_4.eContents().get(0);
		
		//Functionalities:
		//	functions+=ProfileManagement
		//	elements+=AppAccess
		//	items+=AlbumManagement
		//	resources+=PhotoActions
		//	aditionals+=LandingActions;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=ProfileManagement elements+=AppAccess items+=AlbumManagement resources+=PhotoActions
		//aditionals+=LandingActions
		public Group getGroup() { return cGroup; }
		
		//functions+=ProfileManagement
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }
		
		//ProfileManagement
		public RuleCall getFunctionsProfileManagementParserRuleCall_0_0() { return cFunctionsProfileManagementParserRuleCall_0_0; }
		
		//elements+=AppAccess
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//AppAccess
		public RuleCall getElementsAppAccessParserRuleCall_1_0() { return cElementsAppAccessParserRuleCall_1_0; }
		
		//items+=AlbumManagement
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AlbumManagement
		public RuleCall getItemsAlbumManagementParserRuleCall_2_0() { return cItemsAlbumManagementParserRuleCall_2_0; }
		
		//resources+=PhotoActions
		public Assignment getResourcesAssignment_3() { return cResourcesAssignment_3; }
		
		//PhotoActions
		public RuleCall getResourcesPhotoActionsParserRuleCall_3_0() { return cResourcesPhotoActionsParserRuleCall_3_0; }
		
		//aditionals+=LandingActions
		public Assignment getAditionalsAssignment_4() { return cAditionalsAssignment_4; }
		
		//LandingActions
		public RuleCall getAditionalsLandingActionsParserRuleCall_4_0() { return cAditionalsLandingActionsParserRuleCall_4_0; }
	}
	public class ProfileManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ProfileManagement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfileManagementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsProfileManagementFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//ProfileManagement:
		//	'ProfileManagement' ':'
		//	items+=ProfileManagementFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'ProfileManagement' ':' items+=ProfileManagementFunctions
		public Group getGroup() { return cGroup; }
		
		//'ProfileManagement'
		public Keyword getProfileManagementKeyword_0() { return cProfileManagementKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=ProfileManagementFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//ProfileManagementFunctions
		public RuleCall getItemsProfileManagementFunctionsParserRuleCall_2_0() { return cItemsProfileManagementFunctionsParserRuleCall_2_0; }
	}
	public class ProfileManagementFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ProfileManagementFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewProfilePhotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewprofileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cViewprofileNameIDTerminalRuleCall_1_0 = (RuleCall)cViewprofileNameAssignment_1.eContents().get(0);
		private final Keyword cEditProfileInfoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEditProfileNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEditProfileNameIDTerminalRuleCall_3_0 = (RuleCall)cEditProfileNameAssignment_3.eContents().get(0);
		
		//ProfileManagementFunctions:
		//	'ViewProfilePhoto' viewprofileName=ID
		//	'EditProfileInfo' editProfileName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewProfilePhoto' viewprofileName=ID 'EditProfileInfo' editProfileName=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewProfilePhoto'
		public Keyword getViewProfilePhotoKeyword_0() { return cViewProfilePhotoKeyword_0; }
		
		//viewprofileName=ID
		public Assignment getViewprofileNameAssignment_1() { return cViewprofileNameAssignment_1; }
		
		//ID
		public RuleCall getViewprofileNameIDTerminalRuleCall_1_0() { return cViewprofileNameIDTerminalRuleCall_1_0; }
		
		//'EditProfileInfo'
		public Keyword getEditProfileInfoKeyword_2() { return cEditProfileInfoKeyword_2; }
		
		//editProfileName=ID
		public Assignment getEditProfileNameAssignment_3() { return cEditProfileNameAssignment_3; }
		
		//ID
		public RuleCall getEditProfileNameIDTerminalRuleCall_3_0() { return cEditProfileNameIDTerminalRuleCall_3_0; }
	}
	public class AppAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AppAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAppAccessFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//AppAccess:
		//	'AppAccess' ':'
		//	items+=AppAccessFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'AppAccess' ':' items+=AppAccessFunctions
		public Group getGroup() { return cGroup; }
		
		//'AppAccess'
		public Keyword getAppAccessKeyword_0() { return cAppAccessKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=AppAccessFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AppAccessFunctions
		public RuleCall getItemsAppAccessFunctionsParserRuleCall_2_0() { return cItemsAppAccessFunctionsParserRuleCall_2_0; }
	}
	public class AppAccessFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AppAccessFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoginNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoginNameIDTerminalRuleCall_1_0 = (RuleCall)cLoginNameAssignment_1.eContents().get(0);
		private final Keyword cRegisterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRegisterNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegisterNameIDTerminalRuleCall_3_0 = (RuleCall)cRegisterNameAssignment_3.eContents().get(0);
		
		//AppAccessFunctions:
		//	'Login' loginName=ID
		//	'Register' registerName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Login' loginName=ID 'Register' registerName=ID
		public Group getGroup() { return cGroup; }
		
		//'Login'
		public Keyword getLoginKeyword_0() { return cLoginKeyword_0; }
		
		//loginName=ID
		public Assignment getLoginNameAssignment_1() { return cLoginNameAssignment_1; }
		
		//ID
		public RuleCall getLoginNameIDTerminalRuleCall_1_0() { return cLoginNameIDTerminalRuleCall_1_0; }
		
		//'Register'
		public Keyword getRegisterKeyword_2() { return cRegisterKeyword_2; }
		
		//registerName=ID
		public Assignment getRegisterNameAssignment_3() { return cRegisterNameAssignment_3; }
		
		//ID
		public RuleCall getRegisterNameIDTerminalRuleCall_3_0() { return cRegisterNameIDTerminalRuleCall_3_0; }
	}
	public class AlbumManagementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AlbumManagement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlbumManagementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsAlbumManagementFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//AlbumManagement:
		//	'AlbumManagement' ':'
		//	items+=AlbumManagementFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'AlbumManagement' ':' items+=AlbumManagementFunctions
		public Group getGroup() { return cGroup; }
		
		//'AlbumManagement'
		public Keyword getAlbumManagementKeyword_0() { return cAlbumManagementKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=AlbumManagementFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//AlbumManagementFunctions
		public RuleCall getItemsAlbumManagementFunctionsParserRuleCall_2_0() { return cItemsAlbumManagementFunctionsParserRuleCall_2_0; }
	}
	public class AlbumManagementFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AlbumManagementFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateAlbumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCreatedAlbNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCreatedAlbNameIDTerminalRuleCall_1_0 = (RuleCall)cCreatedAlbNameAssignment_1.eContents().get(0);
		private final Keyword cSelectAlbumKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSelectAlbNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectAlbNameIDTerminalRuleCall_3_0 = (RuleCall)cSelectAlbNameAssignment_3.eContents().get(0);
		
		//AlbumManagementFunctions:
		//	'CreateAlbum' createdAlbName=ID
		//	'SelectAlbum' selectAlbName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'CreateAlbum' createdAlbName=ID 'SelectAlbum' selectAlbName=ID
		public Group getGroup() { return cGroup; }
		
		//'CreateAlbum'
		public Keyword getCreateAlbumKeyword_0() { return cCreateAlbumKeyword_0; }
		
		//createdAlbName=ID
		public Assignment getCreatedAlbNameAssignment_1() { return cCreatedAlbNameAssignment_1; }
		
		//ID
		public RuleCall getCreatedAlbNameIDTerminalRuleCall_1_0() { return cCreatedAlbNameIDTerminalRuleCall_1_0; }
		
		//'SelectAlbum'
		public Keyword getSelectAlbumKeyword_2() { return cSelectAlbumKeyword_2; }
		
		//selectAlbName=ID
		public Assignment getSelectAlbNameAssignment_3() { return cSelectAlbNameAssignment_3; }
		
		//ID
		public RuleCall getSelectAlbNameIDTerminalRuleCall_3_0() { return cSelectAlbNameIDTerminalRuleCall_3_0; }
	}
	public class PhotoActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PhotoActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhotoActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsPhotoActionsFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//PhotoActions:
		//	'PhotoActions' ':'
		//	items+=PhotoActionsFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'PhotoActions' ':' items+=PhotoActionsFunctions
		public Group getGroup() { return cGroup; }
		
		//'PhotoActions'
		public Keyword getPhotoActionsKeyword_0() { return cPhotoActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=PhotoActionsFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//PhotoActionsFunctions
		public RuleCall getItemsPhotoActionsFunctionsParserRuleCall_2_0() { return cItemsPhotoActionsFunctionsParserRuleCall_2_0; }
	}
	public class PhotoActionsFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PhotoActionsFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewAllPhotosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameGenericoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameGenericoIDTerminalRuleCall_1_0 = (RuleCall)cNameGenericoAssignment_1.eContents().get(0);
		private final Keyword cViewExtendedPhotoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamePhotoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePhotoIDTerminalRuleCall_3_0 = (RuleCall)cNamePhotoAssignment_3.eContents().get(0);
		private final Keyword cLoadPhotoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameLoadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameLoadIDTerminalRuleCall_5_0 = (RuleCall)cNameLoadAssignment_5.eContents().get(0);
		
		//PhotoActionsFunctions:
		//	'ViewAllPhotos' nameGenerico=ID
		//	'ViewExtendedPhoto' namePhoto=ID
		//	'LoadPhoto' nameLoad=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewAllPhotos' nameGenerico=ID 'ViewExtendedPhoto' namePhoto=ID 'LoadPhoto' nameLoad=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewAllPhotos'
		public Keyword getViewAllPhotosKeyword_0() { return cViewAllPhotosKeyword_0; }
		
		//nameGenerico=ID
		public Assignment getNameGenericoAssignment_1() { return cNameGenericoAssignment_1; }
		
		//ID
		public RuleCall getNameGenericoIDTerminalRuleCall_1_0() { return cNameGenericoIDTerminalRuleCall_1_0; }
		
		//'ViewExtendedPhoto'
		public Keyword getViewExtendedPhotoKeyword_2() { return cViewExtendedPhotoKeyword_2; }
		
		//namePhoto=ID
		public Assignment getNamePhotoAssignment_3() { return cNamePhotoAssignment_3; }
		
		//ID
		public RuleCall getNamePhotoIDTerminalRuleCall_3_0() { return cNamePhotoIDTerminalRuleCall_3_0; }
		
		//'LoadPhoto'
		public Keyword getLoadPhotoKeyword_4() { return cLoadPhotoKeyword_4; }
		
		//nameLoad=ID
		public Assignment getNameLoadAssignment_5() { return cNameLoadAssignment_5; }
		
		//ID
		public RuleCall getNameLoadIDTerminalRuleCall_5_0() { return cNameLoadIDTerminalRuleCall_5_0; }
	}
	public class LandingActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LandingActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLandingActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsLandingFunctionsParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		
		//LandingActions:
		//	'LandingActions' ':'
		//	items+=LandingFunctions;
		@Override public ParserRule getRule() { return rule; }
		
		//'LandingActions' ':' items+=LandingFunctions
		public Group getGroup() { return cGroup; }
		
		//'LandingActions'
		public Keyword getLandingActionsKeyword_0() { return cLandingActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=LandingFunctions
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//LandingFunctions
		public RuleCall getItemsLandingFunctionsParserRuleCall_2_0() { return cItemsLandingFunctionsParserRuleCall_2_0; }
	}
	public class LandingFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LandingFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewCarouselKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameCarouselNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCarouselNameIDTerminalRuleCall_1_0 = (RuleCall)cNameCarouselNameAssignment_1.eContents().get(0);
		private final Keyword cPassPhotoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPassPhotoNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPassPhotoNameIDTerminalRuleCall_3_0 = (RuleCall)cPassPhotoNameAssignment_3.eContents().get(0);
		
		//LandingFunctions:
		//	'ViewCarousel' nameCarouselName=ID
		//	'PassPhoto' passPhotoName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewCarousel' nameCarouselName=ID 'PassPhoto' passPhotoName=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewCarousel'
		public Keyword getViewCarouselKeyword_0() { return cViewCarouselKeyword_0; }
		
		//nameCarouselName=ID
		public Assignment getNameCarouselNameAssignment_1() { return cNameCarouselNameAssignment_1; }
		
		//ID
		public RuleCall getNameCarouselNameIDTerminalRuleCall_1_0() { return cNameCarouselNameIDTerminalRuleCall_1_0; }
		
		//'PassPhoto'
		public Keyword getPassPhotoKeyword_2() { return cPassPhotoKeyword_2; }
		
		//passPhotoName=ID
		public Assignment getPassPhotoNameAssignment_3() { return cPassPhotoNameAssignment_3; }
		
		//ID
		public RuleCall getPassPhotoNameIDTerminalRuleCall_3_0() { return cPassPhotoNameIDTerminalRuleCall_3_0; }
	}
	public class ExceptionsDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ExceptionsDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainExceptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExceptionsTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExceptionsTypeExceptionsTypeParserRuleCall_3_0 = (RuleCall)cExceptionsTypeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExceptionsDomain:
		//	'DomainExceptions' ':' '{'
		//	exceptionsType+=ExceptionsType+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DomainExceptions' ':' '{' exceptionsType+=ExceptionsType+ '}'
		public Group getGroup() { return cGroup; }
		
		//'DomainExceptions'
		public Keyword getDomainExceptionsKeyword_0() { return cDomainExceptionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//exceptionsType+=ExceptionsType+
		public Assignment getExceptionsTypeAssignment_3() { return cExceptionsTypeAssignment_3; }
		
		//ExceptionsType
		public RuleCall getExceptionsTypeExceptionsTypeParserRuleCall_3_0() { return cExceptionsTypeExceptionsTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExceptionsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ExceptionsType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPhotoExceptionKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPhotoExceptionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPhotoExceptionPhotoExceptionParserRuleCall_0_2_0 = (RuleCall)cPhotoExceptionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlbumExceptionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAlbumExceptionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAlbumExceptionAlbumExceptionParserRuleCall_1_2_0 = (RuleCall)cAlbumExceptionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cUserExceptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUserExceptionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUserExceptionUserExceptionParserRuleCall_2_2_0 = (RuleCall)cUserExceptionAssignment_2_2.eContents().get(0);
		
		//ExceptionsType:
		//	'PhotoException' ':' photoException+=PhotoException+ |
		//	'AlbumException' ':' albumException+=AlbumException+ |
		//	'UserException' ':' userException+=UserException+;
		@Override public ParserRule getRule() { return rule; }
		
		//'PhotoException' ':' photoException+=PhotoException+ | 'AlbumException' ':' albumException+=AlbumException+ |
		//'UserException' ':' userException+=UserException+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PhotoException' ':' photoException+=PhotoException+
		public Group getGroup_0() { return cGroup_0; }
		
		//'PhotoException'
		public Keyword getPhotoExceptionKeyword_0_0() { return cPhotoExceptionKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//photoException+=PhotoException+
		public Assignment getPhotoExceptionAssignment_0_2() { return cPhotoExceptionAssignment_0_2; }
		
		//PhotoException
		public RuleCall getPhotoExceptionPhotoExceptionParserRuleCall_0_2_0() { return cPhotoExceptionPhotoExceptionParserRuleCall_0_2_0; }
		
		//'AlbumException' ':' albumException+=AlbumException+
		public Group getGroup_1() { return cGroup_1; }
		
		//'AlbumException'
		public Keyword getAlbumExceptionKeyword_1_0() { return cAlbumExceptionKeyword_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//albumException+=AlbumException+
		public Assignment getAlbumExceptionAssignment_1_2() { return cAlbumExceptionAssignment_1_2; }
		
		//AlbumException
		public RuleCall getAlbumExceptionAlbumExceptionParserRuleCall_1_2_0() { return cAlbumExceptionAlbumExceptionParserRuleCall_1_2_0; }
		
		//'UserException' ':' userException+=UserException+
		public Group getGroup_2() { return cGroup_2; }
		
		//'UserException'
		public Keyword getUserExceptionKeyword_2_0() { return cUserExceptionKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//userException+=UserException+
		public Assignment getUserExceptionAssignment_2_2() { return cUserExceptionAssignment_2_2; }
		
		//UserException
		public RuleCall getUserExceptionUserExceptionParserRuleCall_2_2_0() { return cUserExceptionUserExceptionParserRuleCall_2_2_0; }
	}
	public class PhotoExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PhotoException");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPhotoNotFoundKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPhotoUploadErrorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPhotoNotCreatedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cPhotoNotDeletedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		
		//PhotoException:
		//	'PhotoNotFound' name=ID |
		//	'PhotoUploadError' name=ID |
		//	'PhotoNotCreated' name=ID |
		//	'PhotoNotDeleted' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PhotoNotFound' name=ID | 'PhotoUploadError' name=ID | 'PhotoNotCreated' name=ID | 'PhotoNotDeleted' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PhotoNotFound' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'PhotoNotFound'
		public Keyword getPhotoNotFoundKeyword_0_0() { return cPhotoNotFoundKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'PhotoUploadError' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'PhotoUploadError'
		public Keyword getPhotoUploadErrorKeyword_1_0() { return cPhotoUploadErrorKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'PhotoNotCreated' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'PhotoNotCreated'
		public Keyword getPhotoNotCreatedKeyword_2_0() { return cPhotoNotCreatedKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'PhotoNotDeleted' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'PhotoNotDeleted'
		public Keyword getPhotoNotDeletedKeyword_3_0() { return cPhotoNotDeletedKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
	}
	public class AlbumExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AlbumException");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAlbumNotFoundKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPhotosFromAlbumNotFoundKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAlbumHasNoPhotosKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMissingParametersForNewAlbumKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cUserIdIsNotNumberKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAlbumNotCreatedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		
		//AlbumException:
		//	'AlbumNotFound' name=ID |
		//	'PhotosFromAlbumNotFound' name=ID |
		//	'AlbumHasNoPhotos' name=ID |
		//	'MissingParametersForNewAlbum' name=ID |
		//	'UserIdIsNotNumber' name=ID |
		//	'AlbumNotCreated' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AlbumNotFound' name=ID | 'PhotosFromAlbumNotFound' name=ID | 'AlbumHasNoPhotos' name=ID |
		//'MissingParametersForNewAlbum' name=ID | 'UserIdIsNotNumber' name=ID | 'AlbumNotCreated' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AlbumNotFound' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'AlbumNotFound'
		public Keyword getAlbumNotFoundKeyword_0_0() { return cAlbumNotFoundKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'PhotosFromAlbumNotFound' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'PhotosFromAlbumNotFound'
		public Keyword getPhotosFromAlbumNotFoundKeyword_1_0() { return cPhotosFromAlbumNotFoundKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'AlbumHasNoPhotos' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'AlbumHasNoPhotos'
		public Keyword getAlbumHasNoPhotosKeyword_2_0() { return cAlbumHasNoPhotosKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'MissingParametersForNewAlbum' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'MissingParametersForNewAlbum'
		public Keyword getMissingParametersForNewAlbumKeyword_3_0() { return cMissingParametersForNewAlbumKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'UserIdIsNotNumber' name=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//'UserIdIsNotNumber'
		public Keyword getUserIdIsNotNumberKeyword_4_0() { return cUserIdIsNotNumberKeyword_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//'AlbumNotCreated' name=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//'AlbumNotCreated'
		public Keyword getAlbumNotCreatedKeyword_5_0() { return cAlbumNotCreatedKeyword_5_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }
	}
	public class UserExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.UserException");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUserNotFoundKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlbumsFromUserNotFoundKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cUserHasNoAlbumsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cUserHasNoPhotosKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cMissingParametersForNewUserKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cUserNotCreatedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cAlbumNotCreatedForNewUserKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cMissingParametersForEditUserKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_7_1_0 = (RuleCall)cNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cWrongLoginInfoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_8_1_0 = (RuleCall)cNameAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cMissingParametersForLoginKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_9_1_0 = (RuleCall)cNameAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cUserIdIsNotNumberKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_10_1_0 = (RuleCall)cNameAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cUserToEditDoesNotExistKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cNameAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_11_1_0 = (RuleCall)cNameAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cUserNotEditedKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cNameAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_12_1_0 = (RuleCall)cNameAssignment_12_1.eContents().get(0);
		
		//UserException:
		//	'UserNotFound' name=ID |
		//	'AlbumsFromUserNotFound' name=ID |
		//	'UserHasNoAlbums' name=ID |
		//	'UserHasNoPhotos' name=ID |
		//	'MissingParametersForNewUser' name=ID |
		//	'UserNotCreated' name=ID |
		//	'AlbumNotCreatedForNewUser' name=ID |
		//	'MissingParametersForEditUser' name=ID |
		//	'WrongLoginInfo' name=ID |
		//	'MissingParametersForLogin' name=ID |
		//	'UserIdIsNotNumber' name=ID |
		//	'UserToEditDoesNotExist' name=ID |
		//	'UserNotEdited' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'UserNotFound' name=ID | 'AlbumsFromUserNotFound' name=ID | 'UserHasNoAlbums' name=ID | 'UserHasNoPhotos' name=ID |
		//'MissingParametersForNewUser' name=ID | 'UserNotCreated' name=ID | 'AlbumNotCreatedForNewUser' name=ID |
		//'MissingParametersForEditUser' name=ID | 'WrongLoginInfo' name=ID | 'MissingParametersForLogin' name=ID |
		//'UserIdIsNotNumber' name=ID | 'UserToEditDoesNotExist' name=ID | 'UserNotEdited' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'UserNotFound' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'UserNotFound'
		public Keyword getUserNotFoundKeyword_0_0() { return cUserNotFoundKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'AlbumsFromUserNotFound' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'AlbumsFromUserNotFound'
		public Keyword getAlbumsFromUserNotFoundKeyword_1_0() { return cAlbumsFromUserNotFoundKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'UserHasNoAlbums' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'UserHasNoAlbums'
		public Keyword getUserHasNoAlbumsKeyword_2_0() { return cUserHasNoAlbumsKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'UserHasNoPhotos' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'UserHasNoPhotos'
		public Keyword getUserHasNoPhotosKeyword_3_0() { return cUserHasNoPhotosKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'MissingParametersForNewUser' name=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//'MissingParametersForNewUser'
		public Keyword getMissingParametersForNewUserKeyword_4_0() { return cMissingParametersForNewUserKeyword_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//'UserNotCreated' name=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//'UserNotCreated'
		public Keyword getUserNotCreatedKeyword_5_0() { return cUserNotCreatedKeyword_5_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }
		
		//'AlbumNotCreatedForNewUser' name=ID
		public Group getGroup_6() { return cGroup_6; }
		
		//'AlbumNotCreatedForNewUser'
		public Keyword getAlbumNotCreatedForNewUserKeyword_6_0() { return cAlbumNotCreatedForNewUserKeyword_6_0; }
		
		//name=ID
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_1_0() { return cNameIDTerminalRuleCall_6_1_0; }
		
		//'MissingParametersForEditUser' name=ID
		public Group getGroup_7() { return cGroup_7; }
		
		//'MissingParametersForEditUser'
		public Keyword getMissingParametersForEditUserKeyword_7_0() { return cMissingParametersForEditUserKeyword_7_0; }
		
		//name=ID
		public Assignment getNameAssignment_7_1() { return cNameAssignment_7_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_7_1_0() { return cNameIDTerminalRuleCall_7_1_0; }
		
		//'WrongLoginInfo' name=ID
		public Group getGroup_8() { return cGroup_8; }
		
		//'WrongLoginInfo'
		public Keyword getWrongLoginInfoKeyword_8_0() { return cWrongLoginInfoKeyword_8_0; }
		
		//name=ID
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_8_1_0() { return cNameIDTerminalRuleCall_8_1_0; }
		
		//'MissingParametersForLogin' name=ID
		public Group getGroup_9() { return cGroup_9; }
		
		//'MissingParametersForLogin'
		public Keyword getMissingParametersForLoginKeyword_9_0() { return cMissingParametersForLoginKeyword_9_0; }
		
		//name=ID
		public Assignment getNameAssignment_9_1() { return cNameAssignment_9_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_9_1_0() { return cNameIDTerminalRuleCall_9_1_0; }
		
		//'UserIdIsNotNumber' name=ID
		public Group getGroup_10() { return cGroup_10; }
		
		//'UserIdIsNotNumber'
		public Keyword getUserIdIsNotNumberKeyword_10_0() { return cUserIdIsNotNumberKeyword_10_0; }
		
		//name=ID
		public Assignment getNameAssignment_10_1() { return cNameAssignment_10_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_10_1_0() { return cNameIDTerminalRuleCall_10_1_0; }
		
		//'UserToEditDoesNotExist' name=ID
		public Group getGroup_11() { return cGroup_11; }
		
		//'UserToEditDoesNotExist'
		public Keyword getUserToEditDoesNotExistKeyword_11_0() { return cUserToEditDoesNotExistKeyword_11_0; }
		
		//name=ID
		public Assignment getNameAssignment_11_1() { return cNameAssignment_11_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_11_1_0() { return cNameIDTerminalRuleCall_11_1_0; }
		
		//'UserNotEdited' name=ID
		public Group getGroup_12() { return cGroup_12; }
		
		//'UserNotEdited'
		public Keyword getUserNotEditedKeyword_12_0() { return cUserNotEditedKeyword_12_0; }
		
		//name=ID
		public Assignment getNameAssignment_12_1() { return cNameAssignment_12_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_12_1_0() { return cNameIDTerminalRuleCall_12_1_0; }
	}
	public class ArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Architecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsNTiersParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsNTiersConnectionsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ------------------------------
		//// Architecture
		//// ------------------------------
		//Architecture:
		//	'Architecture:' '{'
		//	elements+=NTiers+
		//	elements+=NTiersConnections+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Architecture:' '{' elements+=NTiers+ elements+=NTiersConnections+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Architecture:'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//elements+=NTiers+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//NTiers
		public RuleCall getElementsNTiersParserRuleCall_2_0() { return cElementsNTiersParserRuleCall_2_0; }
		
		//elements+=NTiersConnections+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//NTiersConnections
		public RuleCall getElementsNTiersConnectionsParserRuleCall_3_0() { return cElementsNTiersConnectionsParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NTiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsLayerParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Keyword cLayersRelationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsLayerRelationsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cArchitectureComponentsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsArchitectureComponentsParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		
		//NTiers:
		//	'Layers'
		//	elements+=Layer+
		//	'LayersRelations'
		//	elements+=LayerRelations+
		//	'ArchitectureComponents'
		//	elements+=ArchitectureComponents+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Layers' elements+=Layer+ 'LayersRelations' elements+=LayerRelations+ 'ArchitectureComponents'
		//elements+=ArchitectureComponents+
		public Group getGroup() { return cGroup; }
		
		//'Layers'
		public Keyword getLayersKeyword_0() { return cLayersKeyword_0; }
		
		//elements+=Layer+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Layer
		public RuleCall getElementsLayerParserRuleCall_1_0() { return cElementsLayerParserRuleCall_1_0; }
		
		//'LayersRelations'
		public Keyword getLayersRelationsKeyword_2() { return cLayersRelationsKeyword_2; }
		
		//elements+=LayerRelations+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//LayerRelations
		public RuleCall getElementsLayerRelationsParserRuleCall_3_0() { return cElementsLayerRelationsParserRuleCall_3_0; }
		
		//'ArchitectureComponents'
		public Keyword getArchitectureComponentsKeyword_4() { return cArchitectureComponentsKeyword_4; }
		
		//elements+=ArchitectureComponents+
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//ArchitectureComponents
		public RuleCall getElementsArchitectureComponentsParserRuleCall_5_0() { return cElementsArchitectureComponentsParserRuleCall_5_0; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Layer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayerPresentationLayerParserRuleCall_0_0 = (RuleCall)cLayerAssignment_0.eContents().get(0);
		private final Assignment cLayerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayerBusinessLogicLayerParserRuleCall_1_0 = (RuleCall)cLayerAssignment_1.eContents().get(0);
		private final Assignment cLayerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayerDataPersistenceLayerParserRuleCall_2_0 = (RuleCall)cLayerAssignment_2.eContents().get(0);
		
		//Layer:
		//	layer+=PresentationLayer
		//	layer+=BusinessLogicLayer
		//	layer+=DataPersistenceLayer;
		@Override public ParserRule getRule() { return rule; }
		
		//layer+=PresentationLayer layer+=BusinessLogicLayer layer+=DataPersistenceLayer
		public Group getGroup() { return cGroup; }
		
		//layer+=PresentationLayer
		public Assignment getLayerAssignment_0() { return cLayerAssignment_0; }
		
		//PresentationLayer
		public RuleCall getLayerPresentationLayerParserRuleCall_0_0() { return cLayerPresentationLayerParserRuleCall_0_0; }
		
		//layer+=BusinessLogicLayer
		public Assignment getLayerAssignment_1() { return cLayerAssignment_1; }
		
		//BusinessLogicLayer
		public RuleCall getLayerBusinessLogicLayerParserRuleCall_1_0() { return cLayerBusinessLogicLayerParserRuleCall_1_0; }
		
		//layer+=DataPersistenceLayer
		public Assignment getLayerAssignment_2() { return cLayerAssignment_2; }
		
		//DataPersistenceLayer
		public RuleCall getLayerDataPersistenceLayerParserRuleCall_2_0() { return cLayerDataPersistenceLayerParserRuleCall_2_0; }
	}
	public class PresentationLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PresentationLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentationLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPresentationLayerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPresentationLayerPresentationContentParserRuleCall_1_0 = (RuleCall)cPresentationLayerAssignment_1.eContents().get(0);
		private final Assignment cPresentationLayerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPresentationLayerSegmentStructureParserRuleCall_2_0 = (RuleCall)cPresentationLayerAssignment_2.eContents().get(0);
		
		//PresentationLayer:
		//	'PresentationLayer'
		//	presentationLayer+=PresentationContent
		//	presentationLayer+=SegmentStructure;
		@Override public ParserRule getRule() { return rule; }
		
		//'PresentationLayer' presentationLayer+=PresentationContent presentationLayer+=SegmentStructure
		public Group getGroup() { return cGroup; }
		
		//'PresentationLayer'
		public Keyword getPresentationLayerKeyword_0() { return cPresentationLayerKeyword_0; }
		
		//presentationLayer+=PresentationContent
		public Assignment getPresentationLayerAssignment_1() { return cPresentationLayerAssignment_1; }
		
		//PresentationContent
		public RuleCall getPresentationLayerPresentationContentParserRuleCall_1_0() { return cPresentationLayerPresentationContentParserRuleCall_1_0; }
		
		//presentationLayer+=SegmentStructure
		public Assignment getPresentationLayerAssignment_2() { return cPresentationLayerAssignment_2; }
		
		//SegmentStructure
		public RuleCall getPresentationLayerSegmentStructureParserRuleCall_2_0() { return cPresentationLayerSegmentStructureParserRuleCall_2_0; }
	}
	public class PresentationContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PresentationContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentationSegmentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsPresentationSegmentsParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//PresentationContent:
		//	'PresentationSegments'
		//	elements+=PresentationSegments;
		@Override public ParserRule getRule() { return rule; }
		
		//'PresentationSegments' elements+=PresentationSegments
		public Group getGroup() { return cGroup; }
		
		//'PresentationSegments'
		public Keyword getPresentationSegmentsKeyword_0() { return cPresentationSegmentsKeyword_0; }
		
		//elements+=PresentationSegments
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//PresentationSegments
		public RuleCall getElementsPresentationSegmentsParserRuleCall_1_0() { return cElementsPresentationSegmentsParserRuleCall_1_0; }
	}
	public class PresentationSegmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PresentationSegments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresentationViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPresentationSNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPresentationSNameIDTerminalRuleCall_1_0 = (RuleCall)cPresentationSNameAssignment_1.eContents().get(0);
		private final Keyword cPresentationComponentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPresentationCNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPresentationCNameIDTerminalRuleCall_3_0 = (RuleCall)cPresentationCNameAssignment_3.eContents().get(0);
		private final Keyword cPresentationActionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPresentationANameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPresentationANameIDTerminalRuleCall_5_0 = (RuleCall)cPresentationANameAssignment_5.eContents().get(0);
		
		//PresentationSegments:
		//	'PresentationView' presentationSName=ID
		//	'PresentationComponent' presentationCName=ID
		//	'PresentationAction' presentationAName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PresentationView' presentationSName=ID 'PresentationComponent' presentationCName=ID 'PresentationAction'
		//presentationAName=ID
		public Group getGroup() { return cGroup; }
		
		//'PresentationView'
		public Keyword getPresentationViewKeyword_0() { return cPresentationViewKeyword_0; }
		
		//presentationSName=ID
		public Assignment getPresentationSNameAssignment_1() { return cPresentationSNameAssignment_1; }
		
		//ID
		public RuleCall getPresentationSNameIDTerminalRuleCall_1_0() { return cPresentationSNameIDTerminalRuleCall_1_0; }
		
		//'PresentationComponent'
		public Keyword getPresentationComponentKeyword_2() { return cPresentationComponentKeyword_2; }
		
		//presentationCName=ID
		public Assignment getPresentationCNameAssignment_3() { return cPresentationCNameAssignment_3; }
		
		//ID
		public RuleCall getPresentationCNameIDTerminalRuleCall_3_0() { return cPresentationCNameIDTerminalRuleCall_3_0; }
		
		//'PresentationAction'
		public Keyword getPresentationActionKeyword_4() { return cPresentationActionKeyword_4; }
		
		//presentationAName=ID
		public Assignment getPresentationANameAssignment_5() { return cPresentationANameAssignment_5; }
		
		//ID
		public RuleCall getPresentationANameIDTerminalRuleCall_5_0() { return cPresentationANameIDTerminalRuleCall_5_0; }
	}
	public class BusinessLogicLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BusinessLogicLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusinessLogicLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBusinessLogicLayerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBusinessLogicLayerBusinessLogicContentParserRuleCall_1_0 = (RuleCall)cBusinessLogicLayerAssignment_1.eContents().get(0);
		private final Assignment cBusinessLogicLayerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBusinessLogicLayerSegmentStructureParserRuleCall_2_0 = (RuleCall)cBusinessLogicLayerAssignment_2.eContents().get(0);
		
		//BusinessLogicLayer:
		//	'BusinessLogicLayer'
		//	businessLogicLayer+=BusinessLogicContent
		//	businessLogicLayer+=SegmentStructure;
		@Override public ParserRule getRule() { return rule; }
		
		//'BusinessLogicLayer' businessLogicLayer+=BusinessLogicContent businessLogicLayer+=SegmentStructure
		public Group getGroup() { return cGroup; }
		
		//'BusinessLogicLayer'
		public Keyword getBusinessLogicLayerKeyword_0() { return cBusinessLogicLayerKeyword_0; }
		
		//businessLogicLayer+=BusinessLogicContent
		public Assignment getBusinessLogicLayerAssignment_1() { return cBusinessLogicLayerAssignment_1; }
		
		//BusinessLogicContent
		public RuleCall getBusinessLogicLayerBusinessLogicContentParserRuleCall_1_0() { return cBusinessLogicLayerBusinessLogicContentParserRuleCall_1_0; }
		
		//businessLogicLayer+=SegmentStructure
		public Assignment getBusinessLogicLayerAssignment_2() { return cBusinessLogicLayerAssignment_2; }
		
		//SegmentStructure
		public RuleCall getBusinessLogicLayerSegmentStructureParserRuleCall_2_0() { return cBusinessLogicLayerSegmentStructureParserRuleCall_2_0; }
	}
	public class BusinessLogicContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BusinessLogicContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBusinessLogicSegmentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBusinessLogicSegmentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBusinessLogicSegmentsBusinessLogicSegmentsParserRuleCall_1_0 = (RuleCall)cBusinessLogicSegmentsAssignment_1.eContents().get(0);
		
		//BusinessLogicContent:
		//	'BusinessLogicSegments'
		//	businessLogicSegments+=BusinessLogicSegments+;
		@Override public ParserRule getRule() { return rule; }
		
		//'BusinessLogicSegments' businessLogicSegments+=BusinessLogicSegments+
		public Group getGroup() { return cGroup; }
		
		//'BusinessLogicSegments'
		public Keyword getBusinessLogicSegmentsKeyword_0() { return cBusinessLogicSegmentsKeyword_0; }
		
		//businessLogicSegments+=BusinessLogicSegments+
		public Assignment getBusinessLogicSegmentsAssignment_1() { return cBusinessLogicSegmentsAssignment_1; }
		
		//BusinessLogicSegments
		public RuleCall getBusinessLogicSegmentsBusinessLogicSegmentsParserRuleCall_1_0() { return cBusinessLogicSegmentsBusinessLogicSegmentsParserRuleCall_1_0; }
	}
	public class BusinessLogicSegmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BusinessLogicSegments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cControllerSegmentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cControllerSegmentElementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cControllerSegmentElementControllerSegmentElementParserRuleCall_0_2_0 = (RuleCall)cControllerSegmentElementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cModelSegmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRepositorySegmentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSecuritySegmentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSpecificationSegmentKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Assignment cSpecificationSegmentElementAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSpecificationSegmentElementSpecificationSegmentElementParserRuleCall_4_2_0 = (RuleCall)cSpecificationSegmentElementAssignment_4_2.eContents().get(0);
		
		//BusinessLogicSegments:
		//	'ControllerSegment' name=ID
		//	controllerSegmentElement+=ControllerSegmentElement+ |
		//	'ModelSegment' name=ID |
		//	'RepositorySegment' name=ID |
		//	'SecuritySegment' name=ID |
		//	'SpecificationSegment' name=ID
		//	specificationSegmentElement+=SpecificationSegmentElement+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ControllerSegment' name=ID controllerSegmentElement+=ControllerSegmentElement+ | 'ModelSegment' name=ID |
		//'RepositorySegment' name=ID | 'SecuritySegment' name=ID | 'SpecificationSegment' name=ID
		//specificationSegmentElement+=SpecificationSegmentElement+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ControllerSegment' name=ID controllerSegmentElement+=ControllerSegmentElement+
		public Group getGroup_0() { return cGroup_0; }
		
		//'ControllerSegment'
		public Keyword getControllerSegmentKeyword_0_0() { return cControllerSegmentKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//controllerSegmentElement+=ControllerSegmentElement+
		public Assignment getControllerSegmentElementAssignment_0_2() { return cControllerSegmentElementAssignment_0_2; }
		
		//ControllerSegmentElement
		public RuleCall getControllerSegmentElementControllerSegmentElementParserRuleCall_0_2_0() { return cControllerSegmentElementControllerSegmentElementParserRuleCall_0_2_0; }
		
		//'ModelSegment' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'ModelSegment'
		public Keyword getModelSegmentKeyword_1_0() { return cModelSegmentKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'RepositorySegment' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'RepositorySegment'
		public Keyword getRepositorySegmentKeyword_2_0() { return cRepositorySegmentKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'SecuritySegment' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'SecuritySegment'
		public Keyword getSecuritySegmentKeyword_3_0() { return cSecuritySegmentKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'SpecificationSegment' name=ID specificationSegmentElement+=SpecificationSegmentElement+
		public Group getGroup_4() { return cGroup_4; }
		
		//'SpecificationSegment'
		public Keyword getSpecificationSegmentKeyword_4_0() { return cSpecificationSegmentKeyword_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//specificationSegmentElement+=SpecificationSegmentElement+
		public Assignment getSpecificationSegmentElementAssignment_4_2() { return cSpecificationSegmentElementAssignment_4_2; }
		
		//SpecificationSegmentElement
		public RuleCall getSpecificationSegmentElementSpecificationSegmentElementParserRuleCall_4_2_0() { return cSpecificationSegmentElementSpecificationSegmentElementParserRuleCall_4_2_0; }
	}
	public class ControllerSegmentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ControllerSegmentElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAmazonSegmentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExceptionSegmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//ControllerSegmentElement:
		//	'AmazonSegment' name=ID |
		//	'ExceptionSegment' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonSegment' name=ID | 'ExceptionSegment' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AmazonSegment' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'AmazonSegment'
		public Keyword getAmazonSegmentKeyword_0_0() { return cAmazonSegmentKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'ExceptionSegment' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'ExceptionSegment'
		public Keyword getExceptionSegmentKeyword_1_0() { return cExceptionSegmentKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
	}
	public class SpecificationSegmentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpecificationSegmentElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinedSearchCriteriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCriteriaAttributeTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCriteriaAttributeTypeCriteriaAttributeTypeParserRuleCall_2_0 = (RuleCall)cCriteriaAttributeTypeAssignment_2.eContents().get(0);
		
		//SpecificationSegmentElement:
		//	'DefinedSearchCriteria' name=ID criteriaAttributeType+=CriteriaAttributeType+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DefinedSearchCriteria' name=ID criteriaAttributeType+=CriteriaAttributeType+
		public Group getGroup() { return cGroup; }
		
		//'DefinedSearchCriteria'
		public Keyword getDefinedSearchCriteriaKeyword_0() { return cDefinedSearchCriteriaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//criteriaAttributeType+=CriteriaAttributeType+
		public Assignment getCriteriaAttributeTypeAssignment_2() { return cCriteriaAttributeTypeAssignment_2; }
		
		//CriteriaAttributeType
		public RuleCall getCriteriaAttributeTypeCriteriaAttributeTypeParserRuleCall_2_0() { return cCriteriaAttributeTypeCriteriaAttributeTypeParserRuleCall_2_0; }
	}
	public class CriteriaAttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.CriteriaAttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCriteriaAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CriteriaAttributeType:
		//	'CriteriaAttribute' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'CriteriaAttribute' name=ID
		public Group getGroup() { return cGroup; }
		
		//'CriteriaAttribute'
		public Keyword getCriteriaAttributeKeyword_0() { return cCriteriaAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DataPersistenceLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DataPersistenceLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPersistenceLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDataPersistenceContentParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//DataPersistenceLayer:
		//	'DataPersistenceLayer'
		//	elements+=DataPersistenceContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPersistenceLayer' elements+=DataPersistenceContent
		public Group getGroup() { return cGroup; }
		
		//'DataPersistenceLayer'
		public Keyword getDataPersistenceLayerKeyword_0() { return cDataPersistenceLayerKeyword_0; }
		
		//elements+=DataPersistenceContent
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//DataPersistenceContent
		public RuleCall getElementsDataPersistenceContentParserRuleCall_1_0() { return cElementsDataPersistenceContentParserRuleCall_1_0; }
	}
	public class DataPersistenceContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DataPersistenceContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPersistenceSegmentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDataPersistenceSegmentsParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//DataPersistenceContent:
		//	'DataPersistenceSegments'
		//	elements+=DataPersistenceSegments;
		@Override public ParserRule getRule() { return rule; }
		
		//'DataPersistenceSegments' elements+=DataPersistenceSegments
		public Group getGroup() { return cGroup; }
		
		//'DataPersistenceSegments'
		public Keyword getDataPersistenceSegmentsKeyword_0() { return cDataPersistenceSegmentsKeyword_0; }
		
		//elements+=DataPersistenceSegments
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//DataPersistenceSegments
		public RuleCall getElementsDataPersistenceSegmentsParserRuleCall_1_0() { return cElementsDataPersistenceSegmentsParserRuleCall_1_0; }
	}
	public class DataPersistenceSegmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DataPersistenceSegments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostgreSLQSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPostSNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPostSNameIDTerminalRuleCall_1_0 = (RuleCall)cPostSNameAssignment_1.eContents().get(0);
		private final Keyword cAmazonS3StorageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAmazonSNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmazonSNameIDTerminalRuleCall_3_0 = (RuleCall)cAmazonSNameAssignment_3.eContents().get(0);
		
		//DataPersistenceSegments:
		//	'PostgreSLQSegment' postSName=ID
		//	'AmazonS3Storage' amazonSName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PostgreSLQSegment' postSName=ID 'AmazonS3Storage' amazonSName=ID
		public Group getGroup() { return cGroup; }
		
		//'PostgreSLQSegment'
		public Keyword getPostgreSLQSegmentKeyword_0() { return cPostgreSLQSegmentKeyword_0; }
		
		//postSName=ID
		public Assignment getPostSNameAssignment_1() { return cPostSNameAssignment_1; }
		
		//ID
		public RuleCall getPostSNameIDTerminalRuleCall_1_0() { return cPostSNameIDTerminalRuleCall_1_0; }
		
		//'AmazonS3Storage'
		public Keyword getAmazonS3StorageKeyword_2() { return cAmazonS3StorageKeyword_2; }
		
		//amazonSName=ID
		public Assignment getAmazonSNameAssignment_3() { return cAmazonSNameAssignment_3; }
		
		//ID
		public RuleCall getAmazonSNameIDTerminalRuleCall_3_0() { return cAmazonSNameIDTerminalRuleCall_3_0; }
	}
	public class SegmentStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SegmentStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSegmentStructureContentParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//SegmentStructure:
		//	'SegmentStructure'
		//	elements+=SegmentStructureContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'SegmentStructure' elements+=SegmentStructureContent
		public Group getGroup() { return cGroup; }
		
		//'SegmentStructure'
		public Keyword getSegmentStructureKeyword_0() { return cSegmentStructureKeyword_0; }
		
		//elements+=SegmentStructureContent
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//SegmentStructureContent
		public RuleCall getElementsSegmentStructureContentParserRuleCall_1_0() { return cElementsSegmentStructureContentParserRuleCall_1_0; }
	}
	public class SegmentStructureContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SegmentStructureContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirectoriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDirectoryContentParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//SegmentStructureContent:
		//	'Directories' name=ID
		//	elements+=DirectoryContent+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Directories' name=ID elements+=DirectoryContent+
		public Group getGroup() { return cGroup; }
		
		//'Directories'
		public Keyword getDirectoriesKeyword_0() { return cDirectoriesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=DirectoryContent+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//DirectoryContent
		public RuleCall getElementsDirectoryContentParserRuleCall_2_0() { return cElementsDirectoryContentParserRuleCall_2_0; }
	}
	public class DirectoryContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DirectoryContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDirectoryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cDirectoriesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDirectoriesDirectoriesParserRuleCall_0_2_0 = (RuleCall)cDirectoriesAssignment_0_2.eContents().get(0);
		private final Assignment cDirectoriesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDirectoriesSingleFileParserRuleCall_1_0 = (RuleCall)cDirectoriesAssignment_1.eContents().get(0);
		
		//DirectoryContent:
		//	'Directory' name=ID
		//	directories+=Directories | directories+=SingleFile;
		@Override public ParserRule getRule() { return rule; }
		
		//'Directory' name=ID directories+=Directories | directories+=SingleFile
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Directory' name=ID directories+=Directories
		public Group getGroup_0() { return cGroup_0; }
		
		//'Directory'
		public Keyword getDirectoryKeyword_0_0() { return cDirectoryKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//directories+=Directories
		public Assignment getDirectoriesAssignment_0_2() { return cDirectoriesAssignment_0_2; }
		
		//Directories
		public RuleCall getDirectoriesDirectoriesParserRuleCall_0_2_0() { return cDirectoriesDirectoriesParserRuleCall_0_2_0; }
		
		//directories+=SingleFile
		public Assignment getDirectoriesAssignment_1() { return cDirectoriesAssignment_1; }
		
		//SingleFile
		public RuleCall getDirectoriesSingleFileParserRuleCall_1_0() { return cDirectoriesSingleFileParserRuleCall_1_0; }
	}
	public class DirectoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Directories");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsMultipleFileParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Directories:
		//	elements+=MultipleFile;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=MultipleFile
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//MultipleFile
		public RuleCall getElementsMultipleFileParserRuleCall_0() { return cElementsMultipleFileParserRuleCall_0; }
	}
	public class SingleFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SingleFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SingleFile:
		//	'SingleFile' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SingleFile' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SingleFile'
		public Keyword getSingleFileKeyword_0() { return cSingleFileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MultipleFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.MultipleFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommonFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//MultipleFile:
		//	'CommonFile' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'CommonFile' name=ID
		public Group getGroup() { return cGroup; }
		
		//'CommonFile'
		public Keyword getCommonFileKeyword_0() { return cCommonFileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LayerRelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LayerRelations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayerelationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayerelationsRelationTypeParserRuleCall_0_0 = (RuleCall)cLayerelationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLayeroriginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayeroriginLayerSourceParserRuleCall_2_0 = (RuleCall)cLayeroriginAssignment_2.eContents().get(0);
		private final Assignment cLayertargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLayertargetLayerTargetParserRuleCall_3_0 = (RuleCall)cLayertargetAssignment_3.eContents().get(0);
		
		//LayerRelations:
		//	layerelations+=RelationType name=ID
		//	layerorigin+=LayerSource
		//	layertarget+=LayerTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//layerelations+=RelationType name=ID layerorigin+=LayerSource layertarget+=LayerTarget
		public Group getGroup() { return cGroup; }
		
		//layerelations+=RelationType
		public Assignment getLayerelationsAssignment_0() { return cLayerelationsAssignment_0; }
		
		//RelationType
		public RuleCall getLayerelationsRelationTypeParserRuleCall_0_0() { return cLayerelationsRelationTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//layerorigin+=LayerSource
		public Assignment getLayeroriginAssignment_2() { return cLayeroriginAssignment_2; }
		
		//LayerSource
		public RuleCall getLayeroriginLayerSourceParserRuleCall_2_0() { return cLayeroriginLayerSourceParserRuleCall_2_0; }
		
		//layertarget+=LayerTarget
		public Assignment getLayertargetAssignment_3() { return cLayertargetAssignment_3; }
		
		//LayerTarget
		public RuleCall getLayertargetLayerTargetParserRuleCall_3_0() { return cLayertargetLayerTargetParserRuleCall_3_0; }
	}
	public class RelationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllowedToUseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAllowToUseBelowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//RelationType:
		//	'AllowedToUse' |
		//	'AllowToUseBelow';
		@Override public ParserRule getRule() { return rule; }
		
		//'AllowedToUse' | 'AllowToUseBelow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AllowedToUse'
		public Keyword getAllowedToUseKeyword_0() { return cAllowedToUseKeyword_0; }
		
		//'AllowToUseBelow'
		public Keyword getAllowToUseBelowKeyword_1() { return cAllowToUseBelowKeyword_1; }
	}
	public class LayerSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LayerSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayerelationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayerelationsLayerRelationNameParserRuleCall_1_0 = (RuleCall)cLayerelationsAssignment_1.eContents().get(0);
		
		//LayerSource:
		//	'source'
		//	layerelations+=LayerRelationName;
		@Override public ParserRule getRule() { return rule; }
		
		//'source' layerelations+=LayerRelationName
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//layerelations+=LayerRelationName
		public Assignment getLayerelationsAssignment_1() { return cLayerelationsAssignment_1; }
		
		//LayerRelationName
		public RuleCall getLayerelationsLayerRelationNameParserRuleCall_1_0() { return cLayerelationsLayerRelationNameParserRuleCall_1_0; }
	}
	public class LayerTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LayerTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayerelationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayerelationsLayerRelationNameParserRuleCall_1_0 = (RuleCall)cLayerelationsAssignment_1.eContents().get(0);
		
		//LayerTarget:
		//	'target'
		//	layerelations+=LayerRelationName;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' layerelations+=LayerRelationName
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//layerelations+=LayerRelationName
		public Assignment getLayerelationsAssignment_1() { return cLayerelationsAssignment_1; }
		
		//LayerRelationName
		public RuleCall getLayerelationsLayerRelationNameParserRuleCall_1_0() { return cLayerelationsLayerRelationNameParserRuleCall_1_0; }
	}
	public class LayerRelationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LayerRelationName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPresentationLayerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBusinessLogicLayerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPersistenceDataLayerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LayerRelationName:
		//	'PresentationLayer' |
		//	'BusinessLogicLayer' |
		//	'PersistenceDataLayer';
		@Override public ParserRule getRule() { return rule; }
		
		//'PresentationLayer' | 'BusinessLogicLayer' | 'PersistenceDataLayer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PresentationLayer'
		public Keyword getPresentationLayerKeyword_0() { return cPresentationLayerKeyword_0; }
		
		//'BusinessLogicLayer'
		public Keyword getBusinessLogicLayerKeyword_1() { return cBusinessLogicLayerKeyword_1; }
		
		//'PersistenceDataLayer'
		public Keyword getPersistenceDataLayerKeyword_2() { return cPersistenceDataLayerKeyword_2; }
	}
	public class ArchitectureComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ArchitectureComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArchFeComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArchFeComponentFrontEndParserRuleCall_1_0 = (RuleCall)cArchFeComponentAssignment_1.eContents().get(0);
		private final Assignment cArchBeComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArchBeComponentBackEndParserRuleCall_2_0 = (RuleCall)cArchBeComponentAssignment_2.eContents().get(0);
		private final Assignment cArchPdComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArchPdComponentPersistenceDataComponentParserRuleCall_3_0 = (RuleCall)cArchPdComponentAssignment_3.eContents().get(0);
		
		//ArchitectureComponents:
		//	'SystemComponents'
		//	archFeComponent+=FrontEnd
		//	archBeComponent+=BackEnd
		//	archPdComponent+=PersistenceDataComponent;
		@Override public ParserRule getRule() { return rule; }
		
		//'SystemComponents' archFeComponent+=FrontEnd archBeComponent+=BackEnd archPdComponent+=PersistenceDataComponent
		public Group getGroup() { return cGroup; }
		
		//'SystemComponents'
		public Keyword getSystemComponentsKeyword_0() { return cSystemComponentsKeyword_0; }
		
		//archFeComponent+=FrontEnd
		public Assignment getArchFeComponentAssignment_1() { return cArchFeComponentAssignment_1; }
		
		//FrontEnd
		public RuleCall getArchFeComponentFrontEndParserRuleCall_1_0() { return cArchFeComponentFrontEndParserRuleCall_1_0; }
		
		//archBeComponent+=BackEnd
		public Assignment getArchBeComponentAssignment_2() { return cArchBeComponentAssignment_2; }
		
		//BackEnd
		public RuleCall getArchBeComponentBackEndParserRuleCall_2_0() { return cArchBeComponentBackEndParserRuleCall_2_0; }
		
		//archPdComponent+=PersistenceDataComponent
		public Assignment getArchPdComponentAssignment_3() { return cArchPdComponentAssignment_3; }
		
		//PersistenceDataComponent
		public RuleCall getArchPdComponentPersistenceDataComponentParserRuleCall_3_0() { return cArchPdComponentPersistenceDataComponentParserRuleCall_3_0; }
	}
	public class FrontEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.FrontEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrontEndComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FrontEnd:
		//	'FrontEndComponent' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'FrontEndComponent' name=ID
		public Group getGroup() { return cGroup; }
		
		//'FrontEndComponent'
		public Keyword getFrontEndComponentKeyword_0() { return cFrontEndComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BackEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BackEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackEndComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BackEnd:
		//	'BackEndComponent' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'BackEndComponent' name=ID
		public Group getGroup() { return cGroup; }
		
		//'BackEndComponent'
		public Keyword getBackEndComponentKeyword_0() { return cBackEndComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PersistenceDataComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PersistenceDataComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersistenceDataComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PersistenceDataComponent:
		//	'PersistenceDataComponent' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PersistenceDataComponent' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PersistenceDataComponent'
		public Keyword getPersistenceDataComponentKeyword_0() { return cPersistenceDataComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NTiersConnectionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTiersConnections");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNtierconnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNtierconnectionsNTierConnectionContentParserRuleCall_1_0 = (RuleCall)cNtierconnectionsAssignment_1.eContents().get(0);
		
		//NTiersConnections:
		//	'Connectors'
		//	ntierconnections+=NTierConnectionContent+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Connectors' ntierconnections+=NTierConnectionContent+
		public Group getGroup() { return cGroup; }
		
		//'Connectors'
		public Keyword getConnectorsKeyword_0() { return cConnectorsKeyword_0; }
		
		//ntierconnections+=NTierConnectionContent+
		public Assignment getNtierconnectionsAssignment_1() { return cNtierconnectionsAssignment_1; }
		
		//NTierConnectionContent
		public RuleCall getNtierconnectionsNTierConnectionContentParserRuleCall_1_0() { return cNtierconnectionsNTierConnectionContentParserRuleCall_1_0; }
	}
	public class NTierConnectionContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTierConnectionContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNtierconnectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNtierconnectionConnectionTypeParserRuleCall_0_0 = (RuleCall)cNtierconnectionAssignment_0.eContents().get(0);
		private final Assignment cNTierNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNTierNameIDTerminalRuleCall_1_0 = (RuleCall)cNTierNameAssignment_1.eContents().get(0);
		private final Assignment cNtieroriginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNtieroriginNTierSourceParserRuleCall_2_0 = (RuleCall)cNtieroriginAssignment_2.eContents().get(0);
		private final Assignment cNtiertargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNtiertargetNTierTargetParserRuleCall_3_0 = (RuleCall)cNtiertargetAssignment_3.eContents().get(0);
		
		//NTierConnectionContent:
		//	ntierconnection+=ConnectionType nTierName=ID
		//	ntierorigin+=NTierSource
		//	ntiertarget+=NTierTarget;
		@Override public ParserRule getRule() { return rule; }
		
		//ntierconnection+=ConnectionType nTierName=ID ntierorigin+=NTierSource ntiertarget+=NTierTarget
		public Group getGroup() { return cGroup; }
		
		//ntierconnection+=ConnectionType
		public Assignment getNtierconnectionAssignment_0() { return cNtierconnectionAssignment_0; }
		
		//ConnectionType
		public RuleCall getNtierconnectionConnectionTypeParserRuleCall_0_0() { return cNtierconnectionConnectionTypeParserRuleCall_0_0; }
		
		//nTierName=ID
		public Assignment getNTierNameAssignment_1() { return cNTierNameAssignment_1; }
		
		//ID
		public RuleCall getNTierNameIDTerminalRuleCall_1_0() { return cNTierNameIDTerminalRuleCall_1_0; }
		
		//ntierorigin+=NTierSource
		public Assignment getNtieroriginAssignment_2() { return cNtieroriginAssignment_2; }
		
		//NTierSource
		public RuleCall getNtieroriginNTierSourceParserRuleCall_2_0() { return cNtieroriginNTierSourceParserRuleCall_2_0; }
		
		//ntiertarget+=NTierTarget
		public Assignment getNtiertargetAssignment_3() { return cNtiertargetAssignment_3; }
		
		//NTierTarget
		public RuleCall getNtiertargetNTierTargetParserRuleCall_3_0() { return cNtiertargetNTierTargetParserRuleCall_3_0; }
	}
	public class ConnectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ConnectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRESTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPostgreSQLConnectionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmazonS3APIKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ConnectionType:
		//	'REST' |
		//	'PostgreSQLConnection' |
		//	'AmazonS3API';
		@Override public ParserRule getRule() { return rule; }
		
		//'REST' | 'PostgreSQLConnection' | 'AmazonS3API'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'REST'
		public Keyword getRESTKeyword_0() { return cRESTKeyword_0; }
		
		//'PostgreSQLConnection'
		public Keyword getPostgreSQLConnectionKeyword_1() { return cPostgreSQLConnectionKeyword_1; }
		
		//'AmazonS3API'
		public Keyword getAmazonS3APIKeyword_2() { return cAmazonS3APIKeyword_2; }
	}
	public class NTierSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTierSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNtierconnectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNtierconnectionNTiersRelationsParserRuleCall_1_0 = (RuleCall)cNtierconnectionAssignment_1.eContents().get(0);
		
		//NTierSource:
		//	'source'
		//	ntierconnection+=NTiersRelations;
		@Override public ParserRule getRule() { return rule; }
		
		//'source' ntierconnection+=NTiersRelations
		public Group getGroup() { return cGroup; }
		
		//'source'
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }
		
		//ntierconnection+=NTiersRelations
		public Assignment getNtierconnectionAssignment_1() { return cNtierconnectionAssignment_1; }
		
		//NTiersRelations
		public RuleCall getNtierconnectionNTiersRelationsParserRuleCall_1_0() { return cNtierconnectionNTiersRelationsParserRuleCall_1_0; }
	}
	public class NTierTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTierTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNtierconnectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNtierconnectionNTiersRelationsParserRuleCall_1_0 = (RuleCall)cNtierconnectionAssignment_1.eContents().get(0);
		
		//NTierTarget:
		//	'target'
		//	ntierconnection+=NTiersRelations;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' ntierconnection+=NTiersRelations
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//ntierconnection+=NTiersRelations
		public Assignment getNtierconnectionAssignment_1() { return cNtierconnectionAssignment_1; }
		
		//NTiersRelations
		public RuleCall getNtierconnectionNTiersRelationsParserRuleCall_1_0() { return cNtierconnectionNTiersRelationsParserRuleCall_1_0; }
	}
	public class NTiersRelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.NTiersRelations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFrontEndComponentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBackEndComponentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPersistenceDataComponentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAmazonServiceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		
		//NTiersRelations:
		//	'FrontEndComponent' name=ID |
		//	'BackEndComponent' name=ID |
		//	'PersistenceDataComponent' name=ID |
		//	'AmazonService' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'FrontEndComponent' name=ID | 'BackEndComponent' name=ID | 'PersistenceDataComponent' name=ID | 'AmazonService' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FrontEndComponent' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'FrontEndComponent'
		public Keyword getFrontEndComponentKeyword_0_0() { return cFrontEndComponentKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'BackEndComponent' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'BackEndComponent'
		public Keyword getBackEndComponentKeyword_1_0() { return cBackEndComponentKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'PersistenceDataComponent' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'PersistenceDataComponent'
		public Keyword getPersistenceDataComponentKeyword_2_0() { return cPersistenceDataComponentKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'AmazonService' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'AmazonService'
		public Keyword getAmazonServiceKeyword_3_0() { return cAmazonServiceKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
	}
	public class TechnologyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Technology");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTechnologyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsTechnologiesParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ------------------------------
		//// Technology
		//// ------------------------------
		//Technology:
		//	'Technology' name=ID ':' '{'
		//	elements+=Technologies
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Technology' name=ID ':' '{' elements+=Technologies '}'
		public Group getGroup() { return cGroup; }
		
		//'Technology'
		public Keyword getTechnologyKeyword_0() { return cTechnologyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Technologies
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Technologies
		public RuleCall getElementsTechnologiesParserRuleCall_4_0() { return cElementsTechnologiesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TechnologiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Technologies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTechspringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTechspringSpringParserRuleCall_0_0 = (RuleCall)cTechspringAssignment_0.eContents().get(0);
		private final Assignment cTechreactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTechreactReactParserRuleCall_1_0 = (RuleCall)cTechreactAssignment_1.eContents().get(0);
		private final Assignment cTechpostgresqlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTechpostgresqlPostgreSQLParserRuleCall_2_0 = (RuleCall)cTechpostgresqlAssignment_2.eContents().get(0);
		private final Assignment cTechamazonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTechamazonAmazonWebServicesParserRuleCall_3_0 = (RuleCall)cTechamazonAssignment_3.eContents().get(0);
		
		//Technologies:
		//	techspring+=Spring
		//	techreact+=React
		//	techpostgresql+=PostgreSQL
		//	techamazon+=AmazonWebServices;
		@Override public ParserRule getRule() { return rule; }
		
		//techspring+=Spring techreact+=React techpostgresql+=PostgreSQL techamazon+=AmazonWebServices
		public Group getGroup() { return cGroup; }
		
		//techspring+=Spring
		public Assignment getTechspringAssignment_0() { return cTechspringAssignment_0; }
		
		//Spring
		public RuleCall getTechspringSpringParserRuleCall_0_0() { return cTechspringSpringParserRuleCall_0_0; }
		
		//techreact+=React
		public Assignment getTechreactAssignment_1() { return cTechreactAssignment_1; }
		
		//React
		public RuleCall getTechreactReactParserRuleCall_1_0() { return cTechreactReactParserRuleCall_1_0; }
		
		//techpostgresql+=PostgreSQL
		public Assignment getTechpostgresqlAssignment_2() { return cTechpostgresqlAssignment_2; }
		
		//PostgreSQL
		public RuleCall getTechpostgresqlPostgreSQLParserRuleCall_2_0() { return cTechpostgresqlPostgreSQLParserRuleCall_2_0; }
		
		//techamazon+=AmazonWebServices
		public Assignment getTechamazonAssignment_3() { return cTechamazonAssignment_3; }
		
		//AmazonWebServices
		public RuleCall getTechamazonAmazonWebServicesParserRuleCall_3_0() { return cTechamazonAmazonWebServicesParserRuleCall_3_0; }
	}
	public class SpringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Spring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpringBootApplicationParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Spring:
		//	'Spring' name=ID ':' '{'
		//	elements+=SpringBootApplication
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Spring' name=ID ':' '{' elements+=SpringBootApplication '}'
		public Group getGroup() { return cGroup; }
		
		//'Spring'
		public Keyword getSpringKeyword_0() { return cSpringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=SpringBootApplication
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//SpringBootApplication
		public RuleCall getElementsSpringBootApplicationParserRuleCall_4_0() { return cElementsSpringBootApplicationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SpringBootApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringBootApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringBootApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsConfigurationParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsSpringComponentParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsSpringRepositoryParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsRestControllerParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsSpringEntityParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsStorageClientParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		
		//SpringBootApplication:
		//	'SpringBootApplication'
		//	elements+=Configuration
		//	elements+=SpringComponent+
		//	elements+=SpringRepository+
		//	elements+=RestController+
		//	elements+=SpringEntity+
		//	elements+=StorageClient;
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringBootApplication' elements+=Configuration elements+=SpringComponent+ elements+=SpringRepository+
		//elements+=RestController+ elements+=SpringEntity+ elements+=StorageClient
		public Group getGroup() { return cGroup; }
		
		//'SpringBootApplication'
		public Keyword getSpringBootApplicationKeyword_0() { return cSpringBootApplicationKeyword_0; }
		
		//elements+=Configuration
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Configuration
		public RuleCall getElementsConfigurationParserRuleCall_1_0() { return cElementsConfigurationParserRuleCall_1_0; }
		
		//elements+=SpringComponent+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//SpringComponent
		public RuleCall getElementsSpringComponentParserRuleCall_2_0() { return cElementsSpringComponentParserRuleCall_2_0; }
		
		//elements+=SpringRepository+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//SpringRepository
		public RuleCall getElementsSpringRepositoryParserRuleCall_3_0() { return cElementsSpringRepositoryParserRuleCall_3_0; }
		
		//elements+=RestController+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//RestController
		public RuleCall getElementsRestControllerParserRuleCall_4_0() { return cElementsRestControllerParserRuleCall_4_0; }
		
		//elements+=SpringEntity+
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//SpringEntity
		public RuleCall getElementsSpringEntityParserRuleCall_5_0() { return cElementsSpringEntityParserRuleCall_5_0; }
		
		//elements+=StorageClient
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//StorageClient
		public RuleCall getElementsStorageClientParserRuleCall_6_0() { return cElementsStorageClientParserRuleCall_6_0; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEnableGlobalMethodSecurityParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsEnableAuthorizationServerParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsEnableResourceServerParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsEnableWebSecurityParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Configuration:
		//	'Configuration' ':' '{'
		//	elements+=EnableGlobalMethodSecurity
		//	elements+=EnableAuthorizationServer
		//	elements+=EnableResourceServer
		//	elements+=EnableWebSecurity
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Configuration' ':' '{' elements+=EnableGlobalMethodSecurity elements+=EnableAuthorizationServer
		//elements+=EnableResourceServer elements+=EnableWebSecurity '}'
		public Group getGroup() { return cGroup; }
		
		//'Configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=EnableGlobalMethodSecurity
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//EnableGlobalMethodSecurity
		public RuleCall getElementsEnableGlobalMethodSecurityParserRuleCall_3_0() { return cElementsEnableGlobalMethodSecurityParserRuleCall_3_0; }
		
		//elements+=EnableAuthorizationServer
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//EnableAuthorizationServer
		public RuleCall getElementsEnableAuthorizationServerParserRuleCall_4_0() { return cElementsEnableAuthorizationServerParserRuleCall_4_0; }
		
		//elements+=EnableResourceServer
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//EnableResourceServer
		public RuleCall getElementsEnableResourceServerParserRuleCall_5_0() { return cElementsEnableResourceServerParserRuleCall_5_0; }
		
		//elements+=EnableWebSecurity
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//EnableWebSecurity
		public RuleCall getElementsEnableWebSecurityParserRuleCall_6_0() { return cElementsEnableWebSecurityParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EnableGlobalMethodSecurityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.EnableGlobalMethodSecurity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnableGlobalMethodSecurityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnableGlobalMethodSecurity:
		//	'EnableGlobalMethodSecurity' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'EnableGlobalMethodSecurity' name=ID
		public Group getGroup() { return cGroup; }
		
		//'EnableGlobalMethodSecurity'
		public Keyword getEnableGlobalMethodSecurityKeyword_0() { return cEnableGlobalMethodSecurityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EnableAuthorizationServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.EnableAuthorizationServer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnableAuthorizationServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnableAuthorizationServer:
		//	'EnableAuthorizationServer' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'EnableAuthorizationServer' name=ID
		public Group getGroup() { return cGroup; }
		
		//'EnableAuthorizationServer'
		public Keyword getEnableAuthorizationServerKeyword_0() { return cEnableAuthorizationServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EnableResourceServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.EnableResourceServer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnableResourceServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnableResourceServer:
		//	'EnableResourceServer' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'EnableResourceServer' name=ID
		public Group getGroup() { return cGroup; }
		
		//'EnableResourceServer'
		public Keyword getEnableResourceServerKeyword_0() { return cEnableResourceServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EnableWebSecurityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.EnableWebSecurity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnableWebSecurityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnableWebSecurity:
		//	'EnableWebSecurity' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'EnableWebSecurity' name=ID
		public Group getGroup() { return cGroup; }
		
		//'EnableWebSecurity'
		public Keyword getEnableWebSecurityKeyword_0() { return cEnableWebSecurityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpringComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsOrderSpringParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SpringComponent:
		//	'SpringComponent' ':' '{'
		//	elements+=OrderSpring
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringComponent' ':' '{' elements+=OrderSpring '}'
		public Group getGroup() { return cGroup; }
		
		//'SpringComponent'
		public Keyword getSpringComponentKeyword_0() { return cSpringComponentKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=OrderSpring
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//OrderSpring
		public RuleCall getElementsOrderSpringParserRuleCall_3_0() { return cElementsOrderSpringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OrderSpringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.OrderSpring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderSpringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OrderSpring:
		//	'OrderSpring' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'OrderSpring' name=ID
		public Group getGroup() { return cGroup; }
		
		//'OrderSpring'
		public Keyword getOrderSpringKeyword_0() { return cOrderSpringKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpringRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringRepositoriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsSpringRepositoriesParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpringRepositoryAnnotationParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SpringRepository:
		//	'SpringRepositories' ':' '{'
		//	elements+=SpringRepositories+
		//	elements+=SpringRepositoryAnnotation+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringRepositories' ':' '{' elements+=SpringRepositories+ elements+=SpringRepositoryAnnotation+ '}'
		public Group getGroup() { return cGroup; }
		
		//'SpringRepositories'
		public Keyword getSpringRepositoriesKeyword_0() { return cSpringRepositoriesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=SpringRepositories+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//SpringRepositories
		public RuleCall getElementsSpringRepositoriesParserRuleCall_3_0() { return cElementsSpringRepositoriesParserRuleCall_3_0; }
		
		//elements+=SpringRepositoryAnnotation+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//SpringRepositoryAnnotation
		public RuleCall getElementsSpringRepositoryAnnotationParserRuleCall_4_0() { return cElementsSpringRepositoryAnnotationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SpringRepositoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringRepositories");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SpringRepositories:
		//	'SpringRepository' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringRepository' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SpringRepository'
		public Keyword getSpringRepositoryKeyword_0() { return cSpringRepositoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpringRepositoryAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringRepositoryAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringRepositoryAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SpringRepositoryAnnotation:
		//	'SpringRepositoryAnnotation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringRepositoryAnnotation' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SpringRepositoryAnnotation'
		public Keyword getSpringRepositoryAnnotationKeyword_0() { return cSpringRepositoryAnnotationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RestControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RestController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRestControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsSpecificationParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsAutowiredParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsResponseEntityParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsExceptionHandlerParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RestController:
		//	'RestController' name=ID ':' '{'
		//	elements+=Specification
		//	elements+=Autowired*
		//	elements+=ResponseEntity*
		//	elements+=ExceptionHandler
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RestController' name=ID ':' '{' elements+=Specification elements+=Autowired* elements+=ResponseEntity*
		//elements+=ExceptionHandler '}'
		public Group getGroup() { return cGroup; }
		
		//'RestController'
		public Keyword getRestControllerKeyword_0() { return cRestControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Specification
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Specification
		public RuleCall getElementsSpecificationParserRuleCall_4_0() { return cElementsSpecificationParserRuleCall_4_0; }
		
		//elements+=Autowired*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Autowired
		public RuleCall getElementsAutowiredParserRuleCall_5_0() { return cElementsAutowiredParserRuleCall_5_0; }
		
		//elements+=ResponseEntity*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//ResponseEntity
		public RuleCall getElementsResponseEntityParserRuleCall_6_0() { return cElementsResponseEntityParserRuleCall_6_0; }
		
		//elements+=ExceptionHandler
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//ExceptionHandler
		public RuleCall getElementsExceptionHandlerParserRuleCall_7_0() { return cElementsExceptionHandlerParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsPredicateParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsSearchCriteriaParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Specification:
		//	'Specification'
		//	elements+=Predicate+
		//	elements+=SearchCriteria;
		@Override public ParserRule getRule() { return rule; }
		
		//'Specification' elements+=Predicate+ elements+=SearchCriteria
		public Group getGroup() { return cGroup; }
		
		//'Specification'
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }
		
		//elements+=Predicate+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Predicate
		public RuleCall getElementsPredicateParserRuleCall_1_0() { return cElementsPredicateParserRuleCall_1_0; }
		
		//elements+=SearchCriteria
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//SearchCriteria
		public RuleCall getElementsSearchCriteriaParserRuleCall_2_0() { return cElementsSearchCriteriaParserRuleCall_2_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredicateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Predicate:
		//	'Predicate' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Predicate' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Predicate'
		public Keyword getPredicateKeyword_0() { return cPredicateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SearchCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SearchCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchCriteriaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SearchCriteria:
		//	'SearchCriteria' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SearchCriteria' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SearchCriteria'
		public Keyword getSearchCriteriaKeyword_0() { return cSearchCriteriaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AutowiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Autowired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutowiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Autowired:
		//	'Autowired' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Autowired' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Autowired'
		public Keyword getAutowiredKeyword_0() { return cAutowiredKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ResponseEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ResponseEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponseEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeMappingTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsResponseParameterParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//ResponseEntity:
		//	'ResponseEntity' name=ID
		//	type+=MappingType
		//	elements+=ResponseParameter*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ResponseEntity' name=ID type+=MappingType elements+=ResponseParameter*
		public Group getGroup() { return cGroup; }
		
		//'ResponseEntity'
		public Keyword getResponseEntityKeyword_0() { return cResponseEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type+=MappingType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//MappingType
		public RuleCall getTypeMappingTypeParserRuleCall_2_0() { return cTypeMappingTypeParserRuleCall_2_0; }
		
		//elements+=ResponseParameter*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ResponseParameter
		public RuleCall getElementsResponseParameterParserRuleCall_3_0() { return cElementsResponseParameterParserRuleCall_3_0; }
	}
	public class MappingTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.MappingType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequestMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetMappingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPutMappingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteMappingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MappingType:
		//	RequestMapping | PostMapping | GetMapping | PutMapping | DeleteMapping;
		@Override public ParserRule getRule() { return rule; }
		
		//RequestMapping | PostMapping | GetMapping | PutMapping | DeleteMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequestMapping
		public RuleCall getRequestMappingParserRuleCall_0() { return cRequestMappingParserRuleCall_0; }
		
		//PostMapping
		public RuleCall getPostMappingParserRuleCall_1() { return cPostMappingParserRuleCall_1; }
		
		//GetMapping
		public RuleCall getGetMappingParserRuleCall_2() { return cGetMappingParserRuleCall_2; }
		
		//PutMapping
		public RuleCall getPutMappingParserRuleCall_3() { return cPutMappingParserRuleCall_3; }
		
		//DeleteMapping
		public RuleCall getDeleteMappingParserRuleCall_4() { return cDeleteMappingParserRuleCall_4; }
	}
	public class RequestMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RequestMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRequestMappingValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodRequestMappingMethodParserRuleCall_2_0 = (RuleCall)cMethodAssignment_2.eContents().get(0);
		private final Assignment cProducesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProducesRequestMappingProducesParserRuleCall_3_0 = (RuleCall)cProducesAssignment_3.eContents().get(0);
		
		//RequestMapping:
		//	'RequestMapping'
		//	value+=RequestMappingValue
		//	method+=RequestMappingMethod
		//	produces+=RequestMappingProduces;
		@Override public ParserRule getRule() { return rule; }
		
		//'RequestMapping' value+=RequestMappingValue method+=RequestMappingMethod produces+=RequestMappingProduces
		public Group getGroup() { return cGroup; }
		
		//'RequestMapping'
		public Keyword getRequestMappingKeyword_0() { return cRequestMappingKeyword_0; }
		
		//value+=RequestMappingValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//RequestMappingValue
		public RuleCall getValueRequestMappingValueParserRuleCall_1_0() { return cValueRequestMappingValueParserRuleCall_1_0; }
		
		//method+=RequestMappingMethod
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }
		
		//RequestMappingMethod
		public RuleCall getMethodRequestMappingMethodParserRuleCall_2_0() { return cMethodRequestMappingMethodParserRuleCall_2_0; }
		
		//produces+=RequestMappingProduces
		public Assignment getProducesAssignment_3() { return cProducesAssignment_3; }
		
		//RequestMappingProduces
		public RuleCall getProducesRequestMappingProducesParserRuleCall_3_0() { return cProducesRequestMappingProducesParserRuleCall_3_0; }
	}
	public class RequestMappingValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RequestMappingValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RequestMappingValue:
		//	'Value' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Value' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RequestMappingMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RequestMappingMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RequestMappingMethod:
		//	'Method' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Method' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Method'
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RequestMappingProducesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RequestMappingProduces");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProducesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RequestMappingProduces:
		//	'Produces' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Produces' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Produces'
		public Keyword getProducesKeyword_0() { return cProducesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PostMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PostMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PostMapping:
		//	'PostMapping' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PostMapping' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PostMapping'
		public Keyword getPostMappingKeyword_0() { return cPostMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GetMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.GetMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GetMapping:
		//	'GetMapping' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'GetMapping' name=ID
		public Group getGroup() { return cGroup; }
		
		//'GetMapping'
		public Keyword getGetMappingKeyword_0() { return cGetMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PutMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PutMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PutMapping:
		//	'PutMapping' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PutMapping' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PutMapping'
		public Keyword getPutMappingKeyword_0() { return cPutMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DeleteMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DeleteMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DeleteMapping:
		//	'DeleteMapping' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'DeleteMapping' name=ID
		public Group getGroup() { return cGroup; }
		
		//'DeleteMapping'
		public Keyword getDeleteMappingKeyword_0() { return cDeleteMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ResponseParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ResponseParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsResponseParameterAnnotationParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsResponseParameterTypeParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsResponseParameterNameParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//ResponseParameter:
		//	'Parameter'
		//	elements+=ResponseParameterAnnotation
		//	elements+=ResponseParameterType
		//	elements+=ResponseParameterName;
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameter' elements+=ResponseParameterAnnotation elements+=ResponseParameterType elements+=ResponseParameterName
		public Group getGroup() { return cGroup; }
		
		//'Parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//elements+=ResponseParameterAnnotation
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//ResponseParameterAnnotation
		public RuleCall getElementsResponseParameterAnnotationParserRuleCall_1_0() { return cElementsResponseParameterAnnotationParserRuleCall_1_0; }
		
		//elements+=ResponseParameterType
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ResponseParameterType
		public RuleCall getElementsResponseParameterTypeParserRuleCall_2_0() { return cElementsResponseParameterTypeParserRuleCall_2_0; }
		
		//elements+=ResponseParameterName
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ResponseParameterName
		public RuleCall getElementsResponseParameterNameParserRuleCall_3_0() { return cElementsResponseParameterNameParserRuleCall_3_0; }
	}
	public class ResponseParameterAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ResponseParameterAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ResponseParameterAnnotation:
		//	'Annotation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Annotation' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ResponseParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ResponseParameterType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ResponseParameterType:
		//	'Type' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ResponseParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ResponseParameterName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ResponseParameterName:
		//	'Name' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Name' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ExceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsExceptionProcessParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//ExceptionHandler:
		//	'ExceptionHandler' name=ID
		//	elements+=ExceptionProcess+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExceptionHandler' name=ID elements+=ExceptionProcess+
		public Group getGroup() { return cGroup; }
		
		//'ExceptionHandler'
		public Keyword getExceptionHandlerKeyword_0() { return cExceptionHandlerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=ExceptionProcess+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ExceptionProcess
		public RuleCall getElementsExceptionProcessParserRuleCall_2_0() { return cElementsExceptionProcessParserRuleCall_2_0; }
	}
	public class ExceptionProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ExceptionProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExceptionProcess:
		//	'ExceptionProcess' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExceptionProcess' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ExceptionProcess'
		public Keyword getExceptionProcessKeyword_0() { return cExceptionProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SpringEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpringEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpringEntityAnnotationTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpringEntityAnnotationTypesSpringEntityAnnotationTypesParserRuleCall_3_0 = (RuleCall)cSpringEntityAnnotationTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SpringEntity:
		//	'SpringEntity' ':' '{'
		//	springEntityAnnotationTypes+=SpringEntityAnnotationTypes+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SpringEntity' ':' '{' springEntityAnnotationTypes+=SpringEntityAnnotationTypes+ '}'
		public Group getGroup() { return cGroup; }
		
		//'SpringEntity'
		public Keyword getSpringEntityKeyword_0() { return cSpringEntityKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//springEntityAnnotationTypes+=SpringEntityAnnotationTypes+
		public Assignment getSpringEntityAnnotationTypesAssignment_3() { return cSpringEntityAnnotationTypesAssignment_3; }
		
		//SpringEntityAnnotationTypes
		public RuleCall getSpringEntityAnnotationTypesSpringEntityAnnotationTypesParserRuleCall_3_0() { return cSpringEntityAnnotationTypesSpringEntityAnnotationTypesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SpringEntityAnnotationTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SpringEntityAnnotationTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEntityAnnotationKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTableAnnotationKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIdAnnotationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGeneratedValueAnnotationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cColumnAnnotationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cOverrideAnnotationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		
		//SpringEntityAnnotationTypes:
		//	'EntityAnnotation' name=ID |
		//	'TableAnnotation' name=ID |
		//	'IdAnnotation' name=ID |
		//	'GeneratedValueAnnotation' name=ID |
		//	'ColumnAnnotation' name=ID |
		//	'OverrideAnnotation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'EntityAnnotation' name=ID | 'TableAnnotation' name=ID | 'IdAnnotation' name=ID | 'GeneratedValueAnnotation' name=ID |
		//'ColumnAnnotation' name=ID | 'OverrideAnnotation' name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'EntityAnnotation' name=ID
		public Group getGroup_0() { return cGroup_0; }
		
		//'EntityAnnotation'
		public Keyword getEntityAnnotationKeyword_0_0() { return cEntityAnnotationKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'TableAnnotation' name=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'TableAnnotation'
		public Keyword getTableAnnotationKeyword_1_0() { return cTableAnnotationKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'IdAnnotation' name=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//'IdAnnotation'
		public Keyword getIdAnnotationKeyword_2_0() { return cIdAnnotationKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//'GeneratedValueAnnotation' name=ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'GeneratedValueAnnotation'
		public Keyword getGeneratedValueAnnotationKeyword_3_0() { return cGeneratedValueAnnotationKeyword_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//'ColumnAnnotation' name=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//'ColumnAnnotation'
		public Keyword getColumnAnnotationKeyword_4_0() { return cColumnAnnotationKeyword_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }
		
		//'OverrideAnnotation' name=ID
		public Group getGroup_5() { return cGroup_5; }
		
		//'OverrideAnnotation'
		public Keyword getOverrideAnnotationKeyword_5_0() { return cOverrideAnnotationKeyword_5_0; }
		
		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }
	}
	public class StorageClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageClient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStorageMemberParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsStorageActionParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//StorageClient:
		//	'StorageClient' name=ID
		//	elements+=StorageMember*
		//	elements+=StorageAction*;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageClient' name=ID elements+=StorageMember* elements+=StorageAction*
		public Group getGroup() { return cGroup; }
		
		//'StorageClient'
		public Keyword getStorageClientKeyword_0() { return cStorageClientKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=StorageMember*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//StorageMember
		public RuleCall getElementsStorageMemberParserRuleCall_2_0() { return cElementsStorageMemberParserRuleCall_2_0; }
		
		//elements+=StorageAction*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//StorageAction
		public RuleCall getElementsStorageActionParserRuleCall_3_0() { return cElementsStorageActionParserRuleCall_3_0; }
	}
	public class StorageMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageMemberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStorageMemberTypeParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsStorageMemberAnnotationParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//StorageMember:
		//	'StorageMember' name=ID
		//	elements+=StorageMemberType
		//	elements+=StorageMemberAnnotation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageMember' name=ID elements+=StorageMemberType elements+=StorageMemberAnnotation*
		public Group getGroup() { return cGroup; }
		
		//'StorageMember'
		public Keyword getStorageMemberKeyword_0() { return cStorageMemberKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=StorageMemberType
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//StorageMemberType
		public RuleCall getElementsStorageMemberTypeParserRuleCall_2_0() { return cElementsStorageMemberTypeParserRuleCall_2_0; }
		
		//elements+=StorageMemberAnnotation*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//StorageMemberAnnotation
		public RuleCall getElementsStorageMemberAnnotationParserRuleCall_3_0() { return cElementsStorageMemberAnnotationParserRuleCall_3_0; }
	}
	public class StorageMemberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageMemberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageMemberTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageMemberType:
		//	'StorageMemberType' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageMemberType' name=ID
		public Group getGroup() { return cGroup; }
		
		//'StorageMemberType'
		public Keyword getStorageMemberTypeKeyword_0() { return cStorageMemberTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StorageMemberAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageMemberAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageMemberAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageMemberAnnotation:
		//	'StorageMemberAnnotation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageMemberAnnotation' name=ID
		public Group getGroup() { return cGroup; }
		
		//'StorageMemberAnnotation'
		public Keyword getStorageMemberAnnotationKeyword_0() { return cStorageMemberAnnotationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StorageActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStorageActionReturnParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsStorageActionAnnotationParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsStorageActionMemberParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//StorageAction:
		//	'StorageAction' name=ID
		//	elements+=StorageActionReturn
		//	elements+=StorageActionAnnotation*
		//	elements+=StorageActionMember*;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageAction' name=ID elements+=StorageActionReturn elements+=StorageActionAnnotation* elements+=StorageActionMember*
		public Group getGroup() { return cGroup; }
		
		//'StorageAction'
		public Keyword getStorageActionKeyword_0() { return cStorageActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=StorageActionReturn
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//StorageActionReturn
		public RuleCall getElementsStorageActionReturnParserRuleCall_2_0() { return cElementsStorageActionReturnParserRuleCall_2_0; }
		
		//elements+=StorageActionAnnotation*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//StorageActionAnnotation
		public RuleCall getElementsStorageActionAnnotationParserRuleCall_3_0() { return cElementsStorageActionAnnotationParserRuleCall_3_0; }
		
		//elements+=StorageActionMember*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//StorageActionMember
		public RuleCall getElementsStorageActionMemberParserRuleCall_4_0() { return cElementsStorageActionMemberParserRuleCall_4_0; }
	}
	public class StorageActionAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageActionAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageActionAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageActionAnnotation:
		//	'StorageActionAnnotation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageActionAnnotation' name=ID
		public Group getGroup() { return cGroup; }
		
		//'StorageActionAnnotation'
		public Keyword getStorageActionAnnotationKeyword_0() { return cStorageActionAnnotationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StorageActionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageActionReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageActionReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageActionReturn:
		//	'StorageActionReturn' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageActionReturn' name=ID
		public Group getGroup() { return cGroup; }
		
		//'StorageActionReturn'
		public Keyword getStorageActionReturnKeyword_0() { return cStorageActionReturnKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StorageActionMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageActionMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageActionMemberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsStorageActionMemberTypeParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsStorageActionMemberNameParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//StorageActionMember:
		//	'StorageActionMember' elements+=StorageActionMemberType elements+=StorageActionMemberName;
		@Override public ParserRule getRule() { return rule; }
		
		//'StorageActionMember' elements+=StorageActionMemberType elements+=StorageActionMemberName
		public Group getGroup() { return cGroup; }
		
		//'StorageActionMember'
		public Keyword getStorageActionMemberKeyword_0() { return cStorageActionMemberKeyword_0; }
		
		//elements+=StorageActionMemberType
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//StorageActionMemberType
		public RuleCall getElementsStorageActionMemberTypeParserRuleCall_1_0() { return cElementsStorageActionMemberTypeParserRuleCall_1_0; }
		
		//elements+=StorageActionMemberName
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//StorageActionMemberName
		public RuleCall getElementsStorageActionMemberNameParserRuleCall_2_0() { return cElementsStorageActionMemberNameParserRuleCall_2_0; }
	}
	public class StorageActionMemberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageActionMemberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageActionMemberType:
		//	'Type' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StorageActionMemberNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StorageActionMemberName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StorageActionMemberName:
		//	'Name' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Name' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ReactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.React");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReactsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactsReactModulesParserRuleCall_4_0 = (RuleCall)cReactsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//React:
		//	'React' name=ID ':' '{'
		//	reacts+=ReactModules
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'React' name=ID ':' '{' reacts+=ReactModules '}'
		public Group getGroup() { return cGroup; }
		
		//'React'
		public Keyword getReactKeyword_0() { return cReactKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//reacts+=ReactModules
		public Assignment getReactsAssignment_4() { return cReactsAssignment_4; }
		
		//ReactModules
		public RuleCall getReactsReactModulesParserRuleCall_4_0() { return cReactsReactModulesParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ReactModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactModules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactModulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactmodulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactmodulesReactSubModulesParserRuleCall_3_0 = (RuleCall)cReactmodulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactModules:
		//	'ReactModules' ':' '{'
		//	reactmodules+=ReactSubModules
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactModules' ':' '{' reactmodules+=ReactSubModules '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactModules'
		public Keyword getReactModulesKeyword_0() { return cReactModulesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactmodules+=ReactSubModules
		public Assignment getReactmodulesAssignment_3() { return cReactmodulesAssignment_3; }
		
		//ReactSubModules
		public RuleCall getReactmodulesReactSubModulesParserRuleCall_3_0() { return cReactmodulesReactSubModulesParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactSubModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactSubModules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReactmodulesconfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReactmodulesconfReactConfigurationParserRuleCall_0_0 = (RuleCall)cReactmodulesconfAssignment_0.eContents().get(0);
		private final Assignment cReactmodulescompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReactmodulescompReactComponentsParserRuleCall_1_0 = (RuleCall)cReactmodulescompAssignment_1.eContents().get(0);
		private final Assignment cReactmodulesactAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactmodulesactReactActionsParserRuleCall_2_0 = (RuleCall)cReactmodulesactAssignment_2.eContents().get(0);
		private final Assignment cReactmoduleslibAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactmoduleslibReactLibrariesParserRuleCall_3_0 = (RuleCall)cReactmoduleslibAssignment_3.eContents().get(0);
		private final Assignment cReactmodulesinfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReactmodulesinfReactInfoParserRuleCall_4_0 = (RuleCall)cReactmodulesinfAssignment_4.eContents().get(0);
		
		//ReactSubModules:
		//	reactmodulesconf+=ReactConfiguration
		//	reactmodulescomp+=ReactComponents
		//	reactmodulesact+=ReactActions
		//	reactmoduleslib+=ReactLibraries
		//	reactmodulesinf+=ReactInfo;
		@Override public ParserRule getRule() { return rule; }
		
		//reactmodulesconf+=ReactConfiguration reactmodulescomp+=ReactComponents reactmodulesact+=ReactActions
		//reactmoduleslib+=ReactLibraries reactmodulesinf+=ReactInfo
		public Group getGroup() { return cGroup; }
		
		//reactmodulesconf+=ReactConfiguration
		public Assignment getReactmodulesconfAssignment_0() { return cReactmodulesconfAssignment_0; }
		
		//ReactConfiguration
		public RuleCall getReactmodulesconfReactConfigurationParserRuleCall_0_0() { return cReactmodulesconfReactConfigurationParserRuleCall_0_0; }
		
		//reactmodulescomp+=ReactComponents
		public Assignment getReactmodulescompAssignment_1() { return cReactmodulescompAssignment_1; }
		
		//ReactComponents
		public RuleCall getReactmodulescompReactComponentsParserRuleCall_1_0() { return cReactmodulescompReactComponentsParserRuleCall_1_0; }
		
		//reactmodulesact+=ReactActions
		public Assignment getReactmodulesactAssignment_2() { return cReactmodulesactAssignment_2; }
		
		//ReactActions
		public RuleCall getReactmodulesactReactActionsParserRuleCall_2_0() { return cReactmodulesactReactActionsParserRuleCall_2_0; }
		
		//reactmoduleslib+=ReactLibraries
		public Assignment getReactmoduleslibAssignment_3() { return cReactmoduleslibAssignment_3; }
		
		//ReactLibraries
		public RuleCall getReactmoduleslibReactLibrariesParserRuleCall_3_0() { return cReactmoduleslibReactLibrariesParserRuleCall_3_0; }
		
		//reactmodulesinf+=ReactInfo
		public Assignment getReactmodulesinfAssignment_4() { return cReactmodulesinfAssignment_4; }
		
		//ReactInfo
		public RuleCall getReactmodulesinfReactInfoParserRuleCall_4_0() { return cReactmodulesinfReactInfoParserRuleCall_4_0; }
	}
	public class ReactConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDependenciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependenciesReactDependenciesParserRuleCall_3_0 = (RuleCall)cDependenciesAssignment_3.eContents().get(0);
		private final Assignment cConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConfigurationsReactConfigurationsParserRuleCall_4_0 = (RuleCall)cConfigurationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ReactConfiguration:
		//	'ReactConfiguration' ':' '{'
		//	dependencies+=ReactDependencies
		//	configurations+=ReactConfigurations
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactConfiguration' ':' '{' dependencies+=ReactDependencies configurations+=ReactConfigurations '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactConfiguration'
		public Keyword getReactConfigurationKeyword_0() { return cReactConfigurationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//dependencies+=ReactDependencies
		public Assignment getDependenciesAssignment_3() { return cDependenciesAssignment_3; }
		
		//ReactDependencies
		public RuleCall getDependenciesReactDependenciesParserRuleCall_3_0() { return cDependenciesReactDependenciesParserRuleCall_3_0; }
		
		//configurations+=ReactConfigurations
		public Assignment getConfigurationsAssignment_4() { return cConfigurationsAssignment_4; }
		
		//ReactConfigurations
		public RuleCall getConfigurationsReactConfigurationsParserRuleCall_4_0() { return cConfigurationsReactConfigurationsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ReactDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesReactDependenciesRulesParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//ReactDependencies:
		//	'DependenciesStruct'
		//	dependencies+=ReactDependenciesRules+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DependenciesStruct' dependencies+=ReactDependenciesRules+
		public Group getGroup() { return cGroup; }
		
		//'DependenciesStruct'
		public Keyword getDependenciesStructKeyword_0() { return cDependenciesStructKeyword_0; }
		
		//dependencies+=ReactDependenciesRules+
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }
		
		//ReactDependenciesRules
		public RuleCall getDependenciesReactDependenciesRulesParserRuleCall_1_0() { return cDependenciesReactDependenciesRulesParserRuleCall_1_0; }
	}
	public class ReactDependenciesRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactDependenciesRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependenciesReactDependenciesSubRulesParserRuleCall_2_0 = (RuleCall)cDependenciesAssignment_2.eContents().get(0);
		
		//ReactDependenciesRules:
		//	'DependencyType' name=ID
		//	dependencies+=ReactDependenciesSubRules+;
		@Override public ParserRule getRule() { return rule; }
		
		//'DependencyType' name=ID dependencies+=ReactDependenciesSubRules+
		public Group getGroup() { return cGroup; }
		
		//'DependencyType'
		public Keyword getDependencyTypeKeyword_0() { return cDependencyTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//dependencies+=ReactDependenciesSubRules+
		public Assignment getDependenciesAssignment_2() { return cDependenciesAssignment_2; }
		
		//ReactDependenciesSubRules
		public RuleCall getDependenciesReactDependenciesSubRulesParserRuleCall_2_0() { return cDependenciesReactDependenciesSubRulesParserRuleCall_2_0; }
	}
	public class ReactDependenciesSubRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactDependenciesSubRules");
		private final Assignment cDependenciesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDependenciesSingleDependenciesParserRuleCall_0 = (RuleCall)cDependenciesAssignment.eContents().get(0);
		
		//ReactDependenciesSubRules:
		//	dependencies+=SingleDependencies;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=SingleDependencies
		public Assignment getDependenciesAssignment() { return cDependenciesAssignment; }
		
		//SingleDependencies
		public RuleCall getDependenciesSingleDependenciesParserRuleCall_0() { return cDependenciesSingleDependenciesParserRuleCall_0; }
	}
	public class SingleDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SingleDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDependenciesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDependenciesPackageNameParserRuleCall_0_0 = (RuleCall)cDependenciesAssignment_0.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesPackageVersionParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//SingleDependencies:
		//	dependencies+=PackageName dependencies+=PackageVersion;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=PackageName dependencies+=PackageVersion
		public Group getGroup() { return cGroup; }
		
		//dependencies+=PackageName
		public Assignment getDependenciesAssignment_0() { return cDependenciesAssignment_0; }
		
		//PackageName
		public RuleCall getDependenciesPackageNameParserRuleCall_0_0() { return cDependenciesPackageNameParserRuleCall_0_0; }
		
		//dependencies+=PackageVersion
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }
		
		//PackageVersion
		public RuleCall getDependenciesPackageVersionParserRuleCall_1_0() { return cDependenciesPackageVersionParserRuleCall_1_0; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageName:
		//	'PackageName' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PackageName' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PackageName'
		public Keyword getPackageNameKeyword_0() { return cPackageNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PackageVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PackageVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageVersion:
		//	'PackageVersion' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PackageVersion' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PackageVersion'
		public Keyword getPackageVersionKeyword_0() { return cPackageVersionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ReactConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactConfigurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactDOMConfigurationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConfigurationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigurationsDOMConfigurationsParserRuleCall_2_0 = (RuleCall)cConfigurationsAssignment_2.eContents().get(0);
		
		//ReactConfigurations:
		//	'ReactDOMConfigurations' name=ID
		//	configurations+=DOMConfigurations+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactDOMConfigurations' name=ID configurations+=DOMConfigurations+
		public Group getGroup() { return cGroup; }
		
		//'ReactDOMConfigurations'
		public Keyword getReactDOMConfigurationsKeyword_0() { return cReactDOMConfigurationsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//configurations+=DOMConfigurations+
		public Assignment getConfigurationsAssignment_2() { return cConfigurationsAssignment_2; }
		
		//DOMConfigurations
		public RuleCall getConfigurationsDOMConfigurationsParserRuleCall_2_0() { return cConfigurationsDOMConfigurationsParserRuleCall_2_0; }
	}
	public class DOMConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DOMConfigurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsDOMTypeConfParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DOMConfigurations:
		//	elements+=DOMTypeConf name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=DOMTypeConf name=ID
		public Group getGroup() { return cGroup; }
		
		//elements+=DOMTypeConf
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//DOMTypeConf
		public RuleCall getElementsDOMTypeConfParserRuleCall_0_0() { return cElementsDOMTypeConfParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DOMTypeConfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DOMTypeConf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRoutingConfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cServiceWorkerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHTMLStructureKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cManifestKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRepositoriesConfKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//DOMTypeConf:
		//	'RoutingConf' |
		//	'ServiceWorker' |
		//	'HTMLStructure' |
		//	'Manifest' |
		//	'RepositoriesConf';
		@Override public ParserRule getRule() { return rule; }
		
		//'RoutingConf' | 'ServiceWorker' | 'HTMLStructure' | 'Manifest' | 'RepositoriesConf'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'RoutingConf'
		public Keyword getRoutingConfKeyword_0() { return cRoutingConfKeyword_0; }
		
		//'ServiceWorker'
		public Keyword getServiceWorkerKeyword_1() { return cServiceWorkerKeyword_1; }
		
		//'HTMLStructure'
		public Keyword getHTMLStructureKeyword_2() { return cHTMLStructureKeyword_2; }
		
		//'Manifest'
		public Keyword getManifestKeyword_3() { return cManifestKeyword_3; }
		
		//'RepositoriesConf'
		public Keyword getRepositoriesConfKeyword_4() { return cRepositoriesConfKeyword_4; }
	}
	public class ReactComponentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactComponents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentslogicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentslogicComponentsLogicParserRuleCall_3_0 = (RuleCall)cComponentslogicAssignment_3.eContents().get(0);
		private final Assignment cComponentsuiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsuiComponentsUIParserRuleCall_4_0 = (RuleCall)cComponentsuiAssignment_4.eContents().get(0);
		private final Assignment cComponentstyleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentstyleComponentsStylesParserRuleCall_5_0 = (RuleCall)cComponentstyleAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReactComponents:
		//	'ReactComponents' ':' '{'
		//	componentslogic+=ComponentsLogic
		//	componentsui+=ComponentsUI
		//	componentstyle+=ComponentsStyles
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactComponents' ':' '{' componentslogic+=ComponentsLogic componentsui+=ComponentsUI componentstyle+=ComponentsStyles
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ReactComponents'
		public Keyword getReactComponentsKeyword_0() { return cReactComponentsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//componentslogic+=ComponentsLogic
		public Assignment getComponentslogicAssignment_3() { return cComponentslogicAssignment_3; }
		
		//ComponentsLogic
		public RuleCall getComponentslogicComponentsLogicParserRuleCall_3_0() { return cComponentslogicComponentsLogicParserRuleCall_3_0; }
		
		//componentsui+=ComponentsUI
		public Assignment getComponentsuiAssignment_4() { return cComponentsuiAssignment_4; }
		
		//ComponentsUI
		public RuleCall getComponentsuiComponentsUIParserRuleCall_4_0() { return cComponentsuiComponentsUIParserRuleCall_4_0; }
		
		//componentstyle+=ComponentsStyles
		public Assignment getComponentstyleAssignment_5() { return cComponentstyleAssignment_5; }
		
		//ComponentsStyles
		public RuleCall getComponentstyleComponentsStylesParserRuleCall_5_0() { return cComponentstyleComponentsStylesParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ComponentsLogicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ComponentsLogic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogicComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsLogicContentParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		
		//ComponentsLogic:
		//	'LogicComponents' name=ID
		//	logiccomponents+=LogicContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'LogicComponents' name=ID logiccomponents+=LogicContent
		public Group getGroup() { return cGroup; }
		
		//'LogicComponents'
		public Keyword getLogicComponentsKeyword_0() { return cLogicComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=LogicContent
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//LogicContent
		public RuleCall getLogiccomponentsLogicContentParserRuleCall_2_0() { return cLogiccomponentsLogicContentParserRuleCall_2_0; }
	}
	public class LogicContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LogicContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoutingComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsLogicStructureParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		
		//LogicContent:
		//	'RoutingComponents' name=ID
		//	logiccomponents+=LogicStructure;
		@Override public ParserRule getRule() { return rule; }
		
		//'RoutingComponents' name=ID logiccomponents+=LogicStructure
		public Group getGroup() { return cGroup; }
		
		//'RoutingComponents'
		public Keyword getRoutingComponentsKeyword_0() { return cRoutingComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=LogicStructure
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//LogicStructure
		public RuleCall getLogiccomponentsLogicStructureParserRuleCall_2_0() { return cLogiccomponentsLogicStructureParserRuleCall_2_0; }
	}
	public class LogicStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.LogicStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAppComNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAppComNameIDTerminalRuleCall_1_0 = (RuleCall)cAppComNameAssignment_1.eContents().get(0);
		private final Assignment cLogiccomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogiccomponentsComponentClassParserRuleCall_2_0 = (RuleCall)cLogiccomponentsAssignment_2.eContents().get(0);
		private final Keyword cIndexComponentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIndexCompNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndexCompNameIDTerminalRuleCall_4_0 = (RuleCall)cIndexCompNameAssignment_4.eContents().get(0);
		
		//LogicStructure:
		//	'AppComponent' appComName=ID
		//	logiccomponents+=ComponentClass
		//	'IndexComponent' indexCompName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AppComponent' appComName=ID logiccomponents+=ComponentClass 'IndexComponent' indexCompName=ID
		public Group getGroup() { return cGroup; }
		
		//'AppComponent'
		public Keyword getAppComponentKeyword_0() { return cAppComponentKeyword_0; }
		
		//appComName=ID
		public Assignment getAppComNameAssignment_1() { return cAppComNameAssignment_1; }
		
		//ID
		public RuleCall getAppComNameIDTerminalRuleCall_1_0() { return cAppComNameIDTerminalRuleCall_1_0; }
		
		//logiccomponents+=ComponentClass
		public Assignment getLogiccomponentsAssignment_2() { return cLogiccomponentsAssignment_2; }
		
		//ComponentClass
		public RuleCall getLogiccomponentsComponentClassParserRuleCall_2_0() { return cLogiccomponentsComponentClassParserRuleCall_2_0; }
		
		//'IndexComponent'
		public Keyword getIndexComponentKeyword_3() { return cIndexComponentKeyword_3; }
		
		//indexCompName=ID
		public Assignment getIndexCompNameAssignment_4() { return cIndexCompNameAssignment_4; }
		
		//ID
		public RuleCall getIndexCompNameIDTerminalRuleCall_4_0() { return cIndexCompNameIDTerminalRuleCall_4_0; }
	}
	public class ComponentsUIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ComponentsUI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUIComponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUicomponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUicomponentsUIContentParserRuleCall_2_0 = (RuleCall)cUicomponentsAssignment_2.eContents().get(0);
		
		//ComponentsUI:
		//	'UIComponents' name=ID
		//	uicomponents+=UIContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'UIComponents' name=ID uicomponents+=UIContent
		public Group getGroup() { return cGroup; }
		
		//'UIComponents'
		public Keyword getUIComponentsKeyword_0() { return cUIComponentsKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//uicomponents+=UIContent
		public Assignment getUicomponentsAssignment_2() { return cUicomponentsAssignment_2; }
		
		//UIContent
		public RuleCall getUicomponentsUIContentParserRuleCall_2_0() { return cUicomponentsUIContentParserRuleCall_2_0; }
	}
	public class UIContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.UIContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentcontentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentcontentViewComponentContParserRuleCall_0_0 = (RuleCall)cComponentcontentAssignment_0.eContents().get(0);
		private final Assignment cSubcomponentcontentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubcomponentcontentSubcomponentContParserRuleCall_1_0 = (RuleCall)cSubcomponentcontentAssignment_1.eContents().get(0);
		
		//UIContent:
		//	componentcontent+=ViewComponentCont+
		//	subcomponentcontent+=SubcomponentCont+;
		@Override public ParserRule getRule() { return rule; }
		
		//componentcontent+=ViewComponentCont+ subcomponentcontent+=SubcomponentCont+
		public Group getGroup() { return cGroup; }
		
		//componentcontent+=ViewComponentCont+
		public Assignment getComponentcontentAssignment_0() { return cComponentcontentAssignment_0; }
		
		//ViewComponentCont
		public RuleCall getComponentcontentViewComponentContParserRuleCall_0_0() { return cComponentcontentViewComponentContParserRuleCall_0_0; }
		
		//subcomponentcontent+=SubcomponentCont+
		public Assignment getSubcomponentcontentAssignment_1() { return cSubcomponentcontentAssignment_1; }
		
		//SubcomponentCont
		public RuleCall getSubcomponentcontentSubcomponentContParserRuleCall_1_0() { return cSubcomponentcontentSubcomponentContParserRuleCall_1_0; }
	}
	public class ViewComponentContElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ViewComponentCont");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameViewIDTerminalRuleCall_1_0 = (RuleCall)cNameViewAssignment_1.eContents().get(0);
		private final Assignment cUicontentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUicontentComponentClassParserRuleCall_2_0 = (RuleCall)cUicontentAssignment_2.eContents().get(0);
		
		//ViewComponentCont:
		//	'ViewComponent' nameView=ID
		//	uicontent+=ComponentClass;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewComponent' nameView=ID uicontent+=ComponentClass
		public Group getGroup() { return cGroup; }
		
		//'ViewComponent'
		public Keyword getViewComponentKeyword_0() { return cViewComponentKeyword_0; }
		
		//nameView=ID
		public Assignment getNameViewAssignment_1() { return cNameViewAssignment_1; }
		
		//ID
		public RuleCall getNameViewIDTerminalRuleCall_1_0() { return cNameViewIDTerminalRuleCall_1_0; }
		
		//uicontent+=ComponentClass
		public Assignment getUicontentAssignment_2() { return cUicontentAssignment_2; }
		
		//ComponentClass
		public RuleCall getUicontentComponentClassParserRuleCall_2_0() { return cUicontentComponentClassParserRuleCall_2_0; }
	}
	public class SubcomponentContElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.SubcomponentCont");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubcomponentsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameSubCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSubCompIDTerminalRuleCall_1_0 = (RuleCall)cNameSubCompAssignment_1.eContents().get(0);
		private final Assignment cUicontentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUicontentComponentClassParserRuleCall_2_0 = (RuleCall)cUicontentAssignment_2.eContents().get(0);
		
		//SubcomponentCont:
		//	'Subcomponents' nameSubComp=ID
		//	uicontent+=ComponentClass;
		@Override public ParserRule getRule() { return rule; }
		
		//'Subcomponents' nameSubComp=ID uicontent+=ComponentClass
		public Group getGroup() { return cGroup; }
		
		//'Subcomponents'
		public Keyword getSubcomponentsKeyword_0() { return cSubcomponentsKeyword_0; }
		
		//nameSubComp=ID
		public Assignment getNameSubCompAssignment_1() { return cNameSubCompAssignment_1; }
		
		//ID
		public RuleCall getNameSubCompIDTerminalRuleCall_1_0() { return cNameSubCompIDTerminalRuleCall_1_0; }
		
		//uicontent+=ComponentClass
		public Assignment getUicontentAssignment_2() { return cUicontentAssignment_2; }
		
		//ComponentClass
		public RuleCall getUicontentComponentClassParserRuleCall_2_0() { return cUicontentComponentClassParserRuleCall_2_0; }
	}
	public class ComponentClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ComponentClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentclassimpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentclassimpReactImportsParserRuleCall_0_0 = (RuleCall)cComponentclassimpAssignment_0.eContents().get(0);
		private final Assignment cComponentclassfuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentclassfuncReactFunctionsParserRuleCall_1_0 = (RuleCall)cComponentclassfuncAssignment_1.eContents().get(0);
		private final Assignment cComponentclasspropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentclasspropPropsParserRuleCall_2_0 = (RuleCall)cComponentclasspropAssignment_2.eContents().get(0);
		
		//ComponentClass:
		//	componentclassimp+=ReactImports
		//	componentclassfunc+=ReactFunctions
		//	componentclassprop+=Props;
		@Override public ParserRule getRule() { return rule; }
		
		//componentclassimp+=ReactImports componentclassfunc+=ReactFunctions componentclassprop+=Props
		public Group getGroup() { return cGroup; }
		
		//componentclassimp+=ReactImports
		public Assignment getComponentclassimpAssignment_0() { return cComponentclassimpAssignment_0; }
		
		//ReactImports
		public RuleCall getComponentclassimpReactImportsParserRuleCall_0_0() { return cComponentclassimpReactImportsParserRuleCall_0_0; }
		
		//componentclassfunc+=ReactFunctions
		public Assignment getComponentclassfuncAssignment_1() { return cComponentclassfuncAssignment_1; }
		
		//ReactFunctions
		public RuleCall getComponentclassfuncReactFunctionsParserRuleCall_1_0() { return cComponentclassfuncReactFunctionsParserRuleCall_1_0; }
		
		//componentclassprop+=Props
		public Assignment getComponentclasspropAssignment_2() { return cComponentclasspropAssignment_2; }
		
		//Props
		public RuleCall getComponentclasspropPropsParserRuleCall_2_0() { return cComponentclasspropPropsParserRuleCall_2_0; }
	}
	public class ReactImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactImports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactImportsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReactsimportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReactsimportsReactImportContentParserRuleCall_1_0 = (RuleCall)cReactsimportsAssignment_1.eContents().get(0);
		
		//ReactImports:
		//	{ReactImports} reactsimports+=ReactImportContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReactImports} reactsimports+=ReactImportContent*
		public Group getGroup() { return cGroup; }
		
		//{ReactImports}
		public Action getReactImportsAction_0() { return cReactImportsAction_0; }
		
		//reactsimports+=ReactImportContent*
		public Assignment getReactsimportsAssignment_1() { return cReactsimportsAssignment_1; }
		
		//ReactImportContent
		public RuleCall getReactsimportsReactImportContentParserRuleCall_1_0() { return cReactsimportsReactImportContentParserRuleCall_1_0; }
	}
	public class ReactImportContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactImportContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImpNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImpNameIDTerminalRuleCall_1_0 = (RuleCall)cImpNameAssignment_1.eContents().get(0);
		
		//ReactImportContent:
		//	'import' impName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' impName=ID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//impName=ID
		public Assignment getImpNameAssignment_1() { return cImpNameAssignment_1; }
		
		//ID
		public RuleCall getImpNameIDTerminalRuleCall_1_0() { return cImpNameIDTerminalRuleCall_1_0; }
	}
	public class ReactFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReactconstructorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReactconstructorsReactConstructorParserRuleCall_0_0 = (RuleCall)cReactconstructorsAssignment_0.eContents().get(0);
		private final Assignment cLifecycleclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLifecycleclassReactLifeCycleParserRuleCall_1_0 = (RuleCall)cLifecycleclassAssignment_1.eContents().get(0);
		private final Assignment cReactcorefuncsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactcorefuncsReactCoreFunctionsParserRuleCall_2_0 = (RuleCall)cReactcorefuncsAssignment_2.eContents().get(0);
		private final Assignment cRenderclassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRenderclassReactRenderParserRuleCall_3_0 = (RuleCall)cRenderclassAssignment_3.eContents().get(0);
		
		//ReactFunctions:
		//	reactconstructors+=ReactConstructor
		//	lifecycleclass+=ReactLifeCycle*
		//	reactcorefuncs+=ReactCoreFunctions*
		//	renderclass+=ReactRender;
		@Override public ParserRule getRule() { return rule; }
		
		//reactconstructors+=ReactConstructor lifecycleclass+=ReactLifeCycle* reactcorefuncs+=ReactCoreFunctions*
		//renderclass+=ReactRender
		public Group getGroup() { return cGroup; }
		
		//reactconstructors+=ReactConstructor
		public Assignment getReactconstructorsAssignment_0() { return cReactconstructorsAssignment_0; }
		
		//ReactConstructor
		public RuleCall getReactconstructorsReactConstructorParserRuleCall_0_0() { return cReactconstructorsReactConstructorParserRuleCall_0_0; }
		
		//lifecycleclass+=ReactLifeCycle*
		public Assignment getLifecycleclassAssignment_1() { return cLifecycleclassAssignment_1; }
		
		//ReactLifeCycle
		public RuleCall getLifecycleclassReactLifeCycleParserRuleCall_1_0() { return cLifecycleclassReactLifeCycleParserRuleCall_1_0; }
		
		//reactcorefuncs+=ReactCoreFunctions*
		public Assignment getReactcorefuncsAssignment_2() { return cReactcorefuncsAssignment_2; }
		
		//ReactCoreFunctions
		public RuleCall getReactcorefuncsReactCoreFunctionsParserRuleCall_2_0() { return cReactcorefuncsReactCoreFunctionsParserRuleCall_2_0; }
		
		//renderclass+=ReactRender
		public Assignment getRenderclassAssignment_3() { return cRenderclassAssignment_3; }
		
		//ReactRender
		public RuleCall getRenderclassReactRenderParserRuleCall_3_0() { return cRenderclassReactRenderParserRuleCall_3_0; }
	}
	public class ReactConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentstateclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentstateclassStateParserRuleCall_1_0 = (RuleCall)cComponentstateclassAssignment_1.eContents().get(0);
		private final Assignment cComponentfuncclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentfuncclassCoreFunctionsDeclarationParserRuleCall_2_0 = (RuleCall)cComponentfuncclassAssignment_2.eContents().get(0);
		
		//ReactConstructor:
		//	'Constructor'
		//	componentstateclass+=State
		//	componentfuncclass+=CoreFunctionsDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Constructor' componentstateclass+=State componentfuncclass+=CoreFunctionsDeclaration*
		public Group getGroup() { return cGroup; }
		
		//'Constructor'
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }
		
		//componentstateclass+=State
		public Assignment getComponentstateclassAssignment_1() { return cComponentstateclassAssignment_1; }
		
		//State
		public RuleCall getComponentstateclassStateParserRuleCall_1_0() { return cComponentstateclassStateParserRuleCall_1_0; }
		
		//componentfuncclass+=CoreFunctionsDeclaration*
		public Assignment getComponentfuncclassAssignment_2() { return cComponentfuncclassAssignment_2; }
		
		//CoreFunctionsDeclaration
		public RuleCall getComponentfuncclassCoreFunctionsDeclarationParserRuleCall_2_0() { return cComponentfuncclassCoreFunctionsDeclarationParserRuleCall_2_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatecontentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatecontentsStateContentParserRuleCall_2_0 = (RuleCall)cStatecontentsAssignment_2.eContents().get(0);
		
		//State:
		//	{State} 'State'
		//	statecontents+=StateContent+;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'State' statecontents+=StateContent+
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'State'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//statecontents+=StateContent+
		public Assignment getStatecontentsAssignment_2() { return cStatecontentsAssignment_2; }
		
		//StateContent
		public RuleCall getStatecontentsStateContentParserRuleCall_2_0() { return cStatecontentsStateContentParserRuleCall_2_0; }
	}
	public class StateContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StateContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateNameIDTerminalRuleCall_0_0 = (RuleCall)cStateNameAssignment_0.eContents().get(0);
		private final Assignment cComponentdatatypAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentdatatypDataTypeParserRuleCall_1_0 = (RuleCall)cComponentdatatypAssignment_1.eContents().get(0);
		
		//StateContent:
		//	stateName=ID
		//	componentdatatyp+=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//stateName=ID componentdatatyp+=DataType
		public Group getGroup() { return cGroup; }
		
		//stateName=ID
		public Assignment getStateNameAssignment_0() { return cStateNameAssignment_0; }
		
		//ID
		public RuleCall getStateNameIDTerminalRuleCall_0_0() { return cStateNameIDTerminalRuleCall_0_0; }
		
		//componentdatatyp+=DataType
		public Assignment getComponentdatatypAssignment_1() { return cComponentdatatypAssignment_1; }
		
		//DataType
		public RuleCall getComponentdatatypDataTypeParserRuleCall_1_0() { return cComponentdatatypDataTypeParserRuleCall_1_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cObjectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumberKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//DataType:
		//	'String' |
		//	'Array' |
		//	'Object' |
		//	'Number' |
		//	'null' |
		//	'Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' | 'Array' | 'Object' | 'Number' | 'null' | 'Boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'Array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }
		
		//'Object'
		public Keyword getObjectKeyword_2() { return cObjectKeyword_2; }
		
		//'Number'
		public Keyword getNumberKeyword_3() { return cNumberKeyword_3; }
		
		//'null'
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
	}
	public class CoreFunctionsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.CoreFunctionsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFunctionBindingDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CoreFunctionsDeclaration:
		//	name=ID 'FunctionBindingDeclaration';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'FunctionBindingDeclaration'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'FunctionBindingDeclaration'
		public Keyword getFunctionBindingDeclarationKeyword_1() { return cFunctionBindingDeclarationKeyword_1; }
	}
	public class ReactLifeCycleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactLifeCycle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cComponentDidMountKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cComponentDidUpdateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cComponentWillUnmountKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ReactLifeCycle:
		//	'ComponentDidMount' 'FunctionStructure' |
		//	'ComponentDidUpdate' 'FunctionStructure' |
		//	'ComponentWillUnmount' 'FunctionStructure';
		@Override public ParserRule getRule() { return rule; }
		
		//'ComponentDidMount' 'FunctionStructure' | 'ComponentDidUpdate' 'FunctionStructure' | 'ComponentWillUnmount'
		//'FunctionStructure'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ComponentDidMount' 'FunctionStructure'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ComponentDidMount'
		public Keyword getComponentDidMountKeyword_0_0() { return cComponentDidMountKeyword_0_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_0_1() { return cFunctionStructureKeyword_0_1; }
		
		//'ComponentDidUpdate' 'FunctionStructure'
		public Group getGroup_1() { return cGroup_1; }
		
		//'ComponentDidUpdate'
		public Keyword getComponentDidUpdateKeyword_1_0() { return cComponentDidUpdateKeyword_1_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_1_1() { return cFunctionStructureKeyword_1_1; }
		
		//'ComponentWillUnmount' 'FunctionStructure'
		public Group getGroup_2() { return cGroup_2; }
		
		//'ComponentWillUnmount'
		public Keyword getComponentWillUnmountKeyword_2_0() { return cComponentWillUnmountKeyword_2_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_2_1() { return cFunctionStructureKeyword_2_1; }
	}
	public class ReactRenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactRender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRenderContentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReactRender:
		//	'Render' 'RenderContent';
		@Override public ParserRule getRule() { return rule; }
		
		//'Render' 'RenderContent'
		public Group getGroup() { return cGroup; }
		
		//'Render'
		public Keyword getRenderKeyword_0() { return cRenderKeyword_0; }
		
		//'RenderContent'
		public Keyword getRenderContentKeyword_1() { return cRenderContentKeyword_1; }
	}
	public class PropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Props");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropscontsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropscontsPropsTypeParserRuleCall_2_0 = (RuleCall)cPropscontsAssignment_2.eContents().get(0);
		
		//Props:
		//	{Props} 'Props'
		//	propsconts+=PropsType*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Props} 'Props' propsconts+=PropsType*
		public Group getGroup() { return cGroup; }
		
		//{Props}
		public Action getPropsAction_0() { return cPropsAction_0; }
		
		//'Props'
		public Keyword getPropsKeyword_1() { return cPropsKeyword_1; }
		
		//propsconts+=PropsType*
		public Assignment getPropscontsAssignment_2() { return cPropscontsAssignment_2; }
		
		//PropsType
		public RuleCall getPropscontsPropsTypeParserRuleCall_2_0() { return cPropscontsPropsTypeParserRuleCall_2_0; }
	}
	public class PropsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PropsType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamePropsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePropsIDTerminalRuleCall_0_0 = (RuleCall)cNamePropsAssignment_0.eContents().get(0);
		private final Assignment cPropsdatasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropsdatasDataTypeParserRuleCall_1_0 = (RuleCall)cPropsdatasAssignment_1.eContents().get(0);
		
		//PropsType:
		//	nameProps=ID
		//	propsdatas+=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//nameProps=ID propsdatas+=DataType
		public Group getGroup() { return cGroup; }
		
		//nameProps=ID
		public Assignment getNamePropsAssignment_0() { return cNamePropsAssignment_0; }
		
		//ID
		public RuleCall getNamePropsIDTerminalRuleCall_0_0() { return cNamePropsIDTerminalRuleCall_0_0; }
		
		//propsdatas+=DataType
		public Assignment getPropsdatasAssignment_1() { return cPropsdatasAssignment_1; }
		
		//DataType
		public RuleCall getPropsdatasDataTypeParserRuleCall_1_0() { return cPropsdatasDataTypeParserRuleCall_1_0; }
	}
	public class ReactCoreFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactCoreFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFunctionStructureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReactCoreFunctions:
		//	name=ID 'FunctionStructure';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'FunctionStructure'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'FunctionStructure'
		public Keyword getFunctionStructureKeyword_1() { return cFunctionStructureKeyword_1; }
	}
	public class ComponentsStylesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ComponentsStyles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentsStylesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStylescontentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStylescontentsComponentsStylesContentParserRuleCall_1_0 = (RuleCall)cStylescontentsAssignment_1.eContents().get(0);
		
		//ComponentsStyles:
		//	{ComponentsStyles} stylescontents+=ComponentsStylesContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentsStyles} stylescontents+=ComponentsStylesContent*
		public Group getGroup() { return cGroup; }
		
		//{ComponentsStyles}
		public Action getComponentsStylesAction_0() { return cComponentsStylesAction_0; }
		
		//stylescontents+=ComponentsStylesContent*
		public Assignment getStylescontentsAssignment_1() { return cStylescontentsAssignment_1; }
		
		//ComponentsStylesContent
		public RuleCall getStylescontentsComponentsStylesContentParserRuleCall_1_0() { return cStylescontentsComponentsStylesContentParserRuleCall_1_0; }
	}
	public class ComponentsStylesContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ComponentsStylesContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStyleIDTerminalRuleCall_1_0 = (RuleCall)cNameStyleAssignment_1.eContents().get(0);
		private final Assignment cStylecontentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStylecontentStylePropertiesParserRuleCall_2_0 = (RuleCall)cStylecontentAssignment_2.eContents().get(0);
		
		//ComponentsStylesContent:
		//	'Style' nameStyle=ID
		//	stylecontent+=StyleProperties;
		@Override public ParserRule getRule() { return rule; }
		
		//'Style' nameStyle=ID stylecontent+=StyleProperties
		public Group getGroup() { return cGroup; }
		
		//'Style'
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }
		
		//nameStyle=ID
		public Assignment getNameStyleAssignment_1() { return cNameStyleAssignment_1; }
		
		//ID
		public RuleCall getNameStyleIDTerminalRuleCall_1_0() { return cNameStyleIDTerminalRuleCall_1_0; }
		
		//stylecontent+=StyleProperties
		public Assignment getStylecontentAssignment_2() { return cStylecontentAssignment_2; }
		
		//StyleProperties
		public RuleCall getStylecontentStylePropertiesParserRuleCall_2_0() { return cStylecontentStylePropertiesParserRuleCall_2_0; }
	}
	public class StylePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StyleProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStylePropertiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStylespropscontentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStylespropscontentsStylePropertiesContentParserRuleCall_1_0 = (RuleCall)cStylespropscontentsAssignment_1.eContents().get(0);
		
		//StyleProperties:
		//	{StyleProperties} stylespropscontents+=StylePropertiesContent*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StyleProperties} stylespropscontents+=StylePropertiesContent*
		public Group getGroup() { return cGroup; }
		
		//{StyleProperties}
		public Action getStylePropertiesAction_0() { return cStylePropertiesAction_0; }
		
		//stylespropscontents+=StylePropertiesContent*
		public Assignment getStylespropscontentsAssignment_1() { return cStylespropscontentsAssignment_1; }
		
		//StylePropertiesContent
		public RuleCall getStylespropscontentsStylePropertiesContentParserRuleCall_1_0() { return cStylespropscontentsStylePropertiesContentParserRuleCall_1_0; }
	}
	public class StylePropertiesContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.StylePropertiesContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProp_nameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropNameIDTerminalRuleCall_1_0 = (RuleCall)cPropNameAssignment_1.eContents().get(0);
		private final Keyword cPropsContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StylePropertiesContent:
		//	'prop_name' propName=ID
		//	"propsContent"+;
		@Override public ParserRule getRule() { return rule; }
		
		//'prop_name' propName=ID "propsContent"+
		public Group getGroup() { return cGroup; }
		
		//'prop_name'
		public Keyword getProp_nameKeyword_0() { return cProp_nameKeyword_0; }
		
		//propName=ID
		public Assignment getPropNameAssignment_1() { return cPropNameAssignment_1; }
		
		//ID
		public RuleCall getPropNameIDTerminalRuleCall_1_0() { return cPropNameIDTerminalRuleCall_1_0; }
		
		//"propsContent"+
		public Keyword getPropsContentKeyword_2() { return cPropsContentKeyword_2; }
	}
	public class ReactActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactactcontentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactactcontentReactActionsContentParserRuleCall_3_0 = (RuleCall)cReactactcontentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactActions:
		//	'ReactActions' ':' '{'
		//	reactactcontent+=ReactActionsContent
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactActions' ':' '{' reactactcontent+=ReactActionsContent '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactActions'
		public Keyword getReactActionsKeyword_0() { return cReactActionsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactactcontent+=ReactActionsContent
		public Assignment getReactactcontentAssignment_3() { return cReactactcontentAssignment_3; }
		
		//ReactActionsContent
		public RuleCall getReactactcontentReactActionsContentParserRuleCall_3_0() { return cReactactcontentReactActionsContentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactActionsContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactActionsContent");
		private final Assignment cReactrelcontentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactrelcontentReactServicesRelationParserRuleCall_0 = (RuleCall)cReactrelcontentAssignment.eContents().get(0);
		
		//ReactActionsContent:
		//	reactrelcontent+=ReactServicesRelation+;
		@Override public ParserRule getRule() { return rule; }
		
		//reactrelcontent+=ReactServicesRelation+
		public Assignment getReactrelcontentAssignment() { return cReactrelcontentAssignment; }
		
		//ReactServicesRelation
		public RuleCall getReactrelcontentReactServicesRelationParserRuleCall_0() { return cReactrelcontentReactServicesRelationParserRuleCall_0; }
	}
	public class ReactServicesTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactServicesType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cReactservcontentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactservcontentReactServiceContentParserRuleCall_2_0 = (RuleCall)cReactservcontentAssignment_2.eContents().get(0);
		
		//ReactServicesType:
		//	'ServiceType' name=ID
		//	reactservcontent+=ReactServiceContent;
		@Override public ParserRule getRule() { return rule; }
		
		//'ServiceType' name=ID reactservcontent+=ReactServiceContent
		public Group getGroup() { return cGroup; }
		
		//'ServiceType'
		public Keyword getServiceTypeKeyword_0() { return cServiceTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//reactservcontent+=ReactServiceContent
		public Assignment getReactservcontentAssignment_2() { return cReactservcontentAssignment_2; }
		
		//ReactServiceContent
		public RuleCall getReactservcontentReactServiceContentParserRuleCall_2_0() { return cReactservcontentReactServiceContentParserRuleCall_2_0; }
	}
	public class ReactServiceContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactServiceContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctNameIDTerminalRuleCall_1_0 = (RuleCall)cFunctNameAssignment_1.eContents().get(0);
		private final Assignment cReactservrequestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReactservrequestReactServiceContRequestParserRuleCall_2_0 = (RuleCall)cReactservrequestAssignment_2.eContents().get(0);
		
		//ReactServiceContent:
		//	'functions' functName=ID
		//	reactservrequest+=ReactServiceContRequest*;
		@Override public ParserRule getRule() { return rule; }
		
		//'functions' functName=ID reactservrequest+=ReactServiceContRequest*
		public Group getGroup() { return cGroup; }
		
		//'functions'
		public Keyword getFunctionsKeyword_0() { return cFunctionsKeyword_0; }
		
		//functName=ID
		public Assignment getFunctNameAssignment_1() { return cFunctNameAssignment_1; }
		
		//ID
		public RuleCall getFunctNameIDTerminalRuleCall_1_0() { return cFunctNameIDTerminalRuleCall_1_0; }
		
		//reactservrequest+=ReactServiceContRequest*
		public Assignment getReactservrequestAssignment_2() { return cReactservrequestAssignment_2; }
		
		//ReactServiceContRequest
		public RuleCall getReactservrequestReactServiceContRequestParserRuleCall_2_0() { return cReactservrequestReactServiceContRequestParserRuleCall_2_0; }
	}
	public class ReactServiceContRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactServiceContRequest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReactservrequestpropsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReactservrequestpropsReactServiceRequestPropsParserRuleCall_1_0 = (RuleCall)cReactservrequestpropsAssignment_1.eContents().get(0);
		
		//ReactServiceContRequest:
		//	'return'
		//	reactservrequestprops+=ReactServiceRequestProps+;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' reactservrequestprops+=ReactServiceRequestProps+
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//reactservrequestprops+=ReactServiceRequestProps+
		public Assignment getReactservrequestpropsAssignment_1() { return cReactservrequestpropsAssignment_1; }
		
		//ReactServiceRequestProps
		public RuleCall getReactservrequestpropsReactServiceRequestPropsParserRuleCall_1_0() { return cReactservrequestpropsReactServiceRequestPropsParserRuleCall_1_0; }
	}
	public class ReactServiceRequestPropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactServiceRequestProps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqPropNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReqPropNameIDTerminalRuleCall_1_0 = (RuleCall)cReqPropNameAssignment_1.eContents().get(0);
		private final Assignment cReqPropDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReqPropDescriptionIDTerminalRuleCall_2_0 = (RuleCall)cReqPropDescriptionAssignment_2.eContents().get(0);
		
		//ReactServiceRequestProps:
		//	'propName' reqPropName=ID reqPropDescription=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'propName' reqPropName=ID reqPropDescription=ID
		public Group getGroup() { return cGroup; }
		
		//'propName'
		public Keyword getPropNameKeyword_0() { return cPropNameKeyword_0; }
		
		//reqPropName=ID
		public Assignment getReqPropNameAssignment_1() { return cReqPropNameAssignment_1; }
		
		//ID
		public RuleCall getReqPropNameIDTerminalRuleCall_1_0() { return cReqPropNameIDTerminalRuleCall_1_0; }
		
		//reqPropDescription=ID
		public Assignment getReqPropDescriptionAssignment_2() { return cReqPropDescriptionAssignment_2; }
		
		//ID
		public RuleCall getReqPropDescriptionIDTerminalRuleCall_2_0() { return cReqPropDescriptionIDTerminalRuleCall_2_0; }
	}
	public class ReactServicesRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactServicesRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServicesRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServicesrelsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cServicesrelsReactsRelationServParserRuleCall_1_0 = (RuleCall)cServicesrelsAssignment_1.eContents().get(0);
		
		//ReactServicesRelation:
		//	'ServicesRelations'
		//	servicesrels+=ReactsRelationServ+;
		@Override public ParserRule getRule() { return rule; }
		
		//'ServicesRelations' servicesrels+=ReactsRelationServ+
		public Group getGroup() { return cGroup; }
		
		//'ServicesRelations'
		public Keyword getServicesRelationsKeyword_0() { return cServicesRelationsKeyword_0; }
		
		//servicesrels+=ReactsRelationServ+
		public Assignment getServicesrelsAssignment_1() { return cServicesrelsAssignment_1; }
		
		//ReactsRelationServ
		public RuleCall getServicesrelsReactsRelationServParserRuleCall_1_0() { return cServicesrelsReactsRelationServParserRuleCall_1_0; }
	}
	public class ReactsRelationServElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactsRelationServ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReactrelationcontentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReactrelationcontentReactServicesTypeParserRuleCall_0_0 = (RuleCall)cReactrelationcontentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cReactRequestParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ReactsRelationServ:
		//	reactrelationcontent+=ReactServicesType name=ID ReactRequest;
		@Override public ParserRule getRule() { return rule; }
		
		//reactrelationcontent+=ReactServicesType name=ID ReactRequest
		public Group getGroup() { return cGroup; }
		
		//reactrelationcontent+=ReactServicesType
		public Assignment getReactrelationcontentAssignment_0() { return cReactrelationcontentAssignment_0; }
		
		//ReactServicesType
		public RuleCall getReactrelationcontentReactServicesTypeParserRuleCall_0_0() { return cReactrelationcontentReactServicesTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//ReactRequest
		public RuleCall getReactRequestParserRuleCall_2() { return cReactRequestParserRuleCall_2; }
	}
	public class ReactRequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactRequest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWrapperKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAuxWrapperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ReactRequest:
		//	'Wrapper' |
		//	'AuxWrapper';
		@Override public ParserRule getRule() { return rule; }
		
		//'Wrapper' | 'AuxWrapper'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Wrapper'
		public Keyword getWrapperKeyword_0() { return cWrapperKeyword_0; }
		
		//'AuxWrapper'
		public Keyword getAuxWrapperKeyword_1() { return cAuxWrapperKeyword_1; }
	}
	public class ReactLibrariesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactLibraries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactLibrariesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactlibrariesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactlibrariesReactLibraryParserRuleCall_3_0 = (RuleCall)cReactlibrariesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactLibraries:
		//	'ReactLibraries' ':' '{'
		//	reactlibraries+=ReactLibrary+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactLibraries' ':' '{' reactlibraries+=ReactLibrary+ '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactLibraries'
		public Keyword getReactLibrariesKeyword_0() { return cReactLibrariesKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactlibraries+=ReactLibrary+
		public Assignment getReactlibrariesAssignment_3() { return cReactlibrariesAssignment_3; }
		
		//ReactLibrary
		public RuleCall getReactlibrariesReactLibraryParserRuleCall_3_0() { return cReactlibrariesReactLibraryParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReactLibraryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLibraryContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReactLibrary:
		//	ReactLibraryType name=ID 'LibraryContent';
		@Override public ParserRule getRule() { return rule; }
		
		//ReactLibraryType name=ID 'LibraryContent'
		public Group getGroup() { return cGroup; }
		
		//ReactLibraryType
		public RuleCall getReactLibraryTypeParserRuleCall_0() { return cReactLibraryTypeParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'LibraryContent'
		public Keyword getLibraryContentKeyword_2() { return cLibraryContentKeyword_2; }
	}
	public class ReactLibraryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactLibraryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReactDesignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReactRoutingKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cComponentManagementKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStoreManagementKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cReactDeploymentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cConfigurationLibraryKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ReactLibraryType:
		//	'ReactDesign' |
		//	'ReactRouting' |
		//	'ComponentManagement' |
		//	'StoreManagement' |
		//	'ReactDeployment' |
		//	'ConfigurationLibrary';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactDesign' | 'ReactRouting' | 'ComponentManagement' | 'StoreManagement' | 'ReactDeployment' | 'ConfigurationLibrary'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ReactDesign'
		public Keyword getReactDesignKeyword_0() { return cReactDesignKeyword_0; }
		
		//'ReactRouting'
		public Keyword getReactRoutingKeyword_1() { return cReactRoutingKeyword_1; }
		
		//'ComponentManagement'
		public Keyword getComponentManagementKeyword_2() { return cComponentManagementKeyword_2; }
		
		//'StoreManagement'
		public Keyword getStoreManagementKeyword_3() { return cStoreManagementKeyword_3; }
		
		//'ReactDeployment'
		public Keyword getReactDeploymentKeyword_4() { return cReactDeploymentKeyword_4; }
		
		//'ConfigurationLibrary'
		public Keyword getConfigurationLibraryKeyword_5() { return cConfigurationLibraryKeyword_5; }
	}
	public class ReactInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactInfo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactinformationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactinformationReactInformationParserRuleCall_3_0 = (RuleCall)cReactinformationAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReactInfo:
		//	'ReactInformation' ':' '{'
		//	reactinformation+=ReactInformation+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactInformation' ':' '{' reactinformation+=ReactInformation+ '}'
		public Group getGroup() { return cGroup; }
		
		//'ReactInformation'
		public Keyword getReactInformationKeyword_0() { return cReactInformationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reactinformation+=ReactInformation+
		public Assignment getReactinformationAssignment_3() { return cReactinformationAssignment_3; }
		
		//ReactInformation
		public RuleCall getReactinformationReactInformationParserRuleCall_3_0() { return cReactinformationReactInformationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ReactInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReactInformationTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInformationContentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReactInformation:
		//	ReactInformationType name=ID 'InformationContent';
		@Override public ParserRule getRule() { return rule; }
		
		//ReactInformationType name=ID 'InformationContent'
		public Group getGroup() { return cGroup; }
		
		//ReactInformationType
		public RuleCall getReactInformationTypeParserRuleCall_0() { return cReactInformationTypeParserRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'InformationContent'
		public Keyword getInformationContentKeyword_2() { return cInformationContentKeyword_2; }
	}
	public class ReactInformationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ReactInformationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cReactReadmeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cReactAditionalInfoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ReactInformationType:
		//	'ReactReadme' |
		//	'ReactAditionalInfo';
		@Override public ParserRule getRule() { return rule; }
		
		//'ReactReadme' | 'ReactAditionalInfo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ReactReadme'
		public Keyword getReactReadmeKeyword_0() { return cReactReadmeKeyword_0; }
		
		//'ReactAditionalInfo'
		public Keyword getReactAditionalInfoKeyword_1() { return cReactAditionalInfoKeyword_1; }
	}
	public class PostgreSQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PostgreSQL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostgreSQLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsClusterParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PostgreSQL:
		//	'PostgreSQL' name=ID ':' '{'
		//	elements+=Cluster
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PostgreSQL' name=ID ':' '{' elements+=Cluster '}'
		public Group getGroup() { return cGroup; }
		
		//'PostgreSQL'
		public Keyword getPostgreSQLKeyword_0() { return cPostgreSQLKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Cluster
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Cluster
		public RuleCall getElementsClusterParserRuleCall_4_0() { return cElementsClusterParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClusterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Cluster");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsDatabaseParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPostgresUserParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Cluster:
		//	'Database'
		//	elements+=Database
		//	elements+=PostgresUser+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Database' elements+=Database elements+=PostgresUser+
		public Group getGroup() { return cGroup; }
		
		//'Database'
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }
		
		//elements+=Database
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Database
		public RuleCall getElementsDatabaseParserRuleCall_1_0() { return cElementsDatabaseParserRuleCall_1_0; }
		
		//elements+=PostgresUser+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//PostgresUser
		public RuleCall getElementsPostgresUserParserRuleCall_2_0() { return cElementsPostgresUserParserRuleCall_2_0; }
	}
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsSchemaParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Database:
		//	'Schema' name=ID
		//	elements+=Schema;
		@Override public ParserRule getRule() { return rule; }
		
		//'Schema' name=ID elements+=Schema
		public Group getGroup() { return cGroup; }
		
		//'Schema'
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=Schema
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Schema
		public RuleCall getElementsSchemaParserRuleCall_2_0() { return cElementsSchemaParserRuleCall_2_0; }
	}
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsIndex_pParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsViewSchemaParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsTable_pParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsTriggerParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsFunctionParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Schema:
		//	elements+=Index_p*
		//	elements+=ViewSchema*
		//	elements+=Table_p+
		//	elements+=Trigger*
		//	elements+=Function;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Index_p* elements+=ViewSchema* elements+=Table_p+ elements+=Trigger* elements+=Function
		public Group getGroup() { return cGroup; }
		
		//elements+=Index_p*
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Index_p
		public RuleCall getElementsIndex_pParserRuleCall_0_0() { return cElementsIndex_pParserRuleCall_0_0; }
		
		//elements+=ViewSchema*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//ViewSchema
		public RuleCall getElementsViewSchemaParserRuleCall_1_0() { return cElementsViewSchemaParserRuleCall_1_0; }
		
		//elements+=Table_p+
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Table_p
		public RuleCall getElementsTable_pParserRuleCall_2_0() { return cElementsTable_pParserRuleCall_2_0; }
		
		//elements+=Trigger*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Trigger
		public RuleCall getElementsTriggerParserRuleCall_3_0() { return cElementsTriggerParserRuleCall_3_0; }
		
		//elements+=Function
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Function
		public RuleCall getElementsFunctionParserRuleCall_4_0() { return cElementsFunctionParserRuleCall_4_0; }
	}
	public class Index_pElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Index_p");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndex_pKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Index_p:
		//	'Index_p' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Index_p' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Index_p'
		public Keyword getIndex_pKeyword_0() { return cIndex_pKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ViewSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ViewSchema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ViewSchema:
		//	'ViewSchema' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ViewSchema' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ViewSchema'
		public Keyword getViewSchemaKeyword_0() { return cViewSchemaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class Table_pElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Table_p");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTable_pKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsForeignKeyParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsColumnPParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsRowParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Table_p:
		//	'Table_p' name=ID ':' '{'
		//	elements+=ForeignKey+
		//	elements+=ColumnP+
		//	elements+=Row+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Table_p' name=ID ':' '{' elements+=ForeignKey+ elements+=ColumnP+ elements+=Row+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Table_p'
		public Keyword getTable_pKeyword_0() { return cTable_pKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=ForeignKey+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//ForeignKey
		public RuleCall getElementsForeignKeyParserRuleCall_4_0() { return cElementsForeignKeyParserRuleCall_4_0; }
		
		//elements+=ColumnP+
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//ColumnP
		public RuleCall getElementsColumnPParserRuleCall_5_0() { return cElementsColumnPParserRuleCall_5_0; }
		
		//elements+=Row+
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//Row
		public RuleCall getElementsRowParserRuleCall_6_0() { return cElementsRowParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeignKeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsForeignKey_nParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsForeignKeyRefParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//ForeignKey:
		//	'ForeignKey'
		//	elements+=ForeignKey_n
		//	elements+=ForeignKeyRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'ForeignKey' elements+=ForeignKey_n elements+=ForeignKeyRef
		public Group getGroup() { return cGroup; }
		
		//'ForeignKey'
		public Keyword getForeignKeyKeyword_0() { return cForeignKeyKeyword_0; }
		
		//elements+=ForeignKey_n
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//ForeignKey_n
		public RuleCall getElementsForeignKey_nParserRuleCall_1_0() { return cElementsForeignKey_nParserRuleCall_1_0; }
		
		//elements+=ForeignKeyRef
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ForeignKeyRef
		public RuleCall getElementsForeignKeyRefParserRuleCall_2_0() { return cElementsForeignKeyRefParserRuleCall_2_0; }
	}
	public class ForeignKey_nElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ForeignKey_n");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeingKeyNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ForeignKey_n:
		//	'ForeingKeyName' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ForeingKeyName' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ForeingKeyName'
		public Keyword getForeingKeyNameKeyword_0() { return cForeingKeyNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ForeignKeyRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ForeignKeyRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForeignKeyRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForeignKeyRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsRefTable_pParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//ForeignKeyRef:
		//	{ForeignKeyRef} 'ForeignKeyRef'
		//	elements+=RefTable_p*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForeignKeyRef} 'ForeignKeyRef' elements+=RefTable_p*
		public Group getGroup() { return cGroup; }
		
		//{ForeignKeyRef}
		public Action getForeignKeyRefAction_0() { return cForeignKeyRefAction_0; }
		
		//'ForeignKeyRef'
		public Keyword getForeignKeyRefKeyword_1() { return cForeignKeyRefKeyword_1; }
		
		//elements+=RefTable_p*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//RefTable_p
		public RuleCall getElementsRefTable_pParserRuleCall_2_0() { return cElementsRefTable_pParserRuleCall_2_0; }
	}
	public class RefTable_pElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.RefTable_p");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefTable_pKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RefTable_p:
		//	'RefTable_p' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'RefTable_p' name=ID
		public Group getGroup() { return cGroup; }
		
		//'RefTable_p'
		public Keyword getRefTable_pKeyword_0() { return cRefTable_pKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ColumnPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ColumnP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsDatatypeDBParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsConstraintParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//ColumnP:
		//	'ColumnP' name=ID
		//	elements+=DatatypeDB
		//	elements+=Constraint*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ColumnP' name=ID elements+=DatatypeDB elements+=Constraint*
		public Group getGroup() { return cGroup; }
		
		//'ColumnP'
		public Keyword getColumnPKeyword_0() { return cColumnPKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=DatatypeDB
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//DatatypeDB
		public RuleCall getElementsDatatypeDBParserRuleCall_2_0() { return cElementsDatatypeDBParserRuleCall_2_0; }
		
		//elements+=Constraint*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Constraint
		public RuleCall getElementsConstraintParserRuleCall_3_0() { return cElementsConstraintParserRuleCall_3_0; }
	}
	public class DatatypeDBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.DatatypeDB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DatatypeDB:
		//	'DatatypeDB' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'DatatypeDB' name=ID
		public Group getGroup() { return cGroup; }
		
		//'DatatypeDB'
		public Keyword getDatatypeDBKeyword_0() { return cDatatypeDBKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Constraint:
		//	'Constraint' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Constraint' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPolicyParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//Row:
		//	'Row' name=ID
		//	elements+=Policy*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Row' name=ID elements+=Policy*
		public Group getGroup() { return cGroup; }
		
		//'Row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=Policy*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Policy
		public RuleCall getElementsPolicyParserRuleCall_2_0() { return cElementsPolicyParserRuleCall_2_0; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Policy:
		//	'Policy' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Policy' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Trigger:
		//	'Trigger' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Trigger' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Function:
		//	'Function' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Function' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PostgresUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PostgresUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostgresUserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPrivilegeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsQueryParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PostgresUser:
		//	'PostgresUser' name=ID ':' '{'
		//	elements+=Privilege
		//	elements+=Query*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'PostgresUser' name=ID ':' '{' elements+=Privilege elements+=Query* '}'
		public Group getGroup() { return cGroup; }
		
		//'PostgresUser'
		public Keyword getPostgresUserKeyword_0() { return cPostgresUserKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=Privilege
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Privilege
		public RuleCall getElementsPrivilegeParserRuleCall_4_0() { return cElementsPrivilegeParserRuleCall_4_0; }
		
		//elements+=Query*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//Query
		public RuleCall getElementsQueryParserRuleCall_5_0() { return cElementsQueryParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PrivilegeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Privilege");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrivilegeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Privilege:
		//	'Privilege' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Privilege' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Privilege'
		public Keyword getPrivilegeKeyword_0() { return cPrivilegeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsClauseParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Query:
		//	'Query'
		//	elements+=Clause;
		@Override public ParserRule getRule() { return rule; }
		
		//'Query' elements+=Clause
		public Group getGroup() { return cGroup; }
		
		//'Query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//elements+=Clause
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Clause
		public RuleCall getElementsClauseParserRuleCall_1_0() { return cElementsClauseParserRuleCall_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Clause:
		//	'Clause' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Clause' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Clause'
		public Keyword getClauseKeyword_0() { return cClauseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmazonWebServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AmazonWebServices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonWebServicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAmazonSimpleStorageServiceParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsAmazonElasticComputeCloudParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AmazonWebServices:
		//	'AmazonWebServices' name=ID ':' '{'
		//	elements+=AmazonSimpleStorageService
		//	elements+=AmazonElasticComputeCloud
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonWebServices' name=ID ':' '{' elements+=AmazonSimpleStorageService elements+=AmazonElasticComputeCloud '}'
		public Group getGroup() { return cGroup; }
		
		//'AmazonWebServices'
		public Keyword getAmazonWebServicesKeyword_0() { return cAmazonWebServicesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=AmazonSimpleStorageService
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//AmazonSimpleStorageService
		public RuleCall getElementsAmazonSimpleStorageServiceParserRuleCall_4_0() { return cElementsAmazonSimpleStorageServiceParserRuleCall_4_0; }
		
		//elements+=AmazonElasticComputeCloud
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//AmazonElasticComputeCloud
		public RuleCall getElementsAmazonElasticComputeCloudParserRuleCall_5_0() { return cElementsAmazonElasticComputeCloudParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AmazonSimpleStorageServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AmazonSimpleStorageService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonSimpleStorageServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsBatchOperationParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsBucketParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AmazonSimpleStorageService:
		//	'AmazonSimpleStorageService' ':' '{'
		//	elements+=BatchOperation*
		//	elements+=Bucket
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonSimpleStorageService' ':' '{' elements+=BatchOperation* elements+=Bucket '}'
		public Group getGroup() { return cGroup; }
		
		//'AmazonSimpleStorageService'
		public Keyword getAmazonSimpleStorageServiceKeyword_0() { return cAmazonSimpleStorageServiceKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=BatchOperation*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//BatchOperation
		public RuleCall getElementsBatchOperationParserRuleCall_3_0() { return cElementsBatchOperationParserRuleCall_3_0; }
		
		//elements+=Bucket
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//Bucket
		public RuleCall getElementsBucketParserRuleCall_4_0() { return cElementsBucketParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BatchOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BatchOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBatchOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BatchOperation:
		//	'BatchOperation' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'BatchOperation' name=ID
		public Group getGroup() { return cGroup; }
		
		//'BatchOperation'
		public Keyword getBatchOperationKeyword_0() { return cBatchOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BucketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Bucket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBucketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsBucketAccessParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAmazonFolderParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAmazonFileParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		
		//Bucket:
		//	'Bucket' name=ID
		//	elements+=BucketAccess
		//	elements+=AmazonFolder*
		//	elements+=AmazonFile+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Bucket' name=ID elements+=BucketAccess elements+=AmazonFolder* elements+=AmazonFile+
		public Group getGroup() { return cGroup; }
		
		//'Bucket'
		public Keyword getBucketKeyword_0() { return cBucketKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//elements+=BucketAccess
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//BucketAccess
		public RuleCall getElementsBucketAccessParserRuleCall_2_0() { return cElementsBucketAccessParserRuleCall_2_0; }
		
		//elements+=AmazonFolder*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AmazonFolder
		public RuleCall getElementsAmazonFolderParserRuleCall_3_0() { return cElementsAmazonFolderParserRuleCall_3_0; }
		
		//elements+=AmazonFile+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//AmazonFile
		public RuleCall getElementsAmazonFileParserRuleCall_4_0() { return cElementsAmazonFileParserRuleCall_4_0; }
	}
	public class BucketAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BucketAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBucketAccessKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cElementsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cElementsPublicAccessParserRuleCall_0_1_0 = (RuleCall)cElementsAssignment_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementsObjectsPublicParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cElementsBucketObjectsNotPublicParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cElementsOnlyAuthorizedParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//BucketAccess:
		//	'BucketAccess'
		//	elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic | elements+=OnlyAuthorized;
		@Override public ParserRule getRule() { return rule; }
		
		//'BucketAccess' elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic |
		//elements+=OnlyAuthorized
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BucketAccess' elements+=PublicAccess
		public Group getGroup_0() { return cGroup_0; }
		
		//'BucketAccess'
		public Keyword getBucketAccessKeyword_0_0() { return cBucketAccessKeyword_0_0; }
		
		//elements+=PublicAccess
		public Assignment getElementsAssignment_0_1() { return cElementsAssignment_0_1; }
		
		//PublicAccess
		public RuleCall getElementsPublicAccessParserRuleCall_0_1_0() { return cElementsPublicAccessParserRuleCall_0_1_0; }
		
		//elements+=ObjectsPublic
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//ObjectsPublic
		public RuleCall getElementsObjectsPublicParserRuleCall_1_0() { return cElementsObjectsPublicParserRuleCall_1_0; }
		
		//elements+=BucketObjectsNotPublic
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//BucketObjectsNotPublic
		public RuleCall getElementsBucketObjectsNotPublicParserRuleCall_2_0() { return cElementsBucketObjectsNotPublicParserRuleCall_2_0; }
		
		//elements+=OnlyAuthorized
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//OnlyAuthorized
		public RuleCall getElementsOnlyAuthorizedParserRuleCall_3_0() { return cElementsOnlyAuthorizedParserRuleCall_3_0; }
	}
	public class PublicAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.PublicAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PublicAccess:
		//	'PublicAccess' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'PublicAccess' name=ID
		public Group getGroup() { return cGroup; }
		
		//'PublicAccess'
		public Keyword getPublicAccessKeyword_0() { return cPublicAccessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ObjectsPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.ObjectsPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectsPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ObjectsPublic:
		//	'ObjectsPublic' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectsPublic' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ObjectsPublic'
		public Keyword getObjectsPublicKeyword_0() { return cObjectsPublicKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BucketObjectsNotPublicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.BucketObjectsNotPublic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBucketObjectsNotPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BucketObjectsNotPublic:
		//	'BucketObjectsNotPublic' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'BucketObjectsNotPublic' name=ID
		public Group getGroup() { return cGroup; }
		
		//'BucketObjectsNotPublic'
		public Keyword getBucketObjectsNotPublicKeyword_0() { return cBucketObjectsNotPublicKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class OnlyAuthorizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.OnlyAuthorized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnlyAuthorizedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OnlyAuthorized:
		//	'OnlyAuthorized' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'OnlyAuthorized' name=ID
		public Group getGroup() { return cGroup; }
		
		//'OnlyAuthorized'
		public Keyword getOnlyAuthorizedKeyword_0() { return cOnlyAuthorizedKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmazonFolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AmazonFolder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonFolderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AmazonFolder:
		//	'AmazonFolder' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonFolder' name=ID
		public Group getGroup() { return cGroup; }
		
		//'AmazonFolder'
		public Keyword getAmazonFolderKeyword_0() { return cAmazonFolderKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmazonFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AmazonFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsMetadataParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//AmazonFile:
		//	'AmazonFile'
		//	elements+=Metadata+;
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonFile' elements+=Metadata+
		public Group getGroup() { return cGroup; }
		
		//'AmazonFile'
		public Keyword getAmazonFileKeyword_0() { return cAmazonFileKeyword_0; }
		
		//elements+=Metadata+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Metadata
		public RuleCall getElementsMetadataParserRuleCall_1_0() { return cElementsMetadataParserRuleCall_1_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetadataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Metadata:
		//	'Metadata' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Metadata' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Metadata'
		public Keyword getMetadataKeyword_0() { return cMetadataKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmazonElasticComputeCloudElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.unal.mdd.photos.dsl.SoftGalleryLanguage.AmazonElasticComputeCloud");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmazonElasticComputeCloudKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AmazonElasticComputeCloud:
		//	'AmazonElasticComputeCloud' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'AmazonElasticComputeCloud' name=ID
		public Group getGroup() { return cGroup; }
		
		//'AmazonElasticComputeCloud'
		public Keyword getAmazonElasticComputeCloudKeyword_0() { return cAmazonElasticComputeCloudKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DomainElements pDomain;
	private final EntityElements pEntity;
	private final EntitiesElements pEntities;
	private final AtributePhotoElements pAtributePhoto;
	private final AtributeAlbumElements pAtributeAlbum;
	private final AtributeUserDomainElements pAtributeUserDomain;
	private final FunctionalityElements pFunctionality;
	private final FunctionalitiesElements pFunctionalities;
	private final ProfileManagementElements pProfileManagement;
	private final ProfileManagementFunctionsElements pProfileManagementFunctions;
	private final AppAccessElements pAppAccess;
	private final AppAccessFunctionsElements pAppAccessFunctions;
	private final AlbumManagementElements pAlbumManagement;
	private final AlbumManagementFunctionsElements pAlbumManagementFunctions;
	private final PhotoActionsElements pPhotoActions;
	private final PhotoActionsFunctionsElements pPhotoActionsFunctions;
	private final LandingActionsElements pLandingActions;
	private final LandingFunctionsElements pLandingFunctions;
	private final ExceptionsDomainElements pExceptionsDomain;
	private final ExceptionsTypeElements pExceptionsType;
	private final PhotoExceptionElements pPhotoException;
	private final AlbumExceptionElements pAlbumException;
	private final UserExceptionElements pUserException;
	private final ArchitectureElements pArchitecture;
	private final NTiersElements pNTiers;
	private final LayerElements pLayer;
	private final PresentationLayerElements pPresentationLayer;
	private final PresentationContentElements pPresentationContent;
	private final PresentationSegmentsElements pPresentationSegments;
	private final BusinessLogicLayerElements pBusinessLogicLayer;
	private final BusinessLogicContentElements pBusinessLogicContent;
	private final BusinessLogicSegmentsElements pBusinessLogicSegments;
	private final ControllerSegmentElementElements pControllerSegmentElement;
	private final SpecificationSegmentElementElements pSpecificationSegmentElement;
	private final CriteriaAttributeTypeElements pCriteriaAttributeType;
	private final DataPersistenceLayerElements pDataPersistenceLayer;
	private final DataPersistenceContentElements pDataPersistenceContent;
	private final DataPersistenceSegmentsElements pDataPersistenceSegments;
	private final SegmentStructureElements pSegmentStructure;
	private final SegmentStructureContentElements pSegmentStructureContent;
	private final DirectoryContentElements pDirectoryContent;
	private final DirectoriesElements pDirectories;
	private final SingleFileElements pSingleFile;
	private final MultipleFileElements pMultipleFile;
	private final LayerRelationsElements pLayerRelations;
	private final RelationTypeElements pRelationType;
	private final LayerSourceElements pLayerSource;
	private final LayerTargetElements pLayerTarget;
	private final LayerRelationNameElements pLayerRelationName;
	private final ArchitectureComponentsElements pArchitectureComponents;
	private final FrontEndElements pFrontEnd;
	private final BackEndElements pBackEnd;
	private final PersistenceDataComponentElements pPersistenceDataComponent;
	private final NTiersConnectionsElements pNTiersConnections;
	private final NTierConnectionContentElements pNTierConnectionContent;
	private final ConnectionTypeElements pConnectionType;
	private final NTierSourceElements pNTierSource;
	private final NTierTargetElements pNTierTarget;
	private final NTiersRelationsElements pNTiersRelations;
	private final TechnologyElements pTechnology;
	private final TechnologiesElements pTechnologies;
	private final SpringElements pSpring;
	private final SpringBootApplicationElements pSpringBootApplication;
	private final ConfigurationElements pConfiguration;
	private final EnableGlobalMethodSecurityElements pEnableGlobalMethodSecurity;
	private final EnableAuthorizationServerElements pEnableAuthorizationServer;
	private final EnableResourceServerElements pEnableResourceServer;
	private final EnableWebSecurityElements pEnableWebSecurity;
	private final SpringComponentElements pSpringComponent;
	private final OrderSpringElements pOrderSpring;
	private final SpringRepositoryElements pSpringRepository;
	private final SpringRepositoriesElements pSpringRepositories;
	private final SpringRepositoryAnnotationElements pSpringRepositoryAnnotation;
	private final RestControllerElements pRestController;
	private final SpecificationElements pSpecification;
	private final PredicateElements pPredicate;
	private final SearchCriteriaElements pSearchCriteria;
	private final AutowiredElements pAutowired;
	private final ResponseEntityElements pResponseEntity;
	private final MappingTypeElements pMappingType;
	private final RequestMappingElements pRequestMapping;
	private final RequestMappingValueElements pRequestMappingValue;
	private final RequestMappingMethodElements pRequestMappingMethod;
	private final RequestMappingProducesElements pRequestMappingProduces;
	private final PostMappingElements pPostMapping;
	private final GetMappingElements pGetMapping;
	private final PutMappingElements pPutMapping;
	private final DeleteMappingElements pDeleteMapping;
	private final ResponseParameterElements pResponseParameter;
	private final ResponseParameterAnnotationElements pResponseParameterAnnotation;
	private final ResponseParameterTypeElements pResponseParameterType;
	private final ResponseParameterNameElements pResponseParameterName;
	private final ExceptionHandlerElements pExceptionHandler;
	private final ExceptionProcessElements pExceptionProcess;
	private final SpringEntityElements pSpringEntity;
	private final SpringEntityAnnotationTypesElements pSpringEntityAnnotationTypes;
	private final StorageClientElements pStorageClient;
	private final StorageMemberElements pStorageMember;
	private final StorageMemberTypeElements pStorageMemberType;
	private final StorageMemberAnnotationElements pStorageMemberAnnotation;
	private final StorageActionElements pStorageAction;
	private final StorageActionAnnotationElements pStorageActionAnnotation;
	private final StorageActionReturnElements pStorageActionReturn;
	private final StorageActionMemberElements pStorageActionMember;
	private final StorageActionMemberTypeElements pStorageActionMemberType;
	private final StorageActionMemberNameElements pStorageActionMemberName;
	private final ReactElements pReact;
	private final ReactModulesElements pReactModules;
	private final ReactSubModulesElements pReactSubModules;
	private final ReactConfigurationElements pReactConfiguration;
	private final ReactDependenciesElements pReactDependencies;
	private final ReactDependenciesRulesElements pReactDependenciesRules;
	private final ReactDependenciesSubRulesElements pReactDependenciesSubRules;
	private final SingleDependenciesElements pSingleDependencies;
	private final PackageNameElements pPackageName;
	private final PackageVersionElements pPackageVersion;
	private final ReactConfigurationsElements pReactConfigurations;
	private final DOMConfigurationsElements pDOMConfigurations;
	private final DOMTypeConfElements pDOMTypeConf;
	private final ReactComponentsElements pReactComponents;
	private final ComponentsLogicElements pComponentsLogic;
	private final LogicContentElements pLogicContent;
	private final LogicStructureElements pLogicStructure;
	private final ComponentsUIElements pComponentsUI;
	private final UIContentElements pUIContent;
	private final ViewComponentContElements pViewComponentCont;
	private final SubcomponentContElements pSubcomponentCont;
	private final ComponentClassElements pComponentClass;
	private final ReactImportsElements pReactImports;
	private final ReactImportContentElements pReactImportContent;
	private final ReactFunctionsElements pReactFunctions;
	private final ReactConstructorElements pReactConstructor;
	private final StateElements pState;
	private final StateContentElements pStateContent;
	private final DataTypeElements pDataType;
	private final CoreFunctionsDeclarationElements pCoreFunctionsDeclaration;
	private final ReactLifeCycleElements pReactLifeCycle;
	private final ReactRenderElements pReactRender;
	private final PropsElements pProps;
	private final PropsTypeElements pPropsType;
	private final ReactCoreFunctionsElements pReactCoreFunctions;
	private final ComponentsStylesElements pComponentsStyles;
	private final ComponentsStylesContentElements pComponentsStylesContent;
	private final StylePropertiesElements pStyleProperties;
	private final StylePropertiesContentElements pStylePropertiesContent;
	private final ReactActionsElements pReactActions;
	private final ReactActionsContentElements pReactActionsContent;
	private final ReactServicesTypeElements pReactServicesType;
	private final ReactServiceContentElements pReactServiceContent;
	private final ReactServiceContRequestElements pReactServiceContRequest;
	private final ReactServiceRequestPropsElements pReactServiceRequestProps;
	private final ReactServicesRelationElements pReactServicesRelation;
	private final ReactsRelationServElements pReactsRelationServ;
	private final ReactRequestElements pReactRequest;
	private final ReactLibrariesElements pReactLibraries;
	private final ReactLibraryElements pReactLibrary;
	private final ReactLibraryTypeElements pReactLibraryType;
	private final ReactInfoElements pReactInfo;
	private final ReactInformationElements pReactInformation;
	private final ReactInformationTypeElements pReactInformationType;
	private final PostgreSQLElements pPostgreSQL;
	private final ClusterElements pCluster;
	private final DatabaseElements pDatabase;
	private final SchemaElements pSchema;
	private final Index_pElements pIndex_p;
	private final ViewSchemaElements pViewSchema;
	private final Table_pElements pTable_p;
	private final ForeignKeyElements pForeignKey;
	private final ForeignKey_nElements pForeignKey_n;
	private final ForeignKeyRefElements pForeignKeyRef;
	private final RefTable_pElements pRefTable_p;
	private final ColumnPElements pColumnP;
	private final DatatypeDBElements pDatatypeDB;
	private final ConstraintElements pConstraint;
	private final RowElements pRow;
	private final PolicyElements pPolicy;
	private final TriggerElements pTrigger;
	private final FunctionElements pFunction;
	private final PostgresUserElements pPostgresUser;
	private final PrivilegeElements pPrivilege;
	private final QueryElements pQuery;
	private final ClauseElements pClause;
	private final AmazonWebServicesElements pAmazonWebServices;
	private final AmazonSimpleStorageServiceElements pAmazonSimpleStorageService;
	private final BatchOperationElements pBatchOperation;
	private final BucketElements pBucket;
	private final BucketAccessElements pBucketAccess;
	private final PublicAccessElements pPublicAccess;
	private final ObjectsPublicElements pObjectsPublic;
	private final BucketObjectsNotPublicElements pBucketObjectsNotPublic;
	private final OnlyAuthorizedElements pOnlyAuthorized;
	private final AmazonFolderElements pAmazonFolder;
	private final AmazonFileElements pAmazonFile;
	private final MetadataElements pMetadata;
	private final AmazonElasticComputeCloudElements pAmazonElasticComputeCloud;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SoftGalleryLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDomain = new DomainElements();
		this.pEntity = new EntityElements();
		this.pEntities = new EntitiesElements();
		this.pAtributePhoto = new AtributePhotoElements();
		this.pAtributeAlbum = new AtributeAlbumElements();
		this.pAtributeUserDomain = new AtributeUserDomainElements();
		this.pFunctionality = new FunctionalityElements();
		this.pFunctionalities = new FunctionalitiesElements();
		this.pProfileManagement = new ProfileManagementElements();
		this.pProfileManagementFunctions = new ProfileManagementFunctionsElements();
		this.pAppAccess = new AppAccessElements();
		this.pAppAccessFunctions = new AppAccessFunctionsElements();
		this.pAlbumManagement = new AlbumManagementElements();
		this.pAlbumManagementFunctions = new AlbumManagementFunctionsElements();
		this.pPhotoActions = new PhotoActionsElements();
		this.pPhotoActionsFunctions = new PhotoActionsFunctionsElements();
		this.pLandingActions = new LandingActionsElements();
		this.pLandingFunctions = new LandingFunctionsElements();
		this.pExceptionsDomain = new ExceptionsDomainElements();
		this.pExceptionsType = new ExceptionsTypeElements();
		this.pPhotoException = new PhotoExceptionElements();
		this.pAlbumException = new AlbumExceptionElements();
		this.pUserException = new UserExceptionElements();
		this.pArchitecture = new ArchitectureElements();
		this.pNTiers = new NTiersElements();
		this.pLayer = new LayerElements();
		this.pPresentationLayer = new PresentationLayerElements();
		this.pPresentationContent = new PresentationContentElements();
		this.pPresentationSegments = new PresentationSegmentsElements();
		this.pBusinessLogicLayer = new BusinessLogicLayerElements();
		this.pBusinessLogicContent = new BusinessLogicContentElements();
		this.pBusinessLogicSegments = new BusinessLogicSegmentsElements();
		this.pControllerSegmentElement = new ControllerSegmentElementElements();
		this.pSpecificationSegmentElement = new SpecificationSegmentElementElements();
		this.pCriteriaAttributeType = new CriteriaAttributeTypeElements();
		this.pDataPersistenceLayer = new DataPersistenceLayerElements();
		this.pDataPersistenceContent = new DataPersistenceContentElements();
		this.pDataPersistenceSegments = new DataPersistenceSegmentsElements();
		this.pSegmentStructure = new SegmentStructureElements();
		this.pSegmentStructureContent = new SegmentStructureContentElements();
		this.pDirectoryContent = new DirectoryContentElements();
		this.pDirectories = new DirectoriesElements();
		this.pSingleFile = new SingleFileElements();
		this.pMultipleFile = new MultipleFileElements();
		this.pLayerRelations = new LayerRelationsElements();
		this.pRelationType = new RelationTypeElements();
		this.pLayerSource = new LayerSourceElements();
		this.pLayerTarget = new LayerTargetElements();
		this.pLayerRelationName = new LayerRelationNameElements();
		this.pArchitectureComponents = new ArchitectureComponentsElements();
		this.pFrontEnd = new FrontEndElements();
		this.pBackEnd = new BackEndElements();
		this.pPersistenceDataComponent = new PersistenceDataComponentElements();
		this.pNTiersConnections = new NTiersConnectionsElements();
		this.pNTierConnectionContent = new NTierConnectionContentElements();
		this.pConnectionType = new ConnectionTypeElements();
		this.pNTierSource = new NTierSourceElements();
		this.pNTierTarget = new NTierTargetElements();
		this.pNTiersRelations = new NTiersRelationsElements();
		this.pTechnology = new TechnologyElements();
		this.pTechnologies = new TechnologiesElements();
		this.pSpring = new SpringElements();
		this.pSpringBootApplication = new SpringBootApplicationElements();
		this.pConfiguration = new ConfigurationElements();
		this.pEnableGlobalMethodSecurity = new EnableGlobalMethodSecurityElements();
		this.pEnableAuthorizationServer = new EnableAuthorizationServerElements();
		this.pEnableResourceServer = new EnableResourceServerElements();
		this.pEnableWebSecurity = new EnableWebSecurityElements();
		this.pSpringComponent = new SpringComponentElements();
		this.pOrderSpring = new OrderSpringElements();
		this.pSpringRepository = new SpringRepositoryElements();
		this.pSpringRepositories = new SpringRepositoriesElements();
		this.pSpringRepositoryAnnotation = new SpringRepositoryAnnotationElements();
		this.pRestController = new RestControllerElements();
		this.pSpecification = new SpecificationElements();
		this.pPredicate = new PredicateElements();
		this.pSearchCriteria = new SearchCriteriaElements();
		this.pAutowired = new AutowiredElements();
		this.pResponseEntity = new ResponseEntityElements();
		this.pMappingType = new MappingTypeElements();
		this.pRequestMapping = new RequestMappingElements();
		this.pRequestMappingValue = new RequestMappingValueElements();
		this.pRequestMappingMethod = new RequestMappingMethodElements();
		this.pRequestMappingProduces = new RequestMappingProducesElements();
		this.pPostMapping = new PostMappingElements();
		this.pGetMapping = new GetMappingElements();
		this.pPutMapping = new PutMappingElements();
		this.pDeleteMapping = new DeleteMappingElements();
		this.pResponseParameter = new ResponseParameterElements();
		this.pResponseParameterAnnotation = new ResponseParameterAnnotationElements();
		this.pResponseParameterType = new ResponseParameterTypeElements();
		this.pResponseParameterName = new ResponseParameterNameElements();
		this.pExceptionHandler = new ExceptionHandlerElements();
		this.pExceptionProcess = new ExceptionProcessElements();
		this.pSpringEntity = new SpringEntityElements();
		this.pSpringEntityAnnotationTypes = new SpringEntityAnnotationTypesElements();
		this.pStorageClient = new StorageClientElements();
		this.pStorageMember = new StorageMemberElements();
		this.pStorageMemberType = new StorageMemberTypeElements();
		this.pStorageMemberAnnotation = new StorageMemberAnnotationElements();
		this.pStorageAction = new StorageActionElements();
		this.pStorageActionAnnotation = new StorageActionAnnotationElements();
		this.pStorageActionReturn = new StorageActionReturnElements();
		this.pStorageActionMember = new StorageActionMemberElements();
		this.pStorageActionMemberType = new StorageActionMemberTypeElements();
		this.pStorageActionMemberName = new StorageActionMemberNameElements();
		this.pReact = new ReactElements();
		this.pReactModules = new ReactModulesElements();
		this.pReactSubModules = new ReactSubModulesElements();
		this.pReactConfiguration = new ReactConfigurationElements();
		this.pReactDependencies = new ReactDependenciesElements();
		this.pReactDependenciesRules = new ReactDependenciesRulesElements();
		this.pReactDependenciesSubRules = new ReactDependenciesSubRulesElements();
		this.pSingleDependencies = new SingleDependenciesElements();
		this.pPackageName = new PackageNameElements();
		this.pPackageVersion = new PackageVersionElements();
		this.pReactConfigurations = new ReactConfigurationsElements();
		this.pDOMConfigurations = new DOMConfigurationsElements();
		this.pDOMTypeConf = new DOMTypeConfElements();
		this.pReactComponents = new ReactComponentsElements();
		this.pComponentsLogic = new ComponentsLogicElements();
		this.pLogicContent = new LogicContentElements();
		this.pLogicStructure = new LogicStructureElements();
		this.pComponentsUI = new ComponentsUIElements();
		this.pUIContent = new UIContentElements();
		this.pViewComponentCont = new ViewComponentContElements();
		this.pSubcomponentCont = new SubcomponentContElements();
		this.pComponentClass = new ComponentClassElements();
		this.pReactImports = new ReactImportsElements();
		this.pReactImportContent = new ReactImportContentElements();
		this.pReactFunctions = new ReactFunctionsElements();
		this.pReactConstructor = new ReactConstructorElements();
		this.pState = new StateElements();
		this.pStateContent = new StateContentElements();
		this.pDataType = new DataTypeElements();
		this.pCoreFunctionsDeclaration = new CoreFunctionsDeclarationElements();
		this.pReactLifeCycle = new ReactLifeCycleElements();
		this.pReactRender = new ReactRenderElements();
		this.pProps = new PropsElements();
		this.pPropsType = new PropsTypeElements();
		this.pReactCoreFunctions = new ReactCoreFunctionsElements();
		this.pComponentsStyles = new ComponentsStylesElements();
		this.pComponentsStylesContent = new ComponentsStylesContentElements();
		this.pStyleProperties = new StylePropertiesElements();
		this.pStylePropertiesContent = new StylePropertiesContentElements();
		this.pReactActions = new ReactActionsElements();
		this.pReactActionsContent = new ReactActionsContentElements();
		this.pReactServicesType = new ReactServicesTypeElements();
		this.pReactServiceContent = new ReactServiceContentElements();
		this.pReactServiceContRequest = new ReactServiceContRequestElements();
		this.pReactServiceRequestProps = new ReactServiceRequestPropsElements();
		this.pReactServicesRelation = new ReactServicesRelationElements();
		this.pReactsRelationServ = new ReactsRelationServElements();
		this.pReactRequest = new ReactRequestElements();
		this.pReactLibraries = new ReactLibrariesElements();
		this.pReactLibrary = new ReactLibraryElements();
		this.pReactLibraryType = new ReactLibraryTypeElements();
		this.pReactInfo = new ReactInfoElements();
		this.pReactInformation = new ReactInformationElements();
		this.pReactInformationType = new ReactInformationTypeElements();
		this.pPostgreSQL = new PostgreSQLElements();
		this.pCluster = new ClusterElements();
		this.pDatabase = new DatabaseElements();
		this.pSchema = new SchemaElements();
		this.pIndex_p = new Index_pElements();
		this.pViewSchema = new ViewSchemaElements();
		this.pTable_p = new Table_pElements();
		this.pForeignKey = new ForeignKeyElements();
		this.pForeignKey_n = new ForeignKey_nElements();
		this.pForeignKeyRef = new ForeignKeyRefElements();
		this.pRefTable_p = new RefTable_pElements();
		this.pColumnP = new ColumnPElements();
		this.pDatatypeDB = new DatatypeDBElements();
		this.pConstraint = new ConstraintElements();
		this.pRow = new RowElements();
		this.pPolicy = new PolicyElements();
		this.pTrigger = new TriggerElements();
		this.pFunction = new FunctionElements();
		this.pPostgresUser = new PostgresUserElements();
		this.pPrivilege = new PrivilegeElements();
		this.pQuery = new QueryElements();
		this.pClause = new ClauseElements();
		this.pAmazonWebServices = new AmazonWebServicesElements();
		this.pAmazonSimpleStorageService = new AmazonSimpleStorageServiceElements();
		this.pBatchOperation = new BatchOperationElements();
		this.pBucket = new BucketElements();
		this.pBucketAccess = new BucketAccessElements();
		this.pPublicAccess = new PublicAccessElements();
		this.pObjectsPublic = new ObjectsPublicElements();
		this.pBucketObjectsNotPublic = new BucketObjectsNotPublicElements();
		this.pOnlyAuthorized = new OnlyAuthorizedElements();
		this.pAmazonFolder = new AmazonFolderElements();
		this.pAmazonFile = new AmazonFileElements();
		this.pMetadata = new MetadataElements();
		this.pAmazonElasticComputeCloud = new AmazonElasticComputeCloudElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.unal.mdd.photos.dsl.SoftGalleryLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'System' ':' '{'
	//	elements+=Domain
	//	elements+=Architecture
	//	elements+=Technology '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// ------------------------------
	//// Domain
	//// ------------------------------
	//Domain:
	//	'Domain' name=ID ':' '{'
	//	entitydomain+=Entity
	//	entityfuncs+=Functionality
	//	exceptionsdomain+=ExceptionsDomain
	//	'}';
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Entity:
	//	'Entities' ':' '{'
	//	elements+=Entities+
	//	'}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Entities:
	//	'PhotoEntity' ':' name=ID
	//	atributePhoto+=AtributePhoto+ |
	//	'AlbumEntity' ':' name=ID
	//	atributeAlbum+=AtributeAlbum+ |
	//	'UserEntity' ':' name=ID
	//	atributeUserDomain+=AtributeUserDomain+;
	public EntitiesElements getEntitiesAccess() {
		return pEntities;
	}
	
	public ParserRule getEntitiesRule() {
		return getEntitiesAccess().getRule();
	}
	
	//AtributePhoto:
	//	'namePhoto' name=ID |
	//	'urlPhoto' name=ID |
	//	'albumIdPhoto' name=ID;
	public AtributePhotoElements getAtributePhotoAccess() {
		return pAtributePhoto;
	}
	
	public ParserRule getAtributePhotoRule() {
		return getAtributePhotoAccess().getRule();
	}
	
	//AtributeAlbum:
	//	'nameAlbum' name=ID |
	//	'userIdAlbum' name=ID;
	public AtributeAlbumElements getAtributeAlbumAccess() {
		return pAtributeAlbum;
	}
	
	public ParserRule getAtributeAlbumRule() {
		return getAtributeAlbumAccess().getRule();
	}
	
	//AtributeUserDomain:
	//	'userNameUser' name=ID |
	//	'firstNameUser' name=ID |
	//	'lastNameUser' name=ID |
	//	'profileDescriptionUser' name=ID |
	//	'passwordUser' name=ID |
	//	'emailUser' name=ID;
	public AtributeUserDomainElements getAtributeUserDomainAccess() {
		return pAtributeUserDomain;
	}
	
	public ParserRule getAtributeUserDomainRule() {
		return getAtributeUserDomainAccess().getRule();
	}
	
	//Functionality:
	//	'Functionalities' ':' '{'
	//	elements+=Functionalities '}';
	public FunctionalityElements getFunctionalityAccess() {
		return pFunctionality;
	}
	
	public ParserRule getFunctionalityRule() {
		return getFunctionalityAccess().getRule();
	}
	
	//Functionalities:
	//	functions+=ProfileManagement
	//	elements+=AppAccess
	//	items+=AlbumManagement
	//	resources+=PhotoActions
	//	aditionals+=LandingActions;
	public FunctionalitiesElements getFunctionalitiesAccess() {
		return pFunctionalities;
	}
	
	public ParserRule getFunctionalitiesRule() {
		return getFunctionalitiesAccess().getRule();
	}
	
	//ProfileManagement:
	//	'ProfileManagement' ':'
	//	items+=ProfileManagementFunctions;
	public ProfileManagementElements getProfileManagementAccess() {
		return pProfileManagement;
	}
	
	public ParserRule getProfileManagementRule() {
		return getProfileManagementAccess().getRule();
	}
	
	//ProfileManagementFunctions:
	//	'ViewProfilePhoto' viewprofileName=ID
	//	'EditProfileInfo' editProfileName=ID;
	public ProfileManagementFunctionsElements getProfileManagementFunctionsAccess() {
		return pProfileManagementFunctions;
	}
	
	public ParserRule getProfileManagementFunctionsRule() {
		return getProfileManagementFunctionsAccess().getRule();
	}
	
	//AppAccess:
	//	'AppAccess' ':'
	//	items+=AppAccessFunctions;
	public AppAccessElements getAppAccessAccess() {
		return pAppAccess;
	}
	
	public ParserRule getAppAccessRule() {
		return getAppAccessAccess().getRule();
	}
	
	//AppAccessFunctions:
	//	'Login' loginName=ID
	//	'Register' registerName=ID;
	public AppAccessFunctionsElements getAppAccessFunctionsAccess() {
		return pAppAccessFunctions;
	}
	
	public ParserRule getAppAccessFunctionsRule() {
		return getAppAccessFunctionsAccess().getRule();
	}
	
	//AlbumManagement:
	//	'AlbumManagement' ':'
	//	items+=AlbumManagementFunctions;
	public AlbumManagementElements getAlbumManagementAccess() {
		return pAlbumManagement;
	}
	
	public ParserRule getAlbumManagementRule() {
		return getAlbumManagementAccess().getRule();
	}
	
	//AlbumManagementFunctions:
	//	'CreateAlbum' createdAlbName=ID
	//	'SelectAlbum' selectAlbName=ID;
	public AlbumManagementFunctionsElements getAlbumManagementFunctionsAccess() {
		return pAlbumManagementFunctions;
	}
	
	public ParserRule getAlbumManagementFunctionsRule() {
		return getAlbumManagementFunctionsAccess().getRule();
	}
	
	//PhotoActions:
	//	'PhotoActions' ':'
	//	items+=PhotoActionsFunctions;
	public PhotoActionsElements getPhotoActionsAccess() {
		return pPhotoActions;
	}
	
	public ParserRule getPhotoActionsRule() {
		return getPhotoActionsAccess().getRule();
	}
	
	//PhotoActionsFunctions:
	//	'ViewAllPhotos' nameGenerico=ID
	//	'ViewExtendedPhoto' namePhoto=ID
	//	'LoadPhoto' nameLoad=ID;
	public PhotoActionsFunctionsElements getPhotoActionsFunctionsAccess() {
		return pPhotoActionsFunctions;
	}
	
	public ParserRule getPhotoActionsFunctionsRule() {
		return getPhotoActionsFunctionsAccess().getRule();
	}
	
	//LandingActions:
	//	'LandingActions' ':'
	//	items+=LandingFunctions;
	public LandingActionsElements getLandingActionsAccess() {
		return pLandingActions;
	}
	
	public ParserRule getLandingActionsRule() {
		return getLandingActionsAccess().getRule();
	}
	
	//LandingFunctions:
	//	'ViewCarousel' nameCarouselName=ID
	//	'PassPhoto' passPhotoName=ID;
	public LandingFunctionsElements getLandingFunctionsAccess() {
		return pLandingFunctions;
	}
	
	public ParserRule getLandingFunctionsRule() {
		return getLandingFunctionsAccess().getRule();
	}
	
	//ExceptionsDomain:
	//	'DomainExceptions' ':' '{'
	//	exceptionsType+=ExceptionsType+
	//	'}';
	public ExceptionsDomainElements getExceptionsDomainAccess() {
		return pExceptionsDomain;
	}
	
	public ParserRule getExceptionsDomainRule() {
		return getExceptionsDomainAccess().getRule();
	}
	
	//ExceptionsType:
	//	'PhotoException' ':' photoException+=PhotoException+ |
	//	'AlbumException' ':' albumException+=AlbumException+ |
	//	'UserException' ':' userException+=UserException+;
	public ExceptionsTypeElements getExceptionsTypeAccess() {
		return pExceptionsType;
	}
	
	public ParserRule getExceptionsTypeRule() {
		return getExceptionsTypeAccess().getRule();
	}
	
	//PhotoException:
	//	'PhotoNotFound' name=ID |
	//	'PhotoUploadError' name=ID |
	//	'PhotoNotCreated' name=ID |
	//	'PhotoNotDeleted' name=ID;
	public PhotoExceptionElements getPhotoExceptionAccess() {
		return pPhotoException;
	}
	
	public ParserRule getPhotoExceptionRule() {
		return getPhotoExceptionAccess().getRule();
	}
	
	//AlbumException:
	//	'AlbumNotFound' name=ID |
	//	'PhotosFromAlbumNotFound' name=ID |
	//	'AlbumHasNoPhotos' name=ID |
	//	'MissingParametersForNewAlbum' name=ID |
	//	'UserIdIsNotNumber' name=ID |
	//	'AlbumNotCreated' name=ID;
	public AlbumExceptionElements getAlbumExceptionAccess() {
		return pAlbumException;
	}
	
	public ParserRule getAlbumExceptionRule() {
		return getAlbumExceptionAccess().getRule();
	}
	
	//UserException:
	//	'UserNotFound' name=ID |
	//	'AlbumsFromUserNotFound' name=ID |
	//	'UserHasNoAlbums' name=ID |
	//	'UserHasNoPhotos' name=ID |
	//	'MissingParametersForNewUser' name=ID |
	//	'UserNotCreated' name=ID |
	//	'AlbumNotCreatedForNewUser' name=ID |
	//	'MissingParametersForEditUser' name=ID |
	//	'WrongLoginInfo' name=ID |
	//	'MissingParametersForLogin' name=ID |
	//	'UserIdIsNotNumber' name=ID |
	//	'UserToEditDoesNotExist' name=ID |
	//	'UserNotEdited' name=ID;
	public UserExceptionElements getUserExceptionAccess() {
		return pUserException;
	}
	
	public ParserRule getUserExceptionRule() {
		return getUserExceptionAccess().getRule();
	}
	
	//// ------------------------------
	//// Architecture
	//// ------------------------------
	//Architecture:
	//	'Architecture:' '{'
	//	elements+=NTiers+
	//	elements+=NTiersConnections+
	//	'}';
	public ArchitectureElements getArchitectureAccess() {
		return pArchitecture;
	}
	
	public ParserRule getArchitectureRule() {
		return getArchitectureAccess().getRule();
	}
	
	//NTiers:
	//	'Layers'
	//	elements+=Layer+
	//	'LayersRelations'
	//	elements+=LayerRelations+
	//	'ArchitectureComponents'
	//	elements+=ArchitectureComponents+;
	public NTiersElements getNTiersAccess() {
		return pNTiers;
	}
	
	public ParserRule getNTiersRule() {
		return getNTiersAccess().getRule();
	}
	
	//Layer:
	//	layer+=PresentationLayer
	//	layer+=BusinessLogicLayer
	//	layer+=DataPersistenceLayer;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//PresentationLayer:
	//	'PresentationLayer'
	//	presentationLayer+=PresentationContent
	//	presentationLayer+=SegmentStructure;
	public PresentationLayerElements getPresentationLayerAccess() {
		return pPresentationLayer;
	}
	
	public ParserRule getPresentationLayerRule() {
		return getPresentationLayerAccess().getRule();
	}
	
	//PresentationContent:
	//	'PresentationSegments'
	//	elements+=PresentationSegments;
	public PresentationContentElements getPresentationContentAccess() {
		return pPresentationContent;
	}
	
	public ParserRule getPresentationContentRule() {
		return getPresentationContentAccess().getRule();
	}
	
	//PresentationSegments:
	//	'PresentationView' presentationSName=ID
	//	'PresentationComponent' presentationCName=ID
	//	'PresentationAction' presentationAName=ID;
	public PresentationSegmentsElements getPresentationSegmentsAccess() {
		return pPresentationSegments;
	}
	
	public ParserRule getPresentationSegmentsRule() {
		return getPresentationSegmentsAccess().getRule();
	}
	
	//BusinessLogicLayer:
	//	'BusinessLogicLayer'
	//	businessLogicLayer+=BusinessLogicContent
	//	businessLogicLayer+=SegmentStructure;
	public BusinessLogicLayerElements getBusinessLogicLayerAccess() {
		return pBusinessLogicLayer;
	}
	
	public ParserRule getBusinessLogicLayerRule() {
		return getBusinessLogicLayerAccess().getRule();
	}
	
	//BusinessLogicContent:
	//	'BusinessLogicSegments'
	//	businessLogicSegments+=BusinessLogicSegments+;
	public BusinessLogicContentElements getBusinessLogicContentAccess() {
		return pBusinessLogicContent;
	}
	
	public ParserRule getBusinessLogicContentRule() {
		return getBusinessLogicContentAccess().getRule();
	}
	
	//BusinessLogicSegments:
	//	'ControllerSegment' name=ID
	//	controllerSegmentElement+=ControllerSegmentElement+ |
	//	'ModelSegment' name=ID |
	//	'RepositorySegment' name=ID |
	//	'SecuritySegment' name=ID |
	//	'SpecificationSegment' name=ID
	//	specificationSegmentElement+=SpecificationSegmentElement+;
	public BusinessLogicSegmentsElements getBusinessLogicSegmentsAccess() {
		return pBusinessLogicSegments;
	}
	
	public ParserRule getBusinessLogicSegmentsRule() {
		return getBusinessLogicSegmentsAccess().getRule();
	}
	
	//ControllerSegmentElement:
	//	'AmazonSegment' name=ID |
	//	'ExceptionSegment' name=ID;
	public ControllerSegmentElementElements getControllerSegmentElementAccess() {
		return pControllerSegmentElement;
	}
	
	public ParserRule getControllerSegmentElementRule() {
		return getControllerSegmentElementAccess().getRule();
	}
	
	//SpecificationSegmentElement:
	//	'DefinedSearchCriteria' name=ID criteriaAttributeType+=CriteriaAttributeType+;
	public SpecificationSegmentElementElements getSpecificationSegmentElementAccess() {
		return pSpecificationSegmentElement;
	}
	
	public ParserRule getSpecificationSegmentElementRule() {
		return getSpecificationSegmentElementAccess().getRule();
	}
	
	//CriteriaAttributeType:
	//	'CriteriaAttribute' name=ID;
	public CriteriaAttributeTypeElements getCriteriaAttributeTypeAccess() {
		return pCriteriaAttributeType;
	}
	
	public ParserRule getCriteriaAttributeTypeRule() {
		return getCriteriaAttributeTypeAccess().getRule();
	}
	
	//DataPersistenceLayer:
	//	'DataPersistenceLayer'
	//	elements+=DataPersistenceContent;
	public DataPersistenceLayerElements getDataPersistenceLayerAccess() {
		return pDataPersistenceLayer;
	}
	
	public ParserRule getDataPersistenceLayerRule() {
		return getDataPersistenceLayerAccess().getRule();
	}
	
	//DataPersistenceContent:
	//	'DataPersistenceSegments'
	//	elements+=DataPersistenceSegments;
	public DataPersistenceContentElements getDataPersistenceContentAccess() {
		return pDataPersistenceContent;
	}
	
	public ParserRule getDataPersistenceContentRule() {
		return getDataPersistenceContentAccess().getRule();
	}
	
	//DataPersistenceSegments:
	//	'PostgreSLQSegment' postSName=ID
	//	'AmazonS3Storage' amazonSName=ID;
	public DataPersistenceSegmentsElements getDataPersistenceSegmentsAccess() {
		return pDataPersistenceSegments;
	}
	
	public ParserRule getDataPersistenceSegmentsRule() {
		return getDataPersistenceSegmentsAccess().getRule();
	}
	
	//SegmentStructure:
	//	'SegmentStructure'
	//	elements+=SegmentStructureContent;
	public SegmentStructureElements getSegmentStructureAccess() {
		return pSegmentStructure;
	}
	
	public ParserRule getSegmentStructureRule() {
		return getSegmentStructureAccess().getRule();
	}
	
	//SegmentStructureContent:
	//	'Directories' name=ID
	//	elements+=DirectoryContent+;
	public SegmentStructureContentElements getSegmentStructureContentAccess() {
		return pSegmentStructureContent;
	}
	
	public ParserRule getSegmentStructureContentRule() {
		return getSegmentStructureContentAccess().getRule();
	}
	
	//DirectoryContent:
	//	'Directory' name=ID
	//	directories+=Directories | directories+=SingleFile;
	public DirectoryContentElements getDirectoryContentAccess() {
		return pDirectoryContent;
	}
	
	public ParserRule getDirectoryContentRule() {
		return getDirectoryContentAccess().getRule();
	}
	
	//Directories:
	//	elements+=MultipleFile;
	public DirectoriesElements getDirectoriesAccess() {
		return pDirectories;
	}
	
	public ParserRule getDirectoriesRule() {
		return getDirectoriesAccess().getRule();
	}
	
	//SingleFile:
	//	'SingleFile' name=ID;
	public SingleFileElements getSingleFileAccess() {
		return pSingleFile;
	}
	
	public ParserRule getSingleFileRule() {
		return getSingleFileAccess().getRule();
	}
	
	//MultipleFile:
	//	'CommonFile' name=ID;
	public MultipleFileElements getMultipleFileAccess() {
		return pMultipleFile;
	}
	
	public ParserRule getMultipleFileRule() {
		return getMultipleFileAccess().getRule();
	}
	
	//LayerRelations:
	//	layerelations+=RelationType name=ID
	//	layerorigin+=LayerSource
	//	layertarget+=LayerTarget;
	public LayerRelationsElements getLayerRelationsAccess() {
		return pLayerRelations;
	}
	
	public ParserRule getLayerRelationsRule() {
		return getLayerRelationsAccess().getRule();
	}
	
	//RelationType:
	//	'AllowedToUse' |
	//	'AllowToUseBelow';
	public RelationTypeElements getRelationTypeAccess() {
		return pRelationType;
	}
	
	public ParserRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}
	
	//LayerSource:
	//	'source'
	//	layerelations+=LayerRelationName;
	public LayerSourceElements getLayerSourceAccess() {
		return pLayerSource;
	}
	
	public ParserRule getLayerSourceRule() {
		return getLayerSourceAccess().getRule();
	}
	
	//LayerTarget:
	//	'target'
	//	layerelations+=LayerRelationName;
	public LayerTargetElements getLayerTargetAccess() {
		return pLayerTarget;
	}
	
	public ParserRule getLayerTargetRule() {
		return getLayerTargetAccess().getRule();
	}
	
	//LayerRelationName:
	//	'PresentationLayer' |
	//	'BusinessLogicLayer' |
	//	'PersistenceDataLayer';
	public LayerRelationNameElements getLayerRelationNameAccess() {
		return pLayerRelationName;
	}
	
	public ParserRule getLayerRelationNameRule() {
		return getLayerRelationNameAccess().getRule();
	}
	
	//ArchitectureComponents:
	//	'SystemComponents'
	//	archFeComponent+=FrontEnd
	//	archBeComponent+=BackEnd
	//	archPdComponent+=PersistenceDataComponent;
	public ArchitectureComponentsElements getArchitectureComponentsAccess() {
		return pArchitectureComponents;
	}
	
	public ParserRule getArchitectureComponentsRule() {
		return getArchitectureComponentsAccess().getRule();
	}
	
	//FrontEnd:
	//	'FrontEndComponent' name=ID;
	public FrontEndElements getFrontEndAccess() {
		return pFrontEnd;
	}
	
	public ParserRule getFrontEndRule() {
		return getFrontEndAccess().getRule();
	}
	
	//BackEnd:
	//	'BackEndComponent' name=ID;
	public BackEndElements getBackEndAccess() {
		return pBackEnd;
	}
	
	public ParserRule getBackEndRule() {
		return getBackEndAccess().getRule();
	}
	
	//PersistenceDataComponent:
	//	'PersistenceDataComponent' name=ID;
	public PersistenceDataComponentElements getPersistenceDataComponentAccess() {
		return pPersistenceDataComponent;
	}
	
	public ParserRule getPersistenceDataComponentRule() {
		return getPersistenceDataComponentAccess().getRule();
	}
	
	//NTiersConnections:
	//	'Connectors'
	//	ntierconnections+=NTierConnectionContent+;
	public NTiersConnectionsElements getNTiersConnectionsAccess() {
		return pNTiersConnections;
	}
	
	public ParserRule getNTiersConnectionsRule() {
		return getNTiersConnectionsAccess().getRule();
	}
	
	//NTierConnectionContent:
	//	ntierconnection+=ConnectionType nTierName=ID
	//	ntierorigin+=NTierSource
	//	ntiertarget+=NTierTarget;
	public NTierConnectionContentElements getNTierConnectionContentAccess() {
		return pNTierConnectionContent;
	}
	
	public ParserRule getNTierConnectionContentRule() {
		return getNTierConnectionContentAccess().getRule();
	}
	
	//ConnectionType:
	//	'REST' |
	//	'PostgreSQLConnection' |
	//	'AmazonS3API';
	public ConnectionTypeElements getConnectionTypeAccess() {
		return pConnectionType;
	}
	
	public ParserRule getConnectionTypeRule() {
		return getConnectionTypeAccess().getRule();
	}
	
	//NTierSource:
	//	'source'
	//	ntierconnection+=NTiersRelations;
	public NTierSourceElements getNTierSourceAccess() {
		return pNTierSource;
	}
	
	public ParserRule getNTierSourceRule() {
		return getNTierSourceAccess().getRule();
	}
	
	//NTierTarget:
	//	'target'
	//	ntierconnection+=NTiersRelations;
	public NTierTargetElements getNTierTargetAccess() {
		return pNTierTarget;
	}
	
	public ParserRule getNTierTargetRule() {
		return getNTierTargetAccess().getRule();
	}
	
	//NTiersRelations:
	//	'FrontEndComponent' name=ID |
	//	'BackEndComponent' name=ID |
	//	'PersistenceDataComponent' name=ID |
	//	'AmazonService' name=ID;
	public NTiersRelationsElements getNTiersRelationsAccess() {
		return pNTiersRelations;
	}
	
	public ParserRule getNTiersRelationsRule() {
		return getNTiersRelationsAccess().getRule();
	}
	
	//// ------------------------------
	//// Technology
	//// ------------------------------
	//Technology:
	//	'Technology' name=ID ':' '{'
	//	elements+=Technologies
	//	'}';
	public TechnologyElements getTechnologyAccess() {
		return pTechnology;
	}
	
	public ParserRule getTechnologyRule() {
		return getTechnologyAccess().getRule();
	}
	
	//Technologies:
	//	techspring+=Spring
	//	techreact+=React
	//	techpostgresql+=PostgreSQL
	//	techamazon+=AmazonWebServices;
	public TechnologiesElements getTechnologiesAccess() {
		return pTechnologies;
	}
	
	public ParserRule getTechnologiesRule() {
		return getTechnologiesAccess().getRule();
	}
	
	//Spring:
	//	'Spring' name=ID ':' '{'
	//	elements+=SpringBootApplication
	//	'}';
	public SpringElements getSpringAccess() {
		return pSpring;
	}
	
	public ParserRule getSpringRule() {
		return getSpringAccess().getRule();
	}
	
	//SpringBootApplication:
	//	'SpringBootApplication'
	//	elements+=Configuration
	//	elements+=SpringComponent+
	//	elements+=SpringRepository+
	//	elements+=RestController+
	//	elements+=SpringEntity+
	//	elements+=StorageClient;
	public SpringBootApplicationElements getSpringBootApplicationAccess() {
		return pSpringBootApplication;
	}
	
	public ParserRule getSpringBootApplicationRule() {
		return getSpringBootApplicationAccess().getRule();
	}
	
	//Configuration:
	//	'Configuration' ':' '{'
	//	elements+=EnableGlobalMethodSecurity
	//	elements+=EnableAuthorizationServer
	//	elements+=EnableResourceServer
	//	elements+=EnableWebSecurity
	//	'}';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//EnableGlobalMethodSecurity:
	//	'EnableGlobalMethodSecurity' name=ID;
	public EnableGlobalMethodSecurityElements getEnableGlobalMethodSecurityAccess() {
		return pEnableGlobalMethodSecurity;
	}
	
	public ParserRule getEnableGlobalMethodSecurityRule() {
		return getEnableGlobalMethodSecurityAccess().getRule();
	}
	
	//EnableAuthorizationServer:
	//	'EnableAuthorizationServer' name=ID;
	public EnableAuthorizationServerElements getEnableAuthorizationServerAccess() {
		return pEnableAuthorizationServer;
	}
	
	public ParserRule getEnableAuthorizationServerRule() {
		return getEnableAuthorizationServerAccess().getRule();
	}
	
	//EnableResourceServer:
	//	'EnableResourceServer' name=ID;
	public EnableResourceServerElements getEnableResourceServerAccess() {
		return pEnableResourceServer;
	}
	
	public ParserRule getEnableResourceServerRule() {
		return getEnableResourceServerAccess().getRule();
	}
	
	//EnableWebSecurity:
	//	'EnableWebSecurity' name=ID;
	public EnableWebSecurityElements getEnableWebSecurityAccess() {
		return pEnableWebSecurity;
	}
	
	public ParserRule getEnableWebSecurityRule() {
		return getEnableWebSecurityAccess().getRule();
	}
	
	//SpringComponent:
	//	'SpringComponent' ':' '{'
	//	elements+=OrderSpring
	//	'}';
	public SpringComponentElements getSpringComponentAccess() {
		return pSpringComponent;
	}
	
	public ParserRule getSpringComponentRule() {
		return getSpringComponentAccess().getRule();
	}
	
	//OrderSpring:
	//	'OrderSpring' name=ID;
	public OrderSpringElements getOrderSpringAccess() {
		return pOrderSpring;
	}
	
	public ParserRule getOrderSpringRule() {
		return getOrderSpringAccess().getRule();
	}
	
	//SpringRepository:
	//	'SpringRepositories' ':' '{'
	//	elements+=SpringRepositories+
	//	elements+=SpringRepositoryAnnotation+
	//	'}';
	public SpringRepositoryElements getSpringRepositoryAccess() {
		return pSpringRepository;
	}
	
	public ParserRule getSpringRepositoryRule() {
		return getSpringRepositoryAccess().getRule();
	}
	
	//SpringRepositories:
	//	'SpringRepository' name=ID;
	public SpringRepositoriesElements getSpringRepositoriesAccess() {
		return pSpringRepositories;
	}
	
	public ParserRule getSpringRepositoriesRule() {
		return getSpringRepositoriesAccess().getRule();
	}
	
	//SpringRepositoryAnnotation:
	//	'SpringRepositoryAnnotation' name=ID;
	public SpringRepositoryAnnotationElements getSpringRepositoryAnnotationAccess() {
		return pSpringRepositoryAnnotation;
	}
	
	public ParserRule getSpringRepositoryAnnotationRule() {
		return getSpringRepositoryAnnotationAccess().getRule();
	}
	
	//RestController:
	//	'RestController' name=ID ':' '{'
	//	elements+=Specification
	//	elements+=Autowired*
	//	elements+=ResponseEntity*
	//	elements+=ExceptionHandler
	//	'}';
	public RestControllerElements getRestControllerAccess() {
		return pRestController;
	}
	
	public ParserRule getRestControllerRule() {
		return getRestControllerAccess().getRule();
	}
	
	//Specification:
	//	'Specification'
	//	elements+=Predicate+
	//	elements+=SearchCriteria;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//Predicate:
	//	'Predicate' name=ID;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//SearchCriteria:
	//	'SearchCriteria' name=ID;
	public SearchCriteriaElements getSearchCriteriaAccess() {
		return pSearchCriteria;
	}
	
	public ParserRule getSearchCriteriaRule() {
		return getSearchCriteriaAccess().getRule();
	}
	
	//Autowired:
	//	'Autowired' name=ID;
	public AutowiredElements getAutowiredAccess() {
		return pAutowired;
	}
	
	public ParserRule getAutowiredRule() {
		return getAutowiredAccess().getRule();
	}
	
	//ResponseEntity:
	//	'ResponseEntity' name=ID
	//	type+=MappingType
	//	elements+=ResponseParameter*;
	public ResponseEntityElements getResponseEntityAccess() {
		return pResponseEntity;
	}
	
	public ParserRule getResponseEntityRule() {
		return getResponseEntityAccess().getRule();
	}
	
	//MappingType:
	//	RequestMapping | PostMapping | GetMapping | PutMapping | DeleteMapping;
	public MappingTypeElements getMappingTypeAccess() {
		return pMappingType;
	}
	
	public ParserRule getMappingTypeRule() {
		return getMappingTypeAccess().getRule();
	}
	
	//RequestMapping:
	//	'RequestMapping'
	//	value+=RequestMappingValue
	//	method+=RequestMappingMethod
	//	produces+=RequestMappingProduces;
	public RequestMappingElements getRequestMappingAccess() {
		return pRequestMapping;
	}
	
	public ParserRule getRequestMappingRule() {
		return getRequestMappingAccess().getRule();
	}
	
	//RequestMappingValue:
	//	'Value' name=ID;
	public RequestMappingValueElements getRequestMappingValueAccess() {
		return pRequestMappingValue;
	}
	
	public ParserRule getRequestMappingValueRule() {
		return getRequestMappingValueAccess().getRule();
	}
	
	//RequestMappingMethod:
	//	'Method' name=ID;
	public RequestMappingMethodElements getRequestMappingMethodAccess() {
		return pRequestMappingMethod;
	}
	
	public ParserRule getRequestMappingMethodRule() {
		return getRequestMappingMethodAccess().getRule();
	}
	
	//RequestMappingProduces:
	//	'Produces' name=ID;
	public RequestMappingProducesElements getRequestMappingProducesAccess() {
		return pRequestMappingProduces;
	}
	
	public ParserRule getRequestMappingProducesRule() {
		return getRequestMappingProducesAccess().getRule();
	}
	
	//PostMapping:
	//	'PostMapping' name=ID;
	public PostMappingElements getPostMappingAccess() {
		return pPostMapping;
	}
	
	public ParserRule getPostMappingRule() {
		return getPostMappingAccess().getRule();
	}
	
	//GetMapping:
	//	'GetMapping' name=ID;
	public GetMappingElements getGetMappingAccess() {
		return pGetMapping;
	}
	
	public ParserRule getGetMappingRule() {
		return getGetMappingAccess().getRule();
	}
	
	//PutMapping:
	//	'PutMapping' name=ID;
	public PutMappingElements getPutMappingAccess() {
		return pPutMapping;
	}
	
	public ParserRule getPutMappingRule() {
		return getPutMappingAccess().getRule();
	}
	
	//DeleteMapping:
	//	'DeleteMapping' name=ID;
	public DeleteMappingElements getDeleteMappingAccess() {
		return pDeleteMapping;
	}
	
	public ParserRule getDeleteMappingRule() {
		return getDeleteMappingAccess().getRule();
	}
	
	//ResponseParameter:
	//	'Parameter'
	//	elements+=ResponseParameterAnnotation
	//	elements+=ResponseParameterType
	//	elements+=ResponseParameterName;
	public ResponseParameterElements getResponseParameterAccess() {
		return pResponseParameter;
	}
	
	public ParserRule getResponseParameterRule() {
		return getResponseParameterAccess().getRule();
	}
	
	//ResponseParameterAnnotation:
	//	'Annotation' name=ID;
	public ResponseParameterAnnotationElements getResponseParameterAnnotationAccess() {
		return pResponseParameterAnnotation;
	}
	
	public ParserRule getResponseParameterAnnotationRule() {
		return getResponseParameterAnnotationAccess().getRule();
	}
	
	//ResponseParameterType:
	//	'Type' name=ID;
	public ResponseParameterTypeElements getResponseParameterTypeAccess() {
		return pResponseParameterType;
	}
	
	public ParserRule getResponseParameterTypeRule() {
		return getResponseParameterTypeAccess().getRule();
	}
	
	//ResponseParameterName:
	//	'Name' name=ID;
	public ResponseParameterNameElements getResponseParameterNameAccess() {
		return pResponseParameterName;
	}
	
	public ParserRule getResponseParameterNameRule() {
		return getResponseParameterNameAccess().getRule();
	}
	
	//ExceptionHandler:
	//	'ExceptionHandler' name=ID
	//	elements+=ExceptionProcess+;
	public ExceptionHandlerElements getExceptionHandlerAccess() {
		return pExceptionHandler;
	}
	
	public ParserRule getExceptionHandlerRule() {
		return getExceptionHandlerAccess().getRule();
	}
	
	//ExceptionProcess:
	//	'ExceptionProcess' name=ID;
	public ExceptionProcessElements getExceptionProcessAccess() {
		return pExceptionProcess;
	}
	
	public ParserRule getExceptionProcessRule() {
		return getExceptionProcessAccess().getRule();
	}
	
	//SpringEntity:
	//	'SpringEntity' ':' '{'
	//	springEntityAnnotationTypes+=SpringEntityAnnotationTypes+
	//	'}';
	public SpringEntityElements getSpringEntityAccess() {
		return pSpringEntity;
	}
	
	public ParserRule getSpringEntityRule() {
		return getSpringEntityAccess().getRule();
	}
	
	//SpringEntityAnnotationTypes:
	//	'EntityAnnotation' name=ID |
	//	'TableAnnotation' name=ID |
	//	'IdAnnotation' name=ID |
	//	'GeneratedValueAnnotation' name=ID |
	//	'ColumnAnnotation' name=ID |
	//	'OverrideAnnotation' name=ID;
	public SpringEntityAnnotationTypesElements getSpringEntityAnnotationTypesAccess() {
		return pSpringEntityAnnotationTypes;
	}
	
	public ParserRule getSpringEntityAnnotationTypesRule() {
		return getSpringEntityAnnotationTypesAccess().getRule();
	}
	
	//StorageClient:
	//	'StorageClient' name=ID
	//	elements+=StorageMember*
	//	elements+=StorageAction*;
	public StorageClientElements getStorageClientAccess() {
		return pStorageClient;
	}
	
	public ParserRule getStorageClientRule() {
		return getStorageClientAccess().getRule();
	}
	
	//StorageMember:
	//	'StorageMember' name=ID
	//	elements+=StorageMemberType
	//	elements+=StorageMemberAnnotation*;
	public StorageMemberElements getStorageMemberAccess() {
		return pStorageMember;
	}
	
	public ParserRule getStorageMemberRule() {
		return getStorageMemberAccess().getRule();
	}
	
	//StorageMemberType:
	//	'StorageMemberType' name=ID;
	public StorageMemberTypeElements getStorageMemberTypeAccess() {
		return pStorageMemberType;
	}
	
	public ParserRule getStorageMemberTypeRule() {
		return getStorageMemberTypeAccess().getRule();
	}
	
	//StorageMemberAnnotation:
	//	'StorageMemberAnnotation' name=ID;
	public StorageMemberAnnotationElements getStorageMemberAnnotationAccess() {
		return pStorageMemberAnnotation;
	}
	
	public ParserRule getStorageMemberAnnotationRule() {
		return getStorageMemberAnnotationAccess().getRule();
	}
	
	//StorageAction:
	//	'StorageAction' name=ID
	//	elements+=StorageActionReturn
	//	elements+=StorageActionAnnotation*
	//	elements+=StorageActionMember*;
	public StorageActionElements getStorageActionAccess() {
		return pStorageAction;
	}
	
	public ParserRule getStorageActionRule() {
		return getStorageActionAccess().getRule();
	}
	
	//StorageActionAnnotation:
	//	'StorageActionAnnotation' name=ID;
	public StorageActionAnnotationElements getStorageActionAnnotationAccess() {
		return pStorageActionAnnotation;
	}
	
	public ParserRule getStorageActionAnnotationRule() {
		return getStorageActionAnnotationAccess().getRule();
	}
	
	//StorageActionReturn:
	//	'StorageActionReturn' name=ID;
	public StorageActionReturnElements getStorageActionReturnAccess() {
		return pStorageActionReturn;
	}
	
	public ParserRule getStorageActionReturnRule() {
		return getStorageActionReturnAccess().getRule();
	}
	
	//StorageActionMember:
	//	'StorageActionMember' elements+=StorageActionMemberType elements+=StorageActionMemberName;
	public StorageActionMemberElements getStorageActionMemberAccess() {
		return pStorageActionMember;
	}
	
	public ParserRule getStorageActionMemberRule() {
		return getStorageActionMemberAccess().getRule();
	}
	
	//StorageActionMemberType:
	//	'Type' name=ID;
	public StorageActionMemberTypeElements getStorageActionMemberTypeAccess() {
		return pStorageActionMemberType;
	}
	
	public ParserRule getStorageActionMemberTypeRule() {
		return getStorageActionMemberTypeAccess().getRule();
	}
	
	//StorageActionMemberName:
	//	'Name' name=ID;
	public StorageActionMemberNameElements getStorageActionMemberNameAccess() {
		return pStorageActionMemberName;
	}
	
	public ParserRule getStorageActionMemberNameRule() {
		return getStorageActionMemberNameAccess().getRule();
	}
	
	//React:
	//	'React' name=ID ':' '{'
	//	reacts+=ReactModules
	//	'}';
	public ReactElements getReactAccess() {
		return pReact;
	}
	
	public ParserRule getReactRule() {
		return getReactAccess().getRule();
	}
	
	//ReactModules:
	//	'ReactModules' ':' '{'
	//	reactmodules+=ReactSubModules
	//	'}';
	public ReactModulesElements getReactModulesAccess() {
		return pReactModules;
	}
	
	public ParserRule getReactModulesRule() {
		return getReactModulesAccess().getRule();
	}
	
	//ReactSubModules:
	//	reactmodulesconf+=ReactConfiguration
	//	reactmodulescomp+=ReactComponents
	//	reactmodulesact+=ReactActions
	//	reactmoduleslib+=ReactLibraries
	//	reactmodulesinf+=ReactInfo;
	public ReactSubModulesElements getReactSubModulesAccess() {
		return pReactSubModules;
	}
	
	public ParserRule getReactSubModulesRule() {
		return getReactSubModulesAccess().getRule();
	}
	
	//ReactConfiguration:
	//	'ReactConfiguration' ':' '{'
	//	dependencies+=ReactDependencies
	//	configurations+=ReactConfigurations
	//	'}';
	public ReactConfigurationElements getReactConfigurationAccess() {
		return pReactConfiguration;
	}
	
	public ParserRule getReactConfigurationRule() {
		return getReactConfigurationAccess().getRule();
	}
	
	//ReactDependencies:
	//	'DependenciesStruct'
	//	dependencies+=ReactDependenciesRules+;
	public ReactDependenciesElements getReactDependenciesAccess() {
		return pReactDependencies;
	}
	
	public ParserRule getReactDependenciesRule() {
		return getReactDependenciesAccess().getRule();
	}
	
	//ReactDependenciesRules:
	//	'DependencyType' name=ID
	//	dependencies+=ReactDependenciesSubRules+;
	public ReactDependenciesRulesElements getReactDependenciesRulesAccess() {
		return pReactDependenciesRules;
	}
	
	public ParserRule getReactDependenciesRulesRule() {
		return getReactDependenciesRulesAccess().getRule();
	}
	
	//ReactDependenciesSubRules:
	//	dependencies+=SingleDependencies;
	public ReactDependenciesSubRulesElements getReactDependenciesSubRulesAccess() {
		return pReactDependenciesSubRules;
	}
	
	public ParserRule getReactDependenciesSubRulesRule() {
		return getReactDependenciesSubRulesAccess().getRule();
	}
	
	//SingleDependencies:
	//	dependencies+=PackageName dependencies+=PackageVersion;
	public SingleDependenciesElements getSingleDependenciesAccess() {
		return pSingleDependencies;
	}
	
	public ParserRule getSingleDependenciesRule() {
		return getSingleDependenciesAccess().getRule();
	}
	
	//PackageName:
	//	'PackageName' name=ID;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//PackageVersion:
	//	'PackageVersion' name=ID;
	public PackageVersionElements getPackageVersionAccess() {
		return pPackageVersion;
	}
	
	public ParserRule getPackageVersionRule() {
		return getPackageVersionAccess().getRule();
	}
	
	//ReactConfigurations:
	//	'ReactDOMConfigurations' name=ID
	//	configurations+=DOMConfigurations+;
	public ReactConfigurationsElements getReactConfigurationsAccess() {
		return pReactConfigurations;
	}
	
	public ParserRule getReactConfigurationsRule() {
		return getReactConfigurationsAccess().getRule();
	}
	
	//DOMConfigurations:
	//	elements+=DOMTypeConf name=ID;
	public DOMConfigurationsElements getDOMConfigurationsAccess() {
		return pDOMConfigurations;
	}
	
	public ParserRule getDOMConfigurationsRule() {
		return getDOMConfigurationsAccess().getRule();
	}
	
	//DOMTypeConf:
	//	'RoutingConf' |
	//	'ServiceWorker' |
	//	'HTMLStructure' |
	//	'Manifest' |
	//	'RepositoriesConf';
	public DOMTypeConfElements getDOMTypeConfAccess() {
		return pDOMTypeConf;
	}
	
	public ParserRule getDOMTypeConfRule() {
		return getDOMTypeConfAccess().getRule();
	}
	
	//ReactComponents:
	//	'ReactComponents' ':' '{'
	//	componentslogic+=ComponentsLogic
	//	componentsui+=ComponentsUI
	//	componentstyle+=ComponentsStyles
	//	'}';
	public ReactComponentsElements getReactComponentsAccess() {
		return pReactComponents;
	}
	
	public ParserRule getReactComponentsRule() {
		return getReactComponentsAccess().getRule();
	}
	
	//ComponentsLogic:
	//	'LogicComponents' name=ID
	//	logiccomponents+=LogicContent;
	public ComponentsLogicElements getComponentsLogicAccess() {
		return pComponentsLogic;
	}
	
	public ParserRule getComponentsLogicRule() {
		return getComponentsLogicAccess().getRule();
	}
	
	//LogicContent:
	//	'RoutingComponents' name=ID
	//	logiccomponents+=LogicStructure;
	public LogicContentElements getLogicContentAccess() {
		return pLogicContent;
	}
	
	public ParserRule getLogicContentRule() {
		return getLogicContentAccess().getRule();
	}
	
	//LogicStructure:
	//	'AppComponent' appComName=ID
	//	logiccomponents+=ComponentClass
	//	'IndexComponent' indexCompName=ID;
	public LogicStructureElements getLogicStructureAccess() {
		return pLogicStructure;
	}
	
	public ParserRule getLogicStructureRule() {
		return getLogicStructureAccess().getRule();
	}
	
	//ComponentsUI:
	//	'UIComponents' name=ID
	//	uicomponents+=UIContent;
	public ComponentsUIElements getComponentsUIAccess() {
		return pComponentsUI;
	}
	
	public ParserRule getComponentsUIRule() {
		return getComponentsUIAccess().getRule();
	}
	
	//UIContent:
	//	componentcontent+=ViewComponentCont+
	//	subcomponentcontent+=SubcomponentCont+;
	public UIContentElements getUIContentAccess() {
		return pUIContent;
	}
	
	public ParserRule getUIContentRule() {
		return getUIContentAccess().getRule();
	}
	
	//ViewComponentCont:
	//	'ViewComponent' nameView=ID
	//	uicontent+=ComponentClass;
	public ViewComponentContElements getViewComponentContAccess() {
		return pViewComponentCont;
	}
	
	public ParserRule getViewComponentContRule() {
		return getViewComponentContAccess().getRule();
	}
	
	//SubcomponentCont:
	//	'Subcomponents' nameSubComp=ID
	//	uicontent+=ComponentClass;
	public SubcomponentContElements getSubcomponentContAccess() {
		return pSubcomponentCont;
	}
	
	public ParserRule getSubcomponentContRule() {
		return getSubcomponentContAccess().getRule();
	}
	
	//ComponentClass:
	//	componentclassimp+=ReactImports
	//	componentclassfunc+=ReactFunctions
	//	componentclassprop+=Props;
	public ComponentClassElements getComponentClassAccess() {
		return pComponentClass;
	}
	
	public ParserRule getComponentClassRule() {
		return getComponentClassAccess().getRule();
	}
	
	//ReactImports:
	//	{ReactImports} reactsimports+=ReactImportContent*;
	public ReactImportsElements getReactImportsAccess() {
		return pReactImports;
	}
	
	public ParserRule getReactImportsRule() {
		return getReactImportsAccess().getRule();
	}
	
	//ReactImportContent:
	//	'import' impName=ID;
	public ReactImportContentElements getReactImportContentAccess() {
		return pReactImportContent;
	}
	
	public ParserRule getReactImportContentRule() {
		return getReactImportContentAccess().getRule();
	}
	
	//ReactFunctions:
	//	reactconstructors+=ReactConstructor
	//	lifecycleclass+=ReactLifeCycle*
	//	reactcorefuncs+=ReactCoreFunctions*
	//	renderclass+=ReactRender;
	public ReactFunctionsElements getReactFunctionsAccess() {
		return pReactFunctions;
	}
	
	public ParserRule getReactFunctionsRule() {
		return getReactFunctionsAccess().getRule();
	}
	
	//ReactConstructor:
	//	'Constructor'
	//	componentstateclass+=State
	//	componentfuncclass+=CoreFunctionsDeclaration*;
	public ReactConstructorElements getReactConstructorAccess() {
		return pReactConstructor;
	}
	
	public ParserRule getReactConstructorRule() {
		return getReactConstructorAccess().getRule();
	}
	
	//State:
	//	{State} 'State'
	//	statecontents+=StateContent+;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//StateContent:
	//	stateName=ID
	//	componentdatatyp+=DataType;
	public StateContentElements getStateContentAccess() {
		return pStateContent;
	}
	
	public ParserRule getStateContentRule() {
		return getStateContentAccess().getRule();
	}
	
	//DataType:
	//	'String' |
	//	'Array' |
	//	'Object' |
	//	'Number' |
	//	'null' |
	//	'Boolean';
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//CoreFunctionsDeclaration:
	//	name=ID 'FunctionBindingDeclaration';
	public CoreFunctionsDeclarationElements getCoreFunctionsDeclarationAccess() {
		return pCoreFunctionsDeclaration;
	}
	
	public ParserRule getCoreFunctionsDeclarationRule() {
		return getCoreFunctionsDeclarationAccess().getRule();
	}
	
	//ReactLifeCycle:
	//	'ComponentDidMount' 'FunctionStructure' |
	//	'ComponentDidUpdate' 'FunctionStructure' |
	//	'ComponentWillUnmount' 'FunctionStructure';
	public ReactLifeCycleElements getReactLifeCycleAccess() {
		return pReactLifeCycle;
	}
	
	public ParserRule getReactLifeCycleRule() {
		return getReactLifeCycleAccess().getRule();
	}
	
	//ReactRender:
	//	'Render' 'RenderContent';
	public ReactRenderElements getReactRenderAccess() {
		return pReactRender;
	}
	
	public ParserRule getReactRenderRule() {
		return getReactRenderAccess().getRule();
	}
	
	//Props:
	//	{Props} 'Props'
	//	propsconts+=PropsType*;
	public PropsElements getPropsAccess() {
		return pProps;
	}
	
	public ParserRule getPropsRule() {
		return getPropsAccess().getRule();
	}
	
	//PropsType:
	//	nameProps=ID
	//	propsdatas+=DataType;
	public PropsTypeElements getPropsTypeAccess() {
		return pPropsType;
	}
	
	public ParserRule getPropsTypeRule() {
		return getPropsTypeAccess().getRule();
	}
	
	//ReactCoreFunctions:
	//	name=ID 'FunctionStructure';
	public ReactCoreFunctionsElements getReactCoreFunctionsAccess() {
		return pReactCoreFunctions;
	}
	
	public ParserRule getReactCoreFunctionsRule() {
		return getReactCoreFunctionsAccess().getRule();
	}
	
	//ComponentsStyles:
	//	{ComponentsStyles} stylescontents+=ComponentsStylesContent*;
	public ComponentsStylesElements getComponentsStylesAccess() {
		return pComponentsStyles;
	}
	
	public ParserRule getComponentsStylesRule() {
		return getComponentsStylesAccess().getRule();
	}
	
	//ComponentsStylesContent:
	//	'Style' nameStyle=ID
	//	stylecontent+=StyleProperties;
	public ComponentsStylesContentElements getComponentsStylesContentAccess() {
		return pComponentsStylesContent;
	}
	
	public ParserRule getComponentsStylesContentRule() {
		return getComponentsStylesContentAccess().getRule();
	}
	
	//StyleProperties:
	//	{StyleProperties} stylespropscontents+=StylePropertiesContent*;
	public StylePropertiesElements getStylePropertiesAccess() {
		return pStyleProperties;
	}
	
	public ParserRule getStylePropertiesRule() {
		return getStylePropertiesAccess().getRule();
	}
	
	//StylePropertiesContent:
	//	'prop_name' propName=ID
	//	"propsContent"+;
	public StylePropertiesContentElements getStylePropertiesContentAccess() {
		return pStylePropertiesContent;
	}
	
	public ParserRule getStylePropertiesContentRule() {
		return getStylePropertiesContentAccess().getRule();
	}
	
	//ReactActions:
	//	'ReactActions' ':' '{'
	//	reactactcontent+=ReactActionsContent
	//	'}';
	public ReactActionsElements getReactActionsAccess() {
		return pReactActions;
	}
	
	public ParserRule getReactActionsRule() {
		return getReactActionsAccess().getRule();
	}
	
	//ReactActionsContent:
	//	reactrelcontent+=ReactServicesRelation+;
	public ReactActionsContentElements getReactActionsContentAccess() {
		return pReactActionsContent;
	}
	
	public ParserRule getReactActionsContentRule() {
		return getReactActionsContentAccess().getRule();
	}
	
	//ReactServicesType:
	//	'ServiceType' name=ID
	//	reactservcontent+=ReactServiceContent;
	public ReactServicesTypeElements getReactServicesTypeAccess() {
		return pReactServicesType;
	}
	
	public ParserRule getReactServicesTypeRule() {
		return getReactServicesTypeAccess().getRule();
	}
	
	//ReactServiceContent:
	//	'functions' functName=ID
	//	reactservrequest+=ReactServiceContRequest*;
	public ReactServiceContentElements getReactServiceContentAccess() {
		return pReactServiceContent;
	}
	
	public ParserRule getReactServiceContentRule() {
		return getReactServiceContentAccess().getRule();
	}
	
	//ReactServiceContRequest:
	//	'return'
	//	reactservrequestprops+=ReactServiceRequestProps+;
	public ReactServiceContRequestElements getReactServiceContRequestAccess() {
		return pReactServiceContRequest;
	}
	
	public ParserRule getReactServiceContRequestRule() {
		return getReactServiceContRequestAccess().getRule();
	}
	
	//ReactServiceRequestProps:
	//	'propName' reqPropName=ID reqPropDescription=ID;
	public ReactServiceRequestPropsElements getReactServiceRequestPropsAccess() {
		return pReactServiceRequestProps;
	}
	
	public ParserRule getReactServiceRequestPropsRule() {
		return getReactServiceRequestPropsAccess().getRule();
	}
	
	//ReactServicesRelation:
	//	'ServicesRelations'
	//	servicesrels+=ReactsRelationServ+;
	public ReactServicesRelationElements getReactServicesRelationAccess() {
		return pReactServicesRelation;
	}
	
	public ParserRule getReactServicesRelationRule() {
		return getReactServicesRelationAccess().getRule();
	}
	
	//ReactsRelationServ:
	//	reactrelationcontent+=ReactServicesType name=ID ReactRequest;
	public ReactsRelationServElements getReactsRelationServAccess() {
		return pReactsRelationServ;
	}
	
	public ParserRule getReactsRelationServRule() {
		return getReactsRelationServAccess().getRule();
	}
	
	//ReactRequest:
	//	'Wrapper' |
	//	'AuxWrapper';
	public ReactRequestElements getReactRequestAccess() {
		return pReactRequest;
	}
	
	public ParserRule getReactRequestRule() {
		return getReactRequestAccess().getRule();
	}
	
	//ReactLibraries:
	//	'ReactLibraries' ':' '{'
	//	reactlibraries+=ReactLibrary+
	//	'}';
	public ReactLibrariesElements getReactLibrariesAccess() {
		return pReactLibraries;
	}
	
	public ParserRule getReactLibrariesRule() {
		return getReactLibrariesAccess().getRule();
	}
	
	//ReactLibrary:
	//	ReactLibraryType name=ID 'LibraryContent';
	public ReactLibraryElements getReactLibraryAccess() {
		return pReactLibrary;
	}
	
	public ParserRule getReactLibraryRule() {
		return getReactLibraryAccess().getRule();
	}
	
	//ReactLibraryType:
	//	'ReactDesign' |
	//	'ReactRouting' |
	//	'ComponentManagement' |
	//	'StoreManagement' |
	//	'ReactDeployment' |
	//	'ConfigurationLibrary';
	public ReactLibraryTypeElements getReactLibraryTypeAccess() {
		return pReactLibraryType;
	}
	
	public ParserRule getReactLibraryTypeRule() {
		return getReactLibraryTypeAccess().getRule();
	}
	
	//ReactInfo:
	//	'ReactInformation' ':' '{'
	//	reactinformation+=ReactInformation+
	//	'}';
	public ReactInfoElements getReactInfoAccess() {
		return pReactInfo;
	}
	
	public ParserRule getReactInfoRule() {
		return getReactInfoAccess().getRule();
	}
	
	//ReactInformation:
	//	ReactInformationType name=ID 'InformationContent';
	public ReactInformationElements getReactInformationAccess() {
		return pReactInformation;
	}
	
	public ParserRule getReactInformationRule() {
		return getReactInformationAccess().getRule();
	}
	
	//ReactInformationType:
	//	'ReactReadme' |
	//	'ReactAditionalInfo';
	public ReactInformationTypeElements getReactInformationTypeAccess() {
		return pReactInformationType;
	}
	
	public ParserRule getReactInformationTypeRule() {
		return getReactInformationTypeAccess().getRule();
	}
	
	//PostgreSQL:
	//	'PostgreSQL' name=ID ':' '{'
	//	elements+=Cluster
	//	'}';
	public PostgreSQLElements getPostgreSQLAccess() {
		return pPostgreSQL;
	}
	
	public ParserRule getPostgreSQLRule() {
		return getPostgreSQLAccess().getRule();
	}
	
	//Cluster:
	//	'Database'
	//	elements+=Database
	//	elements+=PostgresUser+;
	public ClusterElements getClusterAccess() {
		return pCluster;
	}
	
	public ParserRule getClusterRule() {
		return getClusterAccess().getRule();
	}
	
	//Database:
	//	'Schema' name=ID
	//	elements+=Schema;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//Schema:
	//	elements+=Index_p*
	//	elements+=ViewSchema*
	//	elements+=Table_p+
	//	elements+=Trigger*
	//	elements+=Function;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}
	
	//Index_p:
	//	'Index_p' name=ID;
	public Index_pElements getIndex_pAccess() {
		return pIndex_p;
	}
	
	public ParserRule getIndex_pRule() {
		return getIndex_pAccess().getRule();
	}
	
	//ViewSchema:
	//	'ViewSchema' name=ID;
	public ViewSchemaElements getViewSchemaAccess() {
		return pViewSchema;
	}
	
	public ParserRule getViewSchemaRule() {
		return getViewSchemaAccess().getRule();
	}
	
	//Table_p:
	//	'Table_p' name=ID ':' '{'
	//	elements+=ForeignKey+
	//	elements+=ColumnP+
	//	elements+=Row+
	//	'}';
	public Table_pElements getTable_pAccess() {
		return pTable_p;
	}
	
	public ParserRule getTable_pRule() {
		return getTable_pAccess().getRule();
	}
	
	//ForeignKey:
	//	'ForeignKey'
	//	elements+=ForeignKey_n
	//	elements+=ForeignKeyRef;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//ForeignKey_n:
	//	'ForeingKeyName' name=ID;
	public ForeignKey_nElements getForeignKey_nAccess() {
		return pForeignKey_n;
	}
	
	public ParserRule getForeignKey_nRule() {
		return getForeignKey_nAccess().getRule();
	}
	
	//ForeignKeyRef:
	//	{ForeignKeyRef} 'ForeignKeyRef'
	//	elements+=RefTable_p*;
	public ForeignKeyRefElements getForeignKeyRefAccess() {
		return pForeignKeyRef;
	}
	
	public ParserRule getForeignKeyRefRule() {
		return getForeignKeyRefAccess().getRule();
	}
	
	//RefTable_p:
	//	'RefTable_p' name=ID;
	public RefTable_pElements getRefTable_pAccess() {
		return pRefTable_p;
	}
	
	public ParserRule getRefTable_pRule() {
		return getRefTable_pAccess().getRule();
	}
	
	//ColumnP:
	//	'ColumnP' name=ID
	//	elements+=DatatypeDB
	//	elements+=Constraint*;
	public ColumnPElements getColumnPAccess() {
		return pColumnP;
	}
	
	public ParserRule getColumnPRule() {
		return getColumnPAccess().getRule();
	}
	
	//DatatypeDB:
	//	'DatatypeDB' name=ID;
	public DatatypeDBElements getDatatypeDBAccess() {
		return pDatatypeDB;
	}
	
	public ParserRule getDatatypeDBRule() {
		return getDatatypeDBAccess().getRule();
	}
	
	//Constraint:
	//	'Constraint' name=ID;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Row:
	//	'Row' name=ID
	//	elements+=Policy*;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Policy:
	//	'Policy' name=ID;
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//Trigger:
	//	'Trigger' name=ID;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Function:
	//	'Function' name=ID;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//PostgresUser:
	//	'PostgresUser' name=ID ':' '{'
	//	elements+=Privilege
	//	elements+=Query*
	//	'}';
	public PostgresUserElements getPostgresUserAccess() {
		return pPostgresUser;
	}
	
	public ParserRule getPostgresUserRule() {
		return getPostgresUserAccess().getRule();
	}
	
	//Privilege:
	//	'Privilege' name=ID;
	public PrivilegeElements getPrivilegeAccess() {
		return pPrivilege;
	}
	
	public ParserRule getPrivilegeRule() {
		return getPrivilegeAccess().getRule();
	}
	
	//Query:
	//	'Query'
	//	elements+=Clause;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Clause:
	//	'Clause' name=ID;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//AmazonWebServices:
	//	'AmazonWebServices' name=ID ':' '{'
	//	elements+=AmazonSimpleStorageService
	//	elements+=AmazonElasticComputeCloud
	//	'}';
	public AmazonWebServicesElements getAmazonWebServicesAccess() {
		return pAmazonWebServices;
	}
	
	public ParserRule getAmazonWebServicesRule() {
		return getAmazonWebServicesAccess().getRule();
	}
	
	//AmazonSimpleStorageService:
	//	'AmazonSimpleStorageService' ':' '{'
	//	elements+=BatchOperation*
	//	elements+=Bucket
	//	'}';
	public AmazonSimpleStorageServiceElements getAmazonSimpleStorageServiceAccess() {
		return pAmazonSimpleStorageService;
	}
	
	public ParserRule getAmazonSimpleStorageServiceRule() {
		return getAmazonSimpleStorageServiceAccess().getRule();
	}
	
	//BatchOperation:
	//	'BatchOperation' name=ID;
	public BatchOperationElements getBatchOperationAccess() {
		return pBatchOperation;
	}
	
	public ParserRule getBatchOperationRule() {
		return getBatchOperationAccess().getRule();
	}
	
	//Bucket:
	//	'Bucket' name=ID
	//	elements+=BucketAccess
	//	elements+=AmazonFolder*
	//	elements+=AmazonFile+;
	public BucketElements getBucketAccess() {
		return pBucket;
	}
	
	public ParserRule getBucketRule() {
		return getBucketAccess().getRule();
	}
	
	//BucketAccess:
	//	'BucketAccess'
	//	elements+=PublicAccess | elements+=ObjectsPublic | elements+=BucketObjectsNotPublic | elements+=OnlyAuthorized;
	public BucketAccessElements getBucketAccessAccess() {
		return pBucketAccess;
	}
	
	public ParserRule getBucketAccessRule() {
		return getBucketAccessAccess().getRule();
	}
	
	//PublicAccess:
	//	'PublicAccess' name=ID;
	public PublicAccessElements getPublicAccessAccess() {
		return pPublicAccess;
	}
	
	public ParserRule getPublicAccessRule() {
		return getPublicAccessAccess().getRule();
	}
	
	//ObjectsPublic:
	//	'ObjectsPublic' name=ID;
	public ObjectsPublicElements getObjectsPublicAccess() {
		return pObjectsPublic;
	}
	
	public ParserRule getObjectsPublicRule() {
		return getObjectsPublicAccess().getRule();
	}
	
	//BucketObjectsNotPublic:
	//	'BucketObjectsNotPublic' name=ID;
	public BucketObjectsNotPublicElements getBucketObjectsNotPublicAccess() {
		return pBucketObjectsNotPublic;
	}
	
	public ParserRule getBucketObjectsNotPublicRule() {
		return getBucketObjectsNotPublicAccess().getRule();
	}
	
	//OnlyAuthorized:
	//	'OnlyAuthorized' name=ID;
	public OnlyAuthorizedElements getOnlyAuthorizedAccess() {
		return pOnlyAuthorized;
	}
	
	public ParserRule getOnlyAuthorizedRule() {
		return getOnlyAuthorizedAccess().getRule();
	}
	
	//AmazonFolder:
	//	'AmazonFolder' name=ID;
	public AmazonFolderElements getAmazonFolderAccess() {
		return pAmazonFolder;
	}
	
	public ParserRule getAmazonFolderRule() {
		return getAmazonFolderAccess().getRule();
	}
	
	//AmazonFile:
	//	'AmazonFile'
	//	elements+=Metadata+;
	public AmazonFileElements getAmazonFileAccess() {
		return pAmazonFile;
	}
	
	public ParserRule getAmazonFileRule() {
		return getAmazonFileAccess().getRule();
	}
	
	//Metadata:
	//	'Metadata' name=ID;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//AmazonElasticComputeCloud:
	//	'AmazonElasticComputeCloud' name=ID;
	public AmazonElasticComputeCloudElements getAmazonElasticComputeCloudAccess() {
		return pAmazonElasticComputeCloud;
	}
	
	public ParserRule getAmazonElasticComputeCloudRule() {
		return getAmazonElasticComputeCloudAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
