/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subcomponent Cont</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.SubcomponentContImpl#getNameSubComp <em>Name Sub Comp</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.SubcomponentContImpl#getUicontent <em>Uicontent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubcomponentContImpl extends MinimalEObjectImpl.Container implements SubcomponentCont
{
  /**
   * The default value of the '{@link #getNameSubComp() <em>Name Sub Comp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameSubComp()
   * @generated
   * @ordered
   */
  protected static final String NAME_SUB_COMP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNameSubComp() <em>Name Sub Comp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameSubComp()
   * @generated
   * @ordered
   */
  protected String nameSubComp = NAME_SUB_COMP_EDEFAULT;

  /**
   * The cached value of the '{@link #getUicontent() <em>Uicontent</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUicontent()
   * @generated
   * @ordered
   */
  protected EList<ComponentClass> uicontent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubcomponentContImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.SUBCOMPONENT_CONT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNameSubComp()
  {
    return nameSubComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNameSubComp(String newNameSubComp)
  {
    String oldNameSubComp = nameSubComp;
    nameSubComp = newNameSubComp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__NAME_SUB_COMP, oldNameSubComp, nameSubComp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ComponentClass> getUicontent()
  {
    if (uicontent == null)
    {
      uicontent = new EObjectContainmentEList<ComponentClass>(ComponentClass.class, this, SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT);
    }
    return uicontent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT:
        return ((InternalEList<?>)getUicontent()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__NAME_SUB_COMP:
        return getNameSubComp();
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT:
        return getUicontent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__NAME_SUB_COMP:
        setNameSubComp((String)newValue);
        return;
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT:
        getUicontent().clear();
        getUicontent().addAll((Collection<? extends ComponentClass>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__NAME_SUB_COMP:
        setNameSubComp(NAME_SUB_COMP_EDEFAULT);
        return;
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT:
        getUicontent().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__NAME_SUB_COMP:
        return NAME_SUB_COMP_EDEFAULT == null ? nameSubComp != null : !NAME_SUB_COMP_EDEFAULT.equals(nameSubComp);
      case SoftGalleryLanguagePackage.SUBCOMPONENT_CONT__UICONTENT:
        return uicontent != null && !uicontent.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nameSubComp: ");
    result.append(nameSubComp);
    result.append(')');
    return result.toString();
  }

} //SubcomponentContImpl
