/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.softGalleryLanguage.impl;

import co.unal.mdd.photos.dsl.softGalleryLanguage.CoreFunctionsDeclaration;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SoftGalleryLanguagePackage;
import co.unal.mdd.photos.dsl.softGalleryLanguage.State;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>React Constructor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ReactConstructorImpl#getComponentstateclass <em>Componentstateclass</em>}</li>
 *   <li>{@link co.unal.mdd.photos.dsl.softGalleryLanguage.impl.ReactConstructorImpl#getComponentfuncclass <em>Componentfuncclass</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReactConstructorImpl extends MinimalEObjectImpl.Container implements ReactConstructor
{
  /**
   * The cached value of the '{@link #getComponentstateclass() <em>Componentstateclass</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentstateclass()
   * @generated
   * @ordered
   */
  protected EList<State> componentstateclass;

  /**
   * The cached value of the '{@link #getComponentfuncclass() <em>Componentfuncclass</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentfuncclass()
   * @generated
   * @ordered
   */
  protected EList<CoreFunctionsDeclaration> componentfuncclass;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactConstructorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftGalleryLanguagePackage.Literals.REACT_CONSTRUCTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<State> getComponentstateclass()
  {
    if (componentstateclass == null)
    {
      componentstateclass = new EObjectContainmentEList<State>(State.class, this, SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS);
    }
    return componentstateclass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CoreFunctionsDeclaration> getComponentfuncclass()
  {
    if (componentfuncclass == null)
    {
      componentfuncclass = new EObjectContainmentEList<CoreFunctionsDeclaration>(CoreFunctionsDeclaration.class, this, SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS);
    }
    return componentfuncclass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS:
        return ((InternalEList<?>)getComponentstateclass()).basicRemove(otherEnd, msgs);
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS:
        return ((InternalEList<?>)getComponentfuncclass()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS:
        return getComponentstateclass();
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS:
        return getComponentfuncclass();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS:
        getComponentstateclass().clear();
        getComponentstateclass().addAll((Collection<? extends State>)newValue);
        return;
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS:
        getComponentfuncclass().clear();
        getComponentfuncclass().addAll((Collection<? extends CoreFunctionsDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS:
        getComponentstateclass().clear();
        return;
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS:
        getComponentfuncclass().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTSTATECLASS:
        return componentstateclass != null && !componentstateclass.isEmpty();
      case SoftGalleryLanguagePackage.REACT_CONSTRUCTOR__COMPONENTFUNCCLASS:
        return componentfuncclass != null && !componentfuncclass.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ReactConstructorImpl
