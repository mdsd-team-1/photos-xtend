/*
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.serializer;

import co.unal.mdd.photos.dsl.services.SoftGalleryLanguageGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SoftGalleryLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SoftGalleryLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_StylePropertiesContent_PropsContentKeyword_2_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SoftGalleryLanguageGrammarAccess) access;
		match_StylePropertiesContent_PropsContentKeyword_2_p = new TokenAlias(true, false, grammarAccess.getStylePropertiesContentAccess().getPropsContentKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getReactInformationTypeRule())
			return getReactInformationTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReactLibraryTypeRule())
			return getReactLibraryTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReactRequestRule())
			return getReactRequestToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ReactInformationType:
	 * 	'ReactReadme' 		 |
	 * 	'ReactAditionalInfo'
	 * ;
	 */
	protected String getReactInformationTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ReactReadme";
	}
	
	/**
	 * ReactLibraryType:
	 * 	'ReactDesign' 			| 
	 * 	'ReactRouting' 			| 
	 * 	'ComponentManagement'	|
	 * 	'StoreManagement' 		| 
	 * 	'ReactDeployment' 		| 
	 * 	'ConfigurationLibrary'
	 * ;
	 */
	protected String getReactLibraryTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ReactDesign";
	}
	
	/**
	 * ReactRequest: 
	 * 	'Wrapper'    | 
	 * 	'AuxWrapper'
	 * ;
	 */
	protected String getReactRequestToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Wrapper";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_StylePropertiesContent_PropsContentKeyword_2_p.equals(syntax))
				emit_StylePropertiesContent_PropsContentKeyword_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'propsContent'+
	 *
	 * This ambiguous syntax occurs at:
	 *     propName=ID (ambiguity) (rule end)
	 */
	protected void emit_StylePropertiesContent_PropsContentKeyword_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
