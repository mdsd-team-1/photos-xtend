/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.generator;

import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments;
import co.unal.mdd.photos.dsl.softGalleryLanguage.DirectoryContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Entities;
import co.unal.mdd.photos.dsl.softGalleryLanguage.MultipleFile;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StructureBackendGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private String basePackageName = "co.edu.unal";
  
  private String className = "";
  
  private String packageName = "";
  
  public void directoryGeneration(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entities> _filter = Iterables.<Entities>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entities.class);
    for (final Entities domainItem : _filter) {
      {
        String _name = domainItem.getName();
        String _plus = ("Domain Iteration: " + _name);
        InputOutput.<String>println(_plus);
        Iterable<SegmentStructureContent> _filter_1 = Iterables.<SegmentStructureContent>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), SegmentStructureContent.class);
        for (final SegmentStructureContent ssc : _filter_1) {
          {
            InputOutput.<String>println("Architecture Iteration");
            boolean _equals = ssc.getName().equals("photosappback");
            if (_equals) {
              Iterable<DirectoryContent> _filter_2 = Iterables.<DirectoryContent>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), DirectoryContent.class);
              for (final DirectoryContent dir : _filter_2) {
                {
                  InputOutput.<String>println("Architecture Iteration");
                  boolean _equals_1 = dir.getName().equals("main");
                  if (_equals_1) {
                    Iterable<BusinessLogicSegments> _filter_3 = Iterables.<BusinessLogicSegments>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), BusinessLogicSegments.class);
                    for (final BusinessLogicSegments bls : _filter_3) {
                      {
                        String _name_1 = bls.getName();
                        String _plus_1 = ("Architecture Iteration 2" + _name_1);
                        InputOutput.<String>println(_plus_1);
                        String _name_2 = ssc.getName();
                        String _plus_2 = ((this.basePackageName + ".") + _name_2);
                        String _plus_3 = (_plus_2 + ".");
                        String _name_3 = dir.getName();
                        String _plus_4 = (_plus_3 + _name_3);
                        String _plus_5 = (_plus_4 + ".");
                        String _name_4 = bls.getName();
                        String _plus_6 = (_plus_5 + _name_4);
                        this.packageName = _plus_6;
                        String _name_5 = domainItem.getName();
                        String _firstUpper = StringExtensions.toFirstUpper(bls.getName());
                        String _plus_7 = (_name_5 + _firstUpper);
                        this.className = _plus_7;
                        String _replace = this.packageName.replace(".", "/");
                        String _plus_8 = (_replace + "/");
                        String _plus_9 = (_plus_8 + this.className);
                        String _plus_10 = (_plus_9 + ".java");
                        fsa.generateFile(_plus_10, this.generateClass(this.className, this.packageName));
                      }
                    }
                  } else {
                    boolean _equals_2 = dir.getName().equals("resources");
                    if (_equals_2) {
                      Iterable<MultipleFile> _filter_4 = Iterables.<MultipleFile>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MultipleFile.class);
                      for (final MultipleFile mf : _filter_4) {
                        boolean _equals_3 = mf.getName().equals("application");
                        if (_equals_3) {
                          String _name_1 = mf.getName();
                          String _plus_1 = ("Architecture Iteration 2" + _name_1);
                          InputOutput.<String>println(_plus_1);
                          String _name_2 = ssc.getName();
                          String _plus_2 = ((this.basePackageName + ".") + _name_2);
                          String _plus_3 = (_plus_2 + ".");
                          String _name_3 = dir.getName();
                          String _plus_4 = (_plus_3 + _name_3);
                          this.packageName = _plus_4;
                          this.className = mf.getName();
                          String _replace = this.packageName.replace(".", "/");
                          String _plus_5 = (_replace + "/");
                          String _plus_6 = (_plus_5 + this.className);
                          String _plus_7 = (_plus_6 + ".properties");
                          fsa.generateFile(_plus_7, this.generateProperties(this.className, this.packageName));
                          String _replace_1 = this.packageName.replace(".", "/");
                          String _plus_8 = (_replace_1 + "/");
                          String _plus_9 = (_plus_8 + this.className);
                          String _plus_10 = (_plus_9 + ".yml");
                          fsa.generateFile(_plus_10, this.generateYml(this.className, this.packageName));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public CharSequence generateClass(final String className, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ----------------------------------------");
    _builder.newLine();
    _builder.append("// PackageName: ");
    _builder.append(packageName);
    _builder.newLineIfNotEmpty();
    _builder.append("// ClassName: ");
    _builder.append(className);
    _builder.newLineIfNotEmpty();
    _builder.append("// ----------------------------------------\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInterface(final String className, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ----------------------------------------");
    _builder.newLine();
    _builder.append("// PackageName: ");
    _builder.append(packageName);
    _builder.newLineIfNotEmpty();
    _builder.append("// ClassName: ");
    _builder.append(className);
    _builder.newLineIfNotEmpty();
    _builder.append("// ----------------------------------------\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    _builder.append(className);
    _builder.append(" extends JpaRepository<Album, Integer>, JpaSpecificationExecutor<Album>{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateProperties(final String className, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ----------------------------------------");
    _builder.newLine();
    _builder.append("// PackageName: ");
    _builder.append(packageName);
    _builder.newLineIfNotEmpty();
    _builder.append("// ClassName: ");
    _builder.append(className);
    _builder.newLineIfNotEmpty();
    _builder.append("// ----------------------------------------\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateYml(final String className, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ----------------------------------------");
    _builder.newLine();
    _builder.append("// PackageName: ");
    _builder.append(packageName);
    _builder.newLineIfNotEmpty();
    _builder.append("// ClassName: ");
    _builder.append(className);
    _builder.newLineIfNotEmpty();
    _builder.append("// ----------------------------------------\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
