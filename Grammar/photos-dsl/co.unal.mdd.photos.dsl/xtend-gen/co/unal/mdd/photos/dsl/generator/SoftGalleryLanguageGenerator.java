/**
 * generated by Xtext 2.18.0
 */
package co.unal.mdd.photos.dsl.generator;

import co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Photo;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SoftGalleryLanguageGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private String basePackageName = "co.unal.";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    InputOutput.<String>println("*** Generator v5 ***");
    InputOutput.<String>println(">>> doGenerate() Started <<<");
    InputOutput.<String>println("");
    String className = "";
    String packageName = "";
    Iterable<Photo> _filter = Iterables.<Photo>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Photo.class);
    for (final Photo domainItem : _filter) {
      {
        String _name = domainItem.getName();
        String _plus = ("Domain Iteration: " + _name);
        InputOutput.<String>println(_plus);
        Iterable<PresentationSegments> _filter_1 = Iterables.<PresentationSegments>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PresentationSegments.class);
        for (final PresentationSegments archItem : _filter_1) {
          {
            String _presentationSName = archItem.getPresentationSName();
            String _plus_1 = ("Architecture Iteration: " + _presentationSName);
            InputOutput.<String>println(_plus_1);
            Iterable<OrderSpring> _filter_2 = Iterables.<OrderSpring>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), OrderSpring.class);
            for (final OrderSpring techItem : _filter_2) {
              {
                String _name_1 = techItem.getName();
                String _plus_2 = ("Technology Iteration: " + _name_1);
                InputOutput.<String>println(_plus_2);
                String _name_2 = techItem.getName();
                String _plus_3 = (this.basePackageName + _name_2);
                String _plus_4 = (_plus_3 + ".");
                String _name_3 = domainItem.getName();
                String _plus_5 = (_plus_4 + _name_3);
                packageName = _plus_5;
                String _name_4 = domainItem.getName();
                String _name_5 = techItem.getName();
                String _plus_6 = (_name_4 + _name_5);
                className = _plus_6;
                fsa.generateFile((className + ".java"), this.generateClass(className, packageName));
                InputOutput.<String>println(("GeneratedFile: " + className));
                InputOutput.<String>println("");
              }
            }
          }
        }
      }
    }
    InputOutput.<String>println(">>> doGenerate() Finished <<<");
  }
  
  public CharSequence compile(final Photo photo, final PresentationSegments content, final OrderSpring order) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("// -------------------------");
    _builder.newLine();
    _builder.append("// Dominio: ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(photo).toString();
    _builder.append(_string);
    _builder.newLineIfNotEmpty();
    _builder.append("// Arquitectura: ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(content).toString();
    _builder.append(_string_1);
    _builder.newLineIfNotEmpty();
    _builder.append("// Tecnologia: ");
    String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(order).toString();
    _builder.append(_string_2);
    _builder.newLineIfNotEmpty();
    _builder.append("// -------------------------");
    _builder.newLine();
    _builder.newLine();
    {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(photo.eContainer());
      boolean _tripleNotEquals = (_fullyQualifiedName != null);
      if (_tripleNotEquals) {
        _builder.append("package ");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(photo.eContainer());
        _builder.append(_fullyQualifiedName_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public interface ");
    String _name = photo.getName();
    _builder.append(_name);
    QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(content);
    _builder.append(_fullyQualifiedName_2);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateClass(final String className, final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("// ----------------------------------------");
    _builder.newLine();
    _builder.append("// PackageName: ");
    _builder.append(packageName);
    _builder.newLineIfNotEmpty();
    _builder.append("// ClassName: ");
    _builder.append(className);
    _builder.newLineIfNotEmpty();
    _builder.append("// ----------------------------------------\t");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
