/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.generator;

import co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring;
import co.unal.mdd.photos.dsl.softGalleryLanguage.Photo;
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SoftGalleryLanguageGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Photo> _filter = Iterables.<Photo>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Photo.class);
    for (final Photo photo : _filter) {
      Iterable<PresentationSegments> _filter_1 = Iterables.<PresentationSegments>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), PresentationSegments.class);
      for (final PresentationSegments content : _filter_1) {
        Iterable<OrderSpring> _filter_2 = Iterables.<OrderSpring>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), OrderSpring.class);
        for (final OrderSpring order : _filter_2) {
          String _string = this._iQualifiedNameProvider.getFullyQualifiedName(photo).toString("/");
          String _plus = (_string + ".java");
          fsa.generateFile(_plus, 
            this.compile(photo, content, order));
        }
      }
    }
  }
  
  public CharSequence compile(final Photo photo, final PresentationSegments content, final OrderSpring order) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// -------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// ");
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(photo).toString();
    _builder.append(_string, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// ");
    String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(content).toString();
    _builder.append(_string_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// ");
    String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(order).toString();
    _builder.append(_string_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// -------------------------");
    _builder.newLine();
    _builder.newLine();
    {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(photo.eContainer());
      boolean _tripleNotEquals = (_fullyQualifiedName != null);
      if (_tripleNotEquals) {
        _builder.append("    ");
        _builder.append("package ");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(photo.eContainer());
        _builder.append(_fullyQualifiedName_1, "    ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public interface ");
    String _name = photo.getName();
    _builder.append(_name, "    ");
    QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(content);
    _builder.append(_fullyQualifiedName_2, "    ");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
