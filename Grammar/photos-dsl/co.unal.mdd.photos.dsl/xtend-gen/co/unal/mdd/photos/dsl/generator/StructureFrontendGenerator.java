/**
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.generator;

import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsStylesContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicStructure;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImportContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServiceContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactsRelationServ;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.StyleProperties;
import co.unal.mdd.photos.dsl.softGalleryLanguage.StylePropertiesContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont;
import co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent;
import co.unal.mdd.photos.dsl.softGalleryLanguage.ViewComponentCont;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StructureFrontendGenerator {
  public void directoryGeneration(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<SegmentStructureContent> _filter = Iterables.<SegmentStructureContent>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), SegmentStructureContent.class);
    for (final SegmentStructureContent ssc : _filter) {
      {
        InputOutput.<String>println("Architecture Iteration");
        boolean _equals = ssc.getName().equals("softgalleryFrontend");
        if (_equals) {
          ArrayList<String> folderNames = CollectionLiterals.<String>newArrayList();
          Iterable<ViewComponentCont> _filter_1 = Iterables.<ViewComponentCont>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ViewComponentCont.class);
          for (final ViewComponentCont vcc : _filter_1) {
            {
              folderNames.add(vcc.getNameView());
              String _nameView = vcc.getNameView();
              String _plus = ("softgallery/src/app/components/ui/" + _nameView);
              String _plus_1 = (_plus + "/");
              String _nameView_1 = vcc.getNameView();
              String _plus_2 = (_plus_1 + _nameView_1);
              String _plus_3 = (_plus_2 + ".js");
              fsa.generateFile(_plus_3, this.compile(vcc));
            }
          }
          Iterable<ComponentsStylesContent> _filter_2 = Iterables.<ComponentsStylesContent>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ComponentsStylesContent.class);
          for (final ComponentsStylesContent csc : _filter_2) {
            String _nameStyle = csc.getNameStyle();
            String _plus = ("softgallery/src/app/styles/" + _nameStyle);
            String _plus_1 = (_plus + "/");
            String _nameStyle_1 = csc.getNameStyle();
            String _plus_2 = (_plus_1 + _nameStyle_1);
            String _plus_3 = (_plus_2 + ".css");
            fsa.generateFile(_plus_3, this.compile(csc));
          }
          Iterable<SubcomponentCont> _filter_3 = Iterables.<SubcomponentCont>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), SubcomponentCont.class);
          for (final SubcomponentCont scc : _filter_3) {
            String _nameSubComp = scc.getNameSubComp();
            String _plus_4 = ("softgallery/src/app/components/ui/subcomponents/" + _nameSubComp);
            String _plus_5 = (_plus_4 + ".js");
            fsa.generateFile(_plus_5, 
              this.compile(scc));
          }
          Iterable<ReactServicesType> _filter_4 = Iterables.<ReactServicesType>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ReactServicesType.class);
          for (final ReactServicesType rsertype : _filter_4) {
            String _name = rsertype.getName();
            String _plus_6 = ("softgallery/src/app/actions/services/" + _name);
            String _plus_7 = (_plus_6 + ".js");
            fsa.generateFile(_plus_7, 
              this.compile(rsertype, rsertype.getName()));
          }
          Iterable<ComponentsLogic> _filter_5 = Iterables.<ComponentsLogic>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ComponentsLogic.class);
          for (final ComponentsLogic complogic : _filter_5) {
            fsa.generateFile(
              (("softgallery/src/app/components/ui/services/" + "app") + ".js"), 
              this.compile(complogic));
          }
        }
      }
    }
  }
  
  public CharSequence compile(final ComponentsLogic lc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("folder ");
    String _name = lc.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<LogicContent> _logiccomponents = lc.getLogiccomponents();
      for(final LogicContent logc : _logiccomponents) {
        CharSequence _compile = this.compile(logc);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final LogicContent logc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<LogicStructure> _logiccomponents = logc.getLogiccomponents();
      for(final LogicStructure logstr : _logiccomponents) {
        CharSequence _compile = this.compile(logstr);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final LogicStructure logstr) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("class ");
    String _appComName = logstr.getAppComName();
    _builder.append(_appComName);
    _builder.append(" extends Component {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ComponentsUI uc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("folder ");
    String _name = uc.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<UIContent> _uicomponents = uc.getUicomponents();
      for(final UIContent uic : _uicomponents) {
        CharSequence _compile = this.compile(uic);
        _builder.append(_compile);
        _builder.append("\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final UIContent uic) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ViewComponentCont> _componentcontent = uic.getComponentcontent();
      for(final ViewComponentCont vcc : _componentcontent) {
        CharSequence _compile = this.compile(vcc);
        _builder.append(_compile);
        _builder.append("\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final SubcomponentCont scc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ComponentClass> _uicontent = scc.getUicontent();
      for(final ComponentClass cccontent : _uicontent) {
        CharSequence _compile = this.compile(cccontent, scc.getNameSubComp());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ViewComponentCont vcc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ComponentClass> _uicontent = vcc.getUicontent();
      for(final ComponentClass cccontent : _uicontent) {
        CharSequence _compile = this.compile(cccontent, vcc.getNameView());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ComponentsStylesContent compstylecont) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<StyleProperties> _stylecontent = compstylecont.getStylecontent();
      for(final StyleProperties cstylecontent : _stylecontent) {
        CharSequence _compile = this.compile(cstylecontent);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final StyleProperties styleprops) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<StylePropertiesContent> _stylespropscontents = styleprops.getStylespropscontents();
      for(final StylePropertiesContent cstylecontprops : _stylespropscontents) {
        CharSequence _compile = this.compile(cstylecontprops);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final StylePropertiesContent stylepropscont) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(".");
    String _propName = stylepropscont.getPropName();
    _builder.append(_propName);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ComponentClass cccontent, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ReactImports> _componentclassimp = cccontent.getComponentclassimp();
      for(final ReactImports imps : _componentclassimp) {
        CharSequence _compile = this.compile(imps);
        _builder.append(_compile);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("class ");
    _builder.append(name);
    _builder.append(" extends Component {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ReactFunctions> _componentclassfunc = cccontent.getComponentclassfunc();
      for(final ReactFunctions funcs : _componentclassfunc) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(funcs);
        _builder.append(_compile_1, "\t");
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default ");
    _builder.append(name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ReactImports reactimps) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ReactImportContent> _reactsimports = reactimps.getReactsimports();
      for(final ReactImportContent imps : _reactsimports) {
        CharSequence _compile = this.compile(imps);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final ReactImportContent reactimpcont) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    String _impName = reactimpcont.getImpName();
    _builder.append(_impName);
    _builder.append(" from \"source\";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ReactFunctions reactfuncs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<ReactConstructor> _reactconstructors = reactfuncs.getReactconstructors();
      for(final ReactConstructor constr : _reactconstructors) {
        CharSequence _compile = this.compile(constr);
        _builder.append(_compile);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ReactConstructor reactconst) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("constructor(props){");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("super(props);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.state = {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    Class<? extends ReactConstructor> _class = reactconst.getClass();
    _builder.append(_class, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ReactsRelationServ reactrelationsrv) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      EList<ReactServicesType> _reactrelationcontent = reactrelationsrv.getReactrelationcontent();
      for(final ReactServicesType rrelatss : _reactrelationcontent) {
        _builder.append("\t\t\t");
        _builder.newLine();
        CharSequence _compile = this.compile(rrelatss, reactrelationsrv.getName());
        _builder.append(_compile);
        _builder.append("\t");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ReactServicesType rservtype, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("import request from \'../Wrapper\';");
    _builder.newLine();
    _builder.newLine();
    {
      EList<ReactServiceContent> _reactservcontent = rservtype.getReactservcontent();
      for(final ReactServiceContent servicecontent : _reactservcontent) {
        CharSequence _compile = this.compile(servicecontent, rservtype.getName());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("const ");
    String _name = rservtype.getName();
    _builder.append(_name);
    _builder.append(" = {");
    _builder.newLineIfNotEmpty();
    {
      EList<ReactServiceContent> _reactservcontent_1 = rservtype.getReactservcontent();
      for(final ReactServiceContent servicecontent_1 : _reactservcontent_1) {
        CharSequence _defName = this.defName(servicecontent_1);
        _builder.append(_defName);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default ");
    String _name_1 = rservtype.getName();
    _builder.append(_name_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ReactServiceContent rservcont, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("function ");
    String _functName = rservcont.getFunctName();
    _builder.append(_functName);
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence defName(final ReactServiceContent rservcont) {
    StringConcatenation _builder = new StringConcatenation();
    String _functName = rservcont.getFunctName();
    _builder.append(_functName);
    _builder.append(",\t\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
