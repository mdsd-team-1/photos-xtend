/*
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.generator

import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsStylesContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.LogicStructure
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImportContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServiceContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactsRelationServ
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.StyleProperties
import co.unal.mdd.photos.dsl.softGalleryLanguage.StylePropertiesContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont
import co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ViewComponentCont
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StructureFrontendGenerator{
	
   // @Inject extension IQualifiedNameProvider
    
	def directoryGeneration(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context){
	        // Arquitectura -> Componentes Arquitectura
	        for (ssc : resource.allContents.toIterable.filter(SegmentStructureContent)) {
        		println("Architecture Iteration")   	
        			
				if(ssc.name.equals("softgalleryFrontend")){
		        	
		        	var folderNames = newArrayList();
			        for (vcc : resource.allContents.toIterable.filter(ViewComponentCont)) {
			        	folderNames.add(vcc.nameView);
			            fsa.generateFile("softgallery/src/app/components/ui/" + vcc.nameView + "/" + vcc.nameView + ".js", vcc.compile)
			            /*fsa.generateFile("softgallery/src/app/styles/" + vcc.nameView + "/" + vcc.nameView + ".css", asd.compile)*/
			        }
			        
			        for (csc : resource.allContents.toIterable.filter(ComponentsStylesContent)) {
			        	//var asd = resource.allContents.toIterable.filter(ReactConstructor);
			            fsa.generateFile("softgallery/src/app/styles/" + csc.nameStyle + "/" + csc.nameStyle + ".css", csc.compile)
			        }
			        
			        
			        
			        for (scc : resource.allContents.toIterable.filter(SubcomponentCont)) {
			        	
			            fsa.generateFile(
			                "softgallery/src/app/components/ui/subcomponents/" + scc.nameSubComp + ".js",
			                scc.compile)
			        }
			        
			        for (rsertype : resource.allContents.toIterable.filter(ReactServicesType)) {
			        	
			            fsa.generateFile(
			                "softgallery/src/app/actions/services/" + rsertype.name + ".js",
			                rsertype.compile(rsertype.name))
			        }
			        
			        for (complogic : resource.allContents.toIterable.filter(ComponentsLogic)) {
			            fsa.generateFile(
			                "softgallery/src/app/components/ui/services/" + "app" + ".js",
			                complogic.compile)
			        }	                
			
				}
			}
		}
	
		def compile(ComponentsLogic lc)'''
		
	folder «lc.name»
	
	«FOR logc: lc.logiccomponents»
	«logc.compile»
	«ENDFOR»
		
	'''
	
	def compile(LogicContent logc)'''
		
		«FOR logstr: logc.logiccomponents»
			«logstr.compile»
		«ENDFOR»
		
	'''
	
	def compile(LogicStructure logstr)'''
		
	class «logstr.appComName» extends Component {
					
		
	}
		
	'''
	
	
	
	def compile(ComponentsUI uc)'''
		
		folder «uc.name»
		
		«FOR uic: uc.uicomponents»
			«uic.compile»					
		«ENDFOR»
		
	'''
	
	def compile(UIContent uic)'''
		
		«FOR vcc: uic.componentcontent»
			«vcc.compile»					
		«ENDFOR»
		
	'''
	
	def compile(SubcomponentCont scc)'''
	
	«FOR cccontent: scc.uicontent»
	«cccontent.compile(scc.nameSubComp)»
	«ENDFOR»
	
	'''	
	
	def compile(ViewComponentCont vcc)'''
	
	«FOR cccontent: vcc.uicontent»
	«cccontent.compile(vcc.nameView)»
	«ENDFOR»
	'''
	
	def compile(ComponentsStylesContent compstylecont)'''
	
	«FOR cstylecontent: compstylecont.stylecontent»
	«cstylecontent.compile()»
	«ENDFOR»
	'''
	
	def compile(StyleProperties styleprops)'''
	«FOR cstylecontprops: styleprops.stylespropscontents»
	«cstylecontprops.compile()»
	«ENDFOR»	
	'''
	
	def compile(StylePropertiesContent stylepropscont )'''
	.«stylepropscont.propName»{
		width: 100%;
	}
	'''	
	
	def compile(ComponentClass cccontent, String name)'''

	«FOR imps: cccontent.componentclassimp»
		«imps.compile»	
	«ENDFOR»
	
	class «name» extends Component {
		
		«FOR funcs: cccontent.componentclassfunc»
		«funcs.compile»	
		«ENDFOR»	
		
	}
	
	export default «name»;
		
	'''
	
	def compile(ReactImports reactimps)'''
	«FOR imps: reactimps.reactsimports»
	«imps.compile»
	«ENDFOR»	
	'''
	
	def compile(ReactImportContent reactimpcont)'''	
	import «reactimpcont.impName» from "source";
	'''
	
	def compile(ReactFunctions reactfuncs)'''
	«FOR constr: reactfuncs.reactconstructors»
	«constr.compile»	
	«ENDFOR»

	'''
	
	def compile(ReactConstructor reactconst)'''
		
	constructor(props){
	    
	    super(props);
	
		this.state = {
			
		«reactconst.class»
		
		};

	};
		
	'''
	
	def compile (ReactsRelationServ reactrelationsrv)'''
	
	«FOR rrelatss: reactrelationsrv.reactrelationcontent»
				
	«rrelatss.compile(reactrelationsrv.name)»	

	«ENDFOR»
	
	'''
	def compile(ReactServicesType rservtype, String name)'''
	
	import request from '../Wrapper';
	
	«FOR servicecontent: rservtype.reactservcontent»			
	«servicecontent.compile(rservtype.name)»
	«ENDFOR»
	
	const «rservtype.name» = {
	«FOR servicecontent: rservtype.reactservcontent»
	«servicecontent.defName()»
	«ENDFOR»
	};
	
	export default «rservtype.name»;
	
	'''
	
	def compile(ReactServiceContent rservcont, String name)'''
		
	function «rservcont.functName»(){
		
	};
		
		
	'''
	
	def defName(ReactServiceContent rservcont)'''
	«rservcont.functName»,		
	'''
	


}