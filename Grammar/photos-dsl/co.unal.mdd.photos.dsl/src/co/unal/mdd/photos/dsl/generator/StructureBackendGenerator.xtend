/*
 * generated by Xtext 2.17.1
 */
package co.unal.mdd.photos.dsl.generator

import co.unal.mdd.photos.dsl.softGalleryLanguage.BusinessLogicSegments
import co.unal.mdd.photos.dsl.softGalleryLanguage.DirectoryContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.Entities
import co.unal.mdd.photos.dsl.softGalleryLanguage.MultipleFile
import co.unal.mdd.photos.dsl.softGalleryLanguage.SegmentStructureContent
import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StructureBackendGenerator{
	
    @Inject extension IQualifiedNameProvider
    
    var basePackageName = "co.edu.unal"
    var className = ""
	var packageName = ""
	
	def directoryGeneration(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context){
		// Dominio -> Photo
        for (domainItem : resource.allContents.toIterable.filter(Entities)) {
			println("Domain Iteration: " + domainItem.name)
        	
        	
	        // Arquitectura -> Componentes Arquitectura
	        for (ssc : resource.allContents.toIterable.filter(SegmentStructureContent)) {
        		println("Architecture Iteration")   	
        			
				if(ssc.name.equals("photosappback")){
                
                // Arquitectura -> Componentes Arquitectura
                for (dir : resource.allContents.toIterable.filter(DirectoryContent)) {
        		println("Architecture Iteration")   	
        		
        		if(dir.name.equals("main")){
        			
				// Arquitectura -> Componentes Arquitectura               
		        for (bls : resource.allContents.toIterable.filter(BusinessLogicSegments)) {

				  /*switch bls.name {
				  	case "controller":{
				  		packageName = basePackageName +"."+ ssc.name +"."+ dir.name +"."+ bls.name		        	
		        		className = domainItem.name + bls.name.toFirstUpper	
				  	}
				  	case "model":{
				  		packageName = basePackageName +"."+ ssc.name +"."+ dir.name +"."+ bls.name		        	
		        		className = domainItem.name + bls.name.toFirstUpper
				  	}
				  	default:{
				  		packageName = basePackageName +"."+ ssc.name +"."+ dir.name +"."+ bls.name		        	
		        		className = domainItem.name + bls.name.toFirstUpper
				  	}
				  }*/
		        	println("Architecture Iteration 2" + bls.name)
		        	
		        	packageName = basePackageName +"."+ ssc.name +"."+ dir.name +"."+ bls.name		        	
		            className = domainItem.name + bls.name.toFirstUpper
		        		
		            fsa.generateFile(packageName.replace('.', '/') +"/"+ className + ".java", generateClass(className, packageName))	                
				 }
		       	 }
		       	 else if(dir.name.equals("resources")){
		       	 	
		       	 // Arquitectura -> Componentes Arquitectura               
		        for (mf : resource.allContents.toIterable.filter(MultipleFile)) {
		        	
		        	if(mf.name.equals("application")){

		        	println("Architecture Iteration 2" + mf.name)
		        	
		        	packageName = basePackageName +"."+ ssc.name +"."+ dir.name 	        	
		        	className = mf.name

		            fsa.generateFile(packageName.replace('.', '/') +"/"+ className + ".properties", generateProperties(className, packageName))
		            fsa.generateFile(packageName.replace('.', '/') +"/"+ className + ".yml", generateYml(className, packageName))
		            
		         }
		       	 }
		       	 }
		       	 }
		       }
	        }
        }
	}
		
	
	def generateClass(String className, String packageName)
''' 
	// ----------------------------------------
	// PackageName: «packageName»
	// ClassName: «className»
	// ----------------------------------------	
	
	
	package «packageName»;
	
	public class «className» {
		
		
	}
''' 

	def generateInterface(String className, String packageName)
''' 
	// ----------------------------------------
	// PackageName: «packageName»
	// ClassName: «className»
	// ----------------------------------------	
	
	
	package «packageName»;
	
	public interface «className» extends JpaRepository<Album, Integer>, JpaSpecificationExecutor<Album>{
		
		
	}
''' 

	def generateProperties(String className, String packageName)
''' 
	// ----------------------------------------
	// PackageName: «packageName»
	// ClassName: «className»
	// ----------------------------------------	
	
	
	package «packageName»;
	
	public class «className» {
		
		
	}
''' 

	def generateYml(String className, String packageName)
''' 
	// ----------------------------------------
	// PackageName: «packageName»
	// ClassName: «className»
	// ----------------------------------------	
	
	
	package «packageName»;
	
	public class «className» {
		
		
	}
''' 

}