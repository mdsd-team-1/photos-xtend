/*
 * generated by Xtext 2.18.0
 */
package co.unal.mdd.photos.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import co.unal.mdd.photos.dsl.softGalleryLanguage.Photo
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import co.unal.mdd.photos.dsl.softGalleryLanguage.PresentationSegments
import co.unal.mdd.photos.dsl.softGalleryLanguage.OrderSpring
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsUI
import co.unal.mdd.photos.dsl.softGalleryLanguage.UIContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentsLogic
import co.unal.mdd.photos.dsl.softGalleryLanguage.ViewComponentCont
import co.unal.mdd.photos.dsl.softGalleryLanguage.ComponentClass
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImports
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactImportContent
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactFunctions
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactConstructor
import co.unal.mdd.photos.dsl.softGalleryLanguage.State
import co.unal.mdd.photos.dsl.softGalleryLanguage.SubcomponentCont
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesRelation
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactsRelationServ
import co.unal.mdd.photos.dsl.softGalleryLanguage.ReactServicesType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SoftGalleryLanguageGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
    
    var basePackageName = "co.unal."
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		println("*** Generator v5 ***")
		println(">>> doGenerate() Started <<<")
		println("") // New line

		var className = ""
		var packageName = ""

		//Dominio -> Photo
        for (domainItem : resource.allContents.toIterable.filter(Photo)) {
			println("Domain Iteration: " + domainItem.name)
        	
        	
	        // Arquitectura -> PresentationSegments
	        for (archItem : resource.allContents.toIterable.filter(PresentationSegments)) {
        		println("Architecture Iteration: " + archItem.presentationSName)
        		

                // Tecnologia -> OrderSpring
		        for (techItem : resource.allContents.toIterable.filter(OrderSpring)) {
		        	println("Technology Iteration: " + techItem.name)
		        	
		        	packageName = basePackageName + techItem.name + "." + domainItem.name		        	
		        	className = domainItem.name + techItem.name

		            fsa.generateFile(className + ".java", generateClass(className, packageName))
		            
		            println("GeneratedFile: " + className)
		            println("") // New line
		                
					// photo.fullyQualifiedName.toString("/") + content.fullyQualifiedName.toString() + order.fullyQualifiedName.toString() + ".java",
		        }
	        }
        }      
        
        println(">>> doGenerate() Finished <<<")
	}
	
    def compile(Photo photo, PresentationSegments content, OrderSpring order)''' 
	
	// -------------------------
	// Dominio: «photo.fullyQualifiedName.toString()»
	// Arquitectura: «content.fullyQualifiedName.toString()»
	// Tecnologia: «order.fullyQualifiedName.toString()»
	// -------------------------

    «IF photo.eContainer.fullyQualifiedName !== null»
	package «photo.eContainer.fullyQualifiedName»;
    «ENDIF»
		
	public interface «photo.name»«content.fullyQualifiedName» {
	
	}
	'''

	def generateClass(String className, String packageName)''' 
	
	// ----------------------------------------
	// PackageName: «packageName»
	// ClassName: «className»
	// ----------------------------------------	
	
	
	package «packageName»;
	
	public class «className» {
		
		
	}
	'''
	
}
