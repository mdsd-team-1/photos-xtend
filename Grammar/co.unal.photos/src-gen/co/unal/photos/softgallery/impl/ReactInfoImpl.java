/**
 * generated by Xtext 2.17.1
 */
package co.unal.photos.softgallery.impl;

import co.unal.photos.softgallery.ReactInfo;
import co.unal.photos.softgallery.ReactInformation;
import co.unal.photos.softgallery.SoftgalleryPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>React Info</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.unal.photos.softgallery.impl.ReactInfoImpl#getReactinformation <em>Reactinformation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReactInfoImpl extends MinimalEObjectImpl.Container implements ReactInfo
{
  /**
   * The cached value of the '{@link #getReactinformation() <em>Reactinformation</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReactinformation()
   * @generated
   * @ordered
   */
  protected EList<ReactInformation> reactinformation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactInfoImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoftgalleryPackage.Literals.REACT_INFO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ReactInformation> getReactinformation()
  {
    if (reactinformation == null)
    {
      reactinformation = new EObjectContainmentEList<ReactInformation>(ReactInformation.class, this, SoftgalleryPackage.REACT_INFO__REACTINFORMATION);
    }
    return reactinformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoftgalleryPackage.REACT_INFO__REACTINFORMATION:
        return ((InternalEList<?>)getReactinformation()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoftgalleryPackage.REACT_INFO__REACTINFORMATION:
        return getReactinformation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoftgalleryPackage.REACT_INFO__REACTINFORMATION:
        getReactinformation().clear();
        getReactinformation().addAll((Collection<? extends ReactInformation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoftgalleryPackage.REACT_INFO__REACTINFORMATION:
        getReactinformation().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoftgalleryPackage.REACT_INFO__REACTINFORMATION:
        return reactinformation != null && !reactinformation.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ReactInfoImpl
